{"version":3,"sources":["../node_modules/browser-pack/_prelude.js","src/bar/bar_chart.ts","src/charts.ts","src/legend/interactive_legend.ts","src/line/line_chart.ts","src/pie/pie_chart.ts","temp/pip-webui-charts-html.min.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","pip","charts","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","pipBarChart","restrict","scope","series","xTickFormat","yTickFormat","interactiveLegend","bindToController","controllerAs","templateUrl","controller","$element","$scope","$timeout","$interval","$mdColorPalette","prepareData","data","result","_","each","seria","disabled","values","push","cloneDeep","drawEmptyState","find","d3","select","remove","attr","chartElem","append","classed","style","height","configBarWidthAndLabel","timeout","labels","chartBars","getBBox","index","item","barHeight","Number","barWidth","element","x","transform","translate","y","transition","duration","materialColorToRgba","color","value","generateParameterColor","vm","forEach","colors","chart","map","palette","legend","clone","slice","scale","paletteColors","ordinal","range","$watch","updatedSeries","datum","updatedLegend","nv","addGraph","models","discreteBarChart","margin","top","right","bottom","left","d","label","key","showValues","staggerLabels","showXAxis","showYAxis","valueFormat","format","tooltip","enabled","noData","yAxis","tickFormat","xAxis","get","utils","windowResize","update","angular","directive","pipChartLegend","interactive","colorCheckboxes","checkboxContainers","$","css","animate","legendTitles","addClass","prepareSeries","hex","newValue","oldValue","pipLineChart","xFormat","dynamic","containerWidth","innerWidth","containerHeight","innerHeight","updateScroll","domains","boundary","bDiff","domDiff","isEqual","addZoom","svg","setData","newChart","xDomain","domain","yDomain","redraw","xScale","yScale","x_boundary","y_boundary","prevXDomain","prevScale","d3zoom","prevTranslate","nice","fixDomain","updateChart","zoomed","event","unzoomed","step","which","coordinates","point","keypress","keyCode","setZoom","scaleExtent","behavior","zoom","center0","width","translate0","coordinates0","center1","on","getXMinMax","maxVal","minVal","tempMinVal","max","tempMaxVal","min","updateZoomOptions","sourceEvents","isVisibleX","undefined","isVisibleY","zoomIn","zoomOut","$on","selectAll","lineChart","useInteractiveGuideline","showLegend","pipPieChart","donut","total","size","pie","layout","sort","arc","innerRadius","outerRadius","enter","renderTotalLabel","svgElem","totalVal","reduce","sum","curr","toFixed","text","titleElem","resizeTitleLabelUnwrap","boxSize","resizeTitleLabel","newVal","pieChart","showLabels","labelThreshold","growOnHover","donutRatio","run","$templateCache","put"],"mappings":"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","file":"pip-webui-charts.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","(function () {\r\n    'use strict';\r\n\r\n    /**\r\n     * @ngdoc module\r\n     * @name pipBarCharts\r\n     *\r\n     * @description\r\n     * Bar chart on top of Rickshaw charts\r\n     */\r\n    angular.module('pipBarCharts', [])\r\n        .directive('pipBarChart', pipBarChart);\r\n\r\n    function pipBarChart() {\r\n        return {\r\n            restrict: 'E',\r\n            scope: {\r\n                series: '=pipSeries',\r\n                xTickFormat: '=pipXTickFormat',\r\n                yTickFormat: '=pipYTickFormat',\r\n                interactiveLegend: '=pipInterLegend'\r\n            },\r\n            bindToController: true,\r\n            controllerAs: 'barChart',\r\n            templateUrl: 'bar/bar_chart.html',\r\n            controller: function ($element, $scope, $timeout, $interval, $mdColorPalette) {\r\n                let vm = this;\r\n                let chart = null;\r\n                let chartElem = null;\r\n                let colors = _.map($mdColorPalette, function (palette, color) {\r\n                    return color;\r\n                });\r\n                let height = 270;\r\n\r\n                vm.data = prepareData(vm.series) || [];\r\n                vm.legend = _.clone(vm.series);\r\n                \r\n                if ((vm.series || []).length > colors.length) {\r\n                    vm.data = vm.series.slice(0, 9);\r\n                }\r\n\r\n                generateParameterColor();\r\n\r\n                (<any>d3.scale).paletteColors = function () {\r\n                    return d3.scale.ordinal().range(colors.map(materialColorToRgba));\r\n                };\r\n\r\n                $scope.$watch('barChart.series', function (updatedSeries) {\r\n                    vm.data = prepareData(updatedSeries);\r\n                    vm.legend = _.clone(vm.series);\r\n                    generateParameterColor();\r\n\r\n                    if (chart) {\r\n                        chartElem.datum(vm.data).call(chart);\r\n                        configBarWidthAndLabel();\r\n                        drawEmptyState();\r\n                    }\r\n                });\r\n\r\n                $scope.$watch('barChart.legend', function(updatedLegend) {\r\n                    vm.data = prepareData(updatedLegend);\r\n                    vm.legend = updatedLegend;\r\n\r\n                    if (chart) {\r\n                        chartElem.datum(vm.data).call(chart);\r\n                        configBarWidthAndLabel();\r\n                        drawEmptyState();\r\n                    }\r\n                }, true);\r\n\r\n                function prepareData(data) {\r\n                    let result = [];\r\n                    _.each(data, (seria) => {\r\n                        if (!seria.disabled && seria.values) result.push(seria);\r\n                    });\r\n\r\n                    return _.cloneDeep(result);\r\n                }\r\n\r\n                /**\r\n                 * Instantiate chart\r\n                 */\r\n                nv.addGraph(function () {\r\n                    chart = nv.models.discreteBarChart()\r\n                        .margin({top: 10, right: 0, bottom: 10, left: 50})\r\n                        .x(function (d) { return d.label || d.key || d.x; })\r\n                        .y(function (d) { return d.value; })\r\n                        .showValues(true)\r\n                        .staggerLabels(true) \r\n                        .showXAxis(true)\r\n                        .showYAxis(true)\r\n                        .valueFormat(<any>d3.format('d'))\r\n                        .duration(0)\r\n                        .height(height)\r\n                        .color(function(d) {\r\n                            return vm.data[d.series].color || materialColorToRgba(colors[d.series]);\r\n                        });\r\n\r\n                    chart.tooltip.enabled(false);\r\n                    chart.noData('There is no data right now...');\r\n\r\n                    chart.yAxis\r\n                        .tickFormat(function (d) {\r\n                            return vm.yTickFormat ? vm.yTickFormat(d) : d;\r\n                        });\r\n\r\n                    chart.xAxis\r\n                        .tickFormat(function (d) {\r\n                            return vm.xTickFormat ? vm.xTickFormat(d) : d;\r\n                        });\r\n\r\n                    chartElem = d3.select($element.get(0))\r\n                        .select('.bar-chart svg')\r\n                        .datum(vm.data)\r\n                        .style('height', '285px')\r\n                        .call(chart);\r\n\r\n                    nv.utils.windowResize(() => {\r\n                        chart.update();\r\n                         configBarWidthAndLabel(0);\r\n                    });\r\n\r\n                    return chart;\r\n                }, function () {\r\n\r\n                    $timeout(configBarWidthAndLabel, 0);\r\n                    drawEmptyState();\r\n                });\r\n\r\n                function drawEmptyState() {\r\n                    if ($element.find('.nv-noData').length === 0) {\r\n                        d3.select($element.find('.empty-state')[0]).remove();\r\n                    } else {\r\n                        $element.find('.nv-noData').attr('x', 100);\r\n\r\n                        let g = chartElem.append('g').classed('empty-state', true);\r\n\r\n                        g.append('g')\r\n                            .style('fill', 'rgba(0, 0, 0, 0.08)')\r\n                            .append('rect')\r\n                            .attr('height', height - 10)\r\n                            .attr('width', 38);\r\n\r\n                        g.append('g')\r\n                            .attr('transform', 'translate(46, 60)')\r\n                            .style('fill', 'rgba(0, 0, 0, 0.08)')\r\n                            .append('rect')\r\n                            .attr('height', 200)\r\n                            .attr('width', 38);\r\n\r\n                        g.append('g')\r\n                            .attr('transform', 'translate(92, 160)')\r\n                            .style('fill', 'rgba(0, 0, 0, 0.08)')\r\n                            .append('rect')\r\n                            .attr('height', 100)\r\n                            .attr('width', 38);\r\n                    }\r\n                }\r\n\r\n                /**\r\n                 * Aligns value label according to parent container size.\r\n                 * @return {void}\r\n                 */\r\n                function configBarWidthAndLabel(timeout: number = 1000) {\r\n                    var labels = $element.find('.nv-bar text'),\r\n                        chartBars = $element.find('.nv-bar'),\r\n                        parentHeight = (<any>$element.find('.nvd3-svg')[0]).getBBox().height;\r\n\r\n                    d3.select($element.find('.bar-chart')[0]).classed('visible', true);\r\n\r\n                    chartBars.each(function (index, item) {\r\n                        var barHeight = Number(d3.select(<any>item).select('rect').attr('height')),\r\n                            barWidth = Number(d3.select(<any>item).select('rect').attr('width')),\r\n                            element = d3.select(<any>item),\r\n                            x = d3.transform(element.attr('transform')).translate[0],\r\n                            y = d3.transform(element.attr('transform')).translate[1];\r\n\r\n                        element\r\n                            .attr('transform', 'translate(' + Number(x + index * (barWidth + 15)) + ', ' + (height - 20) + ')')\r\n                            .select('rect').attr('height', 0);\r\n\r\n                        element\r\n                            .transition()\r\n                            .duration(timeout)\r\n                            .attr('transform', 'translate(' + Number(x + index * (barWidth + 15)) + ', ' + y + ')')\r\n                            .select('rect').attr('height', barHeight);\r\n\r\n                        d3.select(labels[index])\r\n                            .attr('dy', barHeight / 2 + 10)\r\n                            .attr('x', barWidth / 2);\r\n                    });\r\n                }\r\n\r\n                /**\r\n                 * Converts palette color name into RGBA color representation.\r\n                 * Should by replaced by palette for charts.\r\n                 *\r\n                 * @param {string} color    Name of color from AM palette\r\n                 * @returns {string} RGBa format\r\n                 */\r\n                function materialColorToRgba(color) {\r\n                    return 'rgba(' + $mdColorPalette[color][500].value[0] + ','\r\n                        + $mdColorPalette[color][500].value[1] + ','\r\n                        + $mdColorPalette[color][500].value[2] + ','\r\n                        + ($mdColorPalette[color][500].value[3] || 1) + ')';\r\n                }\r\n\r\n                /**\r\n                 * Helpful method\r\n                 * @private\r\n                 */\r\n                function generateParameterColor() {\r\n                    if (!vm.data) return;\r\n\r\n                    vm.data.forEach(function (item, index) {\r\n                        if (item.values[0]) {\r\n                            item.values[0].color = item.values[0].color || materialColorToRgba(colors[index]);\r\n                            item.color = item.values[0].color;\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        };\r\n    }\r\n})();","﻿/**\r\n * @file Registration of chart WebUI controls\r\n * @copyright Digital Living Software Corp. 2014-2016\r\n */\r\n\r\n/* global angular */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('pipCharts', [\r\n        'pipBarCharts',\r\n        'pipLineCharts',\r\n        'pipPieCharts',\r\n        'pipChartLegends'\r\n    ]);\r\n\r\n})();\r\n\r\n","(function () {\r\n    'use strict';\r\n\r\n    /**\r\n     * @ngdoc module\r\n     * @name pipLegends\r\n     *\r\n     * @description\r\n     * Legend of charts\r\n     */\r\n    angular.module('pipChartLegends', [])\r\n        .directive('pipChartLegend', pipChartLegend);\r\n\r\n    function pipChartLegend() {\r\n        return {\r\n            restrict: 'E',\r\n            scope: {\r\n                series: '=pipSeries',\r\n                interactive: '=pipInteractive'\r\n            },\r\n            templateUrl: 'legend/interactive_legend.html',\r\n            controller: function ($element, $scope, $timeout, $mdColorPalette) {\r\n                var colors = _.map($mdColorPalette, function (palette) {\r\n                    return palette[500].hex;\r\n                });\r\n\r\n                function colorCheckboxes() {\r\n                    var checkboxContainers = $($element).find('md-checkbox .md-container');\r\n                    \r\n                    checkboxContainers.each(function (index, item) {\r\n                        $(item)\r\n                            .css('color', $scope.series[index].color || colors[index])\r\n                            .find('.md-icon')\r\n                            .css('background-color', $scope.series[index].color || colors[index]);\r\n                    });\r\n                }\r\n\r\n                function animate() {\r\n                    var legendTitles = $($element).find('.chart-legend-item');\r\n\r\n                    legendTitles.each(function (index, item) {\r\n                        $timeout(function () {\r\n                            $(item).addClass('visible');\r\n                        }, 200 * index);\r\n                    });\r\n                }\r\n                \r\n                function prepareSeries() {\r\n                    if (!$scope.series) return;\r\n\r\n                    $scope.series.forEach(function (item, index) {\r\n                        item.color = item.color || (item.values && item.values[0] && item.values[0].color ? item.values[0].color : colors[index]);\r\n                        item.disabled = item.disabled || false;\r\n                    });   \r\n                }\r\n\r\n                $scope.$watch('series', function () {\r\n                    $timeout(function () {\r\n                        animate();\r\n                        colorCheckboxes();\r\n                    }, 0);\r\n                    prepareSeries();\r\n                }, true);\r\n\r\n                $scope.$watch('interactive', function (newValue, oldValue) {\r\n                    if (newValue == true && newValue != oldValue) {\r\n                        $timeout(colorCheckboxes, 0);\r\n                    }\r\n                });\r\n\r\n                $timeout(function () {\r\n                    animate();\r\n                    colorCheckboxes();\r\n                }, 0);\r\n                prepareSeries();\r\n            }\r\n        };\r\n    }\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    /**\r\n     * @ngdoc module\r\n     * @name pipLineCharts\r\n     *\r\n     * @description\r\n     * Line chart on top of Rickshaw charts\r\n     */\r\n    angular.module('pipLineCharts', [])\r\n        .directive('pipLineChart', pipLineChart);\r\n\r\n    function pipLineChart() {\r\n        return {\r\n            restrict: 'E',\r\n            scope: {\r\n                series: '=pipSeries',\r\n                showYAxis: '=pipYAxis',\r\n                showXAxis: '=pipXAxis',\r\n                xFormat: '=pipXFormat',\r\n                xTickFormat: '=pipXTickFormat',\r\n                yTickFormat: '=pipYTickFormat',\r\n                dynamic: '=pipDynamic',\r\n                interactiveLegend: '=pipInterLegend'\r\n            },\r\n            bindToController: true,\r\n            controllerAs: 'lineChart',\r\n            templateUrl: 'line/line_chart.html',\r\n            controller: function ($element, $scope, $timeout, $interval, $mdColorPalette) {\r\n                var vm        = this;\r\n                var chart     = null;\r\n                var chartElem = null;\r\n                var setZoom = null;\r\n                var updateZoomOptions = null;\r\n                var colors    = _.map($mdColorPalette, function (palette, color) {\r\n                    return color;\r\n                });\r\n\r\n                vm.data = prepareData(vm.series) || [];\r\n                vm.legend = _.clone(vm.series);\r\n                vm.sourceEvents = [];\r\n                \r\n                vm.isVisibleX = function () {\r\n                    return vm.showXAxis == undefined ? true : vm.showXAxis; \r\n                };\r\n\r\n                vm.isVisibleY = function () {\r\n                    return vm.showYAxis == undefined ? true : vm.showYAxis;\r\n                };\r\n\r\n                vm.zoomIn = function () {\r\n                    if (setZoom) {\r\n                        setZoom('in');\r\n                    }\r\n                };\r\n\r\n                vm.zoomOut = function () {\r\n                    if (setZoom) {\r\n                        setZoom('out');\r\n                    }\r\n                };\r\n                \r\n                if (vm.series && vm.series.length > colors.length) {\r\n                    vm.data = vm.series.slice(0, 9);\r\n                }\r\n\r\n                // Sets colors of items\r\n                generateParameterColor();\r\n\r\n                (<any>d3.scale).paletteColors = function () {\r\n                    return d3.scale.ordinal().range(colors.map(materialColorToRgba));\r\n                };\r\n\r\n                $scope.$watch('lineChart.series', function (updatedSeries) {\r\n                    vm.data = prepareData(updatedSeries);\r\n                    vm.legend = _.clone(vm.series);\r\n\r\n                    generateParameterColor();\r\n\r\n                    if (chart) {\r\n                        chartElem.datum(vm.data || []).call(chart);\r\n                        drawEmptyState();\r\n\r\n                        if (updateZoomOptions) updateZoomOptions(vm.data);\r\n                    }\r\n                }, true);\r\n\r\n                $scope.$watch('lineChart.legend', function(updatedLegend) {\r\n                    vm.data = prepareData(updatedLegend);\r\n                    vm.legend = updatedLegend;\r\n\r\n                    if (chart) {\r\n                        chartElem.datum(vm.data || []).call(chart);\r\n                        drawEmptyState();\r\n\r\n                        if (updateZoomOptions) updateZoomOptions(vm.data);\r\n                    }\r\n                }, true);\r\n\r\n                $scope.$on('$destroy', () => {\r\n                    d3.selectAll('.nvtooltip').style('opacity', 0);\r\n                });\r\n\r\n                function prepareData(data) {\r\n                    let result = [];\r\n                    _.each(data, (seria) => {\r\n                        if (!seria.disabled && seria.values) result.push(seria);\r\n                    });\r\n\r\n                    return _.cloneDeep(result);\r\n                }\r\n\r\n                /**\r\n                 * Instantiate chart\r\n                 */\r\n                nv.addGraph(() => {\r\n                    chart = nv.models.lineChart()\r\n                        .margin({ top: 20, right: 20, bottom: 30, left: 50 })\r\n                        .x(function (d) {\r\n                            return d && d.x ? (vm.xFormat ? vm.xFormat(d.x) : d.x) : d;\r\n                        })\r\n                        .y(function (d) {\r\n                            return d.value;\r\n                        })\r\n                        .height(270)\r\n                        .useInteractiveGuideline(true)\r\n                        .showXAxis(true)\r\n                        .showYAxis(true)\r\n                        .showLegend(false)\r\n                        .color(function(d) {\r\n                            return d.color || (<any>d3.scale).paletteColors().range();\r\n                        });\r\n\r\n                    chart.tooltip.enabled(false);\r\n                    chart.noData('There is no data right now...');\r\n\r\n                    chart.yAxis\r\n                        .tickFormat(function (d) {\r\n                            return vm.yTickFormat ? vm.yTickFormat(d) : d;\r\n                        });\r\n\r\n                    chart.xAxis\r\n                        .tickFormat(function (d) {\r\n                            return vm.xTickFormat ? vm.xTickFormat(d) : d;\r\n                        });\r\n\r\n                    chartElem = d3.select($element.get(0)).select('.line-chart svg');\r\n                    chartElem.datum(vm.data || []).style('height', '270px').call(chart);\r\n\r\n                    if (vm.dynamic) {\r\n                        addZoom(chart, chartElem);\r\n                    }\r\n\r\n                    nv.utils.windowResize(() => {\r\n                        chart.update();\r\n                        drawEmptyState();\r\n                    });\r\n\r\n                    return chart;\r\n                }, () => {\r\n                    drawEmptyState();\r\n                });\r\n\r\n                function drawEmptyState() {\r\n                    if (!$element.find('text.nv-noData').get(0)) {\r\n                        d3.select($element.find('.empty-state')[0]).remove();\r\n                    } else {\r\n                        let containerWidth = $element.find('.line-chart').innerWidth(),\r\n                            containerHeight = $element.find('.line-chart').innerHeight();\r\n                        \r\n                        if ($element.find('.empty-state').get(0)) {\r\n                            chartElem\r\n                                .select('image')\r\n                                .attr('transform', 'scale(' + (containerWidth / 1151) + ',' + (containerHeight / 216) + ')');\r\n                        } else {\r\n                            chartElem\r\n                                .append(\"defs\")\r\n                                .append(\"pattern\")\r\n                                .attr(\"height\", 1)\r\n                                .attr(\"width\", 1)\r\n                                .attr(\"x\", \"0\")\r\n                                .attr(\"y\", \"0\")\r\n                                .attr(\"id\", \"bg\")\r\n                                .append(\"image\")\r\n                                .attr('x', 27)\r\n                                .attr('y', 0)\r\n                                .attr('height', \"216px\")\r\n                                .attr('width', \"1151px\")\r\n                                .attr('transform', 'scale(' + (containerWidth / 1151) + ',' + (containerHeight / 216) + ')')\r\n                                .attr(\"xlink:href\", \"images/line_chart_empty_state.svg\");\r\n\r\n                            chartElem\r\n                                .append('rect')\r\n                                .classed('empty-state', true)\r\n                                .attr('height', \"100%\")\r\n                                .attr('width', \"100%\")\r\n                                .attr('fill', 'url(#bg)');\r\n                        }\r\n                    }\r\n                }\r\n\r\n                function updateScroll(domains, boundary) {\r\n                    var bDiff = boundary[1] - boundary[0],\r\n                        domDiff = domains[1] - domains[0],\r\n                        isEqual = (domains[1] - domains[0])/bDiff === 1;\r\n\r\n                    $($element[0]).find('.visual-scroll')\r\n                        .css('opacity', function () {\r\n                            return isEqual ? 0 : 1;\r\n                        });\r\n\r\n                    if (isEqual) return;\r\n                    \r\n                    $($element[0]).find('.scrolled-block')\r\n                        .css('left', function () {\r\n                            return domains[0]/bDiff * 100 + '%';\r\n                        })\r\n                        .css('width', function () {\r\n                            return domDiff/bDiff * 100 + '%';\r\n                        });\r\n                }\r\n\r\n                function addZoom(chart, svg) {\r\n                    // scaleExtent\r\n                    var scaleExtent = 4;\r\n\r\n                    // parameters\r\n                    var yAxis       = null;\r\n                    var xAxis       = null;\r\n                    var xDomain     = null;\r\n                    var yDomain     = null;\r\n                    var redraw      = null;\r\n                    var svg         = svg;\r\n\r\n                    // scales\r\n                    var xScale = null;\r\n                    var yScale = null;\r\n\r\n                    // min/max boundaries\r\n                    var x_boundary = null;\r\n                    var y_boundary = null;\r\n\r\n                    // create d3 zoom handler\r\n                    var d3zoom = d3.behavior.zoom();\r\n                    var prevXDomain = null;\r\n                    var prevScale = null;\r\n                    var prevTranslate = null;\r\n\r\n                    setData(chart);\r\n\r\n                    function setData(newChart) {\r\n                        // parameters\r\n                        yAxis       = newChart.yAxis;\r\n                        xAxis       = newChart.xAxis;\r\n                        xDomain     = newChart.xDomain || xAxis.scale().domain;\r\n                        yDomain     = newChart.yDomain || yAxis.scale().domain;\r\n                        redraw      = newChart.update;\r\n\r\n                        // scales\r\n                        xScale = xAxis.scale();\r\n                        yScale = yAxis.scale();\r\n\r\n                        // min/max boundaries\r\n                        x_boundary = xAxis.scale().domain().slice();\r\n                        y_boundary = yAxis.scale().domain().slice();\r\n\r\n                        // create d3 zoom handler\r\n                        prevXDomain = x_boundary;\r\n                        prevScale = d3zoom.scale();\r\n                        prevTranslate = d3zoom.translate();\r\n\r\n                        // ensure nice axis\r\n                        xScale.nice();\r\n                        yScale.nice();\r\n                    }\r\n\r\n                    // fix domain\r\n                    function fixDomain(domain, boundary, scale, translate) {\r\n                        if (domain[0] < boundary[0]) {\r\n                            domain[0] = boundary[0];\r\n                            if (prevXDomain[0] !== boundary[0] || scale !== prevScale) {\r\n                                domain[1] += (boundary[0] - domain[0]);\r\n                            } else {\r\n                                domain[1] = prevXDomain[1];\r\n                                translate = _.clone(prevTranslate);\r\n                            }\r\n\r\n                        }\r\n                        if (domain[1] > boundary[1]) {\r\n                            domain[1] = boundary[1];\r\n                            if (prevXDomain[1] !== boundary[1] || scale !== prevScale) {\r\n                                domain[0] -= (domain[1] - boundary[1]);\r\n                            } else {\r\n                                domain[0] = prevXDomain[0];\r\n                                translate = _.clone(prevTranslate);\r\n                            }\r\n                        }\r\n\r\n                        d3zoom.translate(translate);\r\n                        prevXDomain = _.clone(domain);\r\n                        prevScale = _.clone(scale);\r\n                        prevTranslate = _.clone(translate);\r\n                        return domain;\r\n                    }\r\n\r\n                    function updateChart() {\r\n                        d3zoom.scale(1);\r\n                        d3zoom.translate([0,0]);\r\n                        xScale.domain(x_boundary);\r\n                        d3zoom.x(xScale).y(yScale);\r\n                        svg.call(d3zoom);\r\n                    }\r\n\r\n                    // zoom event handler\r\n                    function zoomed() {\r\n                        // Switch off vertical zooming temporary\r\n                        // yDomain(yScale.domain());\r\n\r\n                        if ((<any>d3.event).scale === 1) {\r\n                            unzoomed();\r\n                            updateChart();\r\n                        } else {\r\n                            xDomain(fixDomain(xScale.domain(), x_boundary, (<any>d3.event).scale, (<any>d3.event).translate));\r\n                            redraw();\r\n                        }\r\n\r\n                        updateScroll(xScale.domain(), x_boundary);\r\n                    }\r\n\r\n                    //\r\n                    setZoom = function(which) {\r\n                        var center0 = [svg[0][0].getBBox().width / 2, svg[0][0].getBBox().height / 2];\r\n                        var translate0 = d3zoom.translate(), coordinates0 = coordinates(center0);\r\n\r\n                        if (which === 'in') {\r\n                            if (prevScale < scaleExtent) d3zoom.scale(prevScale + 0.2);\r\n                        } else {\r\n                            if (prevScale > 1) d3zoom.scale(prevScale - 0.2);\r\n                        }\r\n\r\n                        var center1 = point(coordinates0);\r\n                        d3zoom.translate([translate0[0] + center0[0] - center1[0], translate0[1] + center0[1] - center1[1]]);\r\n\r\n                        d3zoom.event(svg);\r\n                    };\r\n\r\n                    function step(which) {\r\n                        var translate = d3zoom.translate();\r\n\r\n                        if (which === 'right') {\r\n                            translate[0] -= 20;\r\n                        } else {\r\n                            translate[0] += 20;\r\n                        }\r\n\r\n                        d3zoom.translate(translate);\r\n                        d3zoom.event(svg);\r\n                    }\r\n\r\n                    function coordinates(point) {\r\n                        var scale = d3zoom.scale(), translate = d3zoom.translate();\r\n                        return [(point[0] - translate[0]) / scale, (point[1] - translate[1]) / scale];\r\n                    }\r\n\r\n                    function point(coordinates) {\r\n                        var scale = d3zoom.scale(), translate = d3zoom.translate();\r\n                        return [coordinates[0] * scale + translate[0], coordinates[1] * scale + translate[1]];\r\n                    }\r\n\r\n                    function keypress() {\r\n                        switch((<any>d3.event).keyCode) {\r\n                            case 39: step('right'); break;\r\n                            case 37: step('left'); break;\r\n                            case 107: setZoom('in'); break;\r\n                            case 109: setZoom('out');\r\n                        }\r\n                    }\r\n\r\n                    // zoom event handler\r\n                    function unzoomed() {\r\n                        xDomain(x_boundary);\r\n                        redraw();\r\n                        d3zoom.scale(1);\r\n                        d3zoom.translate([0,0]);\r\n                        prevScale = 1;\r\n                        prevTranslate = [0,0];\r\n                    }\r\n\r\n                    // initialize wrapper\r\n                    d3zoom.x(xScale)\r\n                        .y(yScale)\r\n                        .scaleExtent([1, scaleExtent])\r\n                        .on('zoom', zoomed);\r\n\r\n                    // add handler\r\n                    svg.call(d3zoom).on('dblclick.zoom', unzoomed);\r\n                    $($element.get(0)).addClass('dynamic');\r\n\r\n                    // add keyboard handlers\r\n                    svg\r\n                        .attr('focusable', false)\r\n                        .style('outline', 'none')\r\n                        .on('keydown', keypress)\r\n                        .on('focus', function () {});\r\n\r\n                    var getXMinMax = function(data) {\r\n                        var maxVal, minVal = null;\r\n\r\n                        for(var i=0;i<data.length;i++) {\r\n                            if (!data[i].disabled) {\r\n                                var tempMinVal = d3.max(data[i].values, function(d: any) { return vm.xFormat ? vm.xFormat(d.x) : d.x;} );\r\n                                var tempMaxVal = d3.min(data[i].values, function(d: any) { return vm.xFormat ? vm.xFormat(d.x) : d.x;} );\r\n                                minVal = (!minVal || tempMinVal < minVal) ? tempMinVal : minVal;\r\n                                maxVal = (!maxVal || tempMaxVal > maxVal) ? tempMaxVal : maxVal;\r\n                            }\r\n                        }\r\n                        return [maxVal, minVal];\r\n                    };\r\n\r\n                    updateZoomOptions = function(data) {\r\n                        yAxis = chart.yAxis;\r\n                        xAxis = chart.xAxis;\r\n\r\n                        xScale = xAxis.scale();\r\n                        yScale = yAxis.scale();\r\n\r\n                        x_boundary = getXMinMax(data);\r\n\r\n                        if (d3zoom.scale() === 1) {\r\n                            d3zoom.x(xScale).y(yScale);\r\n                            svg.call(d3zoom);\r\n                            d3zoom.event(svg);\r\n                        }\r\n\r\n                        updateScroll(xScale.domain(), x_boundary);\r\n                    }\r\n                }\r\n\r\n                /**\r\n                 * Converts palette color name into RGBA color representation.\r\n                 * Should by replaced by palette for charts.\r\n                 *\r\n                 * @param {string} color    Name of color from AM palette\r\n                 * @returns {string} RGBa format\r\n                 */\r\n                function materialColorToRgba(color) {\r\n                    return 'rgba(' + $mdColorPalette[color][500].value[0] + ','\r\n                        + $mdColorPalette[color][500].value[1] + ','\r\n                        + $mdColorPalette[color][500].value[2] + ','\r\n                        + ($mdColorPalette[color][500].value[3] || 1) + ')';\r\n                }\r\n\r\n                /**\r\n                 * Helpful method\r\n                 * @private\r\n                 */\r\n                function generateParameterColor() {\r\n                    if (!vm.data) return;\r\n\r\n                    vm.data.forEach(function (item, index) {\r\n                        item.color = item.color || materialColorToRgba(colors[index]);\r\n                    });\r\n                }\r\n            }\r\n        };\r\n    }\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    /**\r\n     * @ngdoc module\r\n     * @name pipPieCharts\r\n     *\r\n     * @description\r\n     * Line chart on top of Rickshaw charts\r\n     */\r\n    angular.module('pipPieCharts', [])\r\n        .directive('pipPieChart', pipPieChart);\r\n\r\n    function pipPieChart() {\r\n        return {\r\n            restrict: 'E',\r\n            scope: {\r\n                series: '=pipSeries',\r\n                donut: '=pipDonut',\r\n                legend: '=pipShowLegend',\r\n                total: '=pipShowTotal',\r\n                size: '=pipPieSize'\r\n            },\r\n            bindToController: true,\r\n            controllerAs: 'pieChart',\r\n            templateUrl: 'pie/pie_chart.html',\r\n            controller: function ($element, $scope, $timeout, $interval, $mdColorPalette) {\r\n                var vm               = this;\r\n                var chart            = null;\r\n                var titleElem        = null;\r\n                var chartElem        = null;\r\n                var colors           = _.map($mdColorPalette, function (palette, color) {\r\n                    return color;\r\n                });\r\n                var resizeTitleLabel = resizeTitleLabelUnwrap;\r\n\r\n                vm.data = vm.data || [];\r\n\r\n                vm.showLegend = function () {\r\n                    return vm.legend !== undefined ? vm.legend: true;\r\n                };\r\n\r\n                if (vm.series && vm.series.length > colors.length) {\r\n                    vm.data = vm.series.slice(0, 9);\r\n                }\r\n\r\n                $scope.$watch('pieChart.series', function (newVal) {\r\n                    vm.data = newVal;\r\n\r\n                    generateParameterColor();\r\n\r\n                    if (chart) {\r\n                        chartElem.datum(vm.data).call(chart);\r\n                        $timeout(resizeTitleLabel);\r\n                        drawEmptyState(d3.select($element.get(0)).select('.pie-chart svg')[0][0]);\r\n                    }\r\n                }, true);\r\n\r\n                // Sets colors of items\r\n                generateParameterColor();\r\n\r\n                (<any>d3.scale).paletteColors = function () {\r\n                    return d3.scale.ordinal().range(colors.map(materialColorToRgba));\r\n                };\r\n\r\n                /**\r\n                 * Instantiate chart\r\n                 */\r\n                nv.addGraph(() => {\r\n                    chart = nv.models.pieChart()\r\n                        .margin({ top: 0, right: 0, bottom: 0, left: 0 })\r\n                        .x(function (d) {\r\n                            return vm.donut ? d.value : null;\r\n                        })\r\n                        .y(function (d) {\r\n                            return d.value;\r\n                        })\r\n                        .height(vm.size || 250)\r\n                        .width(vm.size || 250)\r\n                        .showLabels(true)\r\n                        .labelThreshold(.001)\r\n                        .growOnHover(false)\r\n                        .donut(vm.donut)\r\n                        .donutRatio(0.5)\r\n                        .color(function(d) {\r\n                            return d.color || (<any>d3.scale).paletteColors().range();\r\n                        });\r\n\r\n                    chart.tooltip.enabled(false);\r\n                    chart.noData('There is no data right now...');\r\n                    chart.showLegend(false);\r\n\r\n                    chartElem = d3.select($element.get(0))\r\n                        .select('.pie-chart')\r\n                        .style('height', (vm.size || 250) + 'px')\r\n                        .style('width', (vm.size || 250) + 'px')\r\n                        .select('svg')\r\n                        .style('opacity', 0)\r\n                        .datum(vm.data || [])\r\n                        .call(chart);\r\n\r\n                    nv.utils.windowResize(function () {\r\n                        chart.update();\r\n                        $timeout(resizeTitleLabel);\r\n                        drawEmptyState(d3.select($element.get(0)).select('.pie-chart svg')[0][0]);\r\n                    });\r\n\r\n                    return chart;\r\n                }, () => {\r\n                    $timeout(function () {\r\n                        var svgElem  = d3.select($element.get(0)).select('.pie-chart svg')[0][0];\r\n                        renderTotalLabel(svgElem);\r\n                        d3.select(svgElem)\r\n                            .transition()\r\n                            .duration(1000)\r\n                            .style('opacity', 1);\r\n                        \r\n                        $timeout(resizeTitleLabelUnwrap, 800);\r\n                        drawEmptyState(svgElem);\r\n                    });\r\n                });\r\n\r\n                function drawEmptyState(svg) {\r\n                    if (!$element.find('text.nv-noData').get(0)) {\r\n                        d3.select($element.find('.empty-state')[0]).remove();\r\n                        $element.find('.pip-empty-pie-text').remove();\r\n                    } else {\r\n                    \r\n                        if ($element.find('.pip-empty-pie-text').length === 0) { \r\n                            $element.find('.pie-chart')\r\n                                .append(\"<div class='pip-empty-pie-text'>There is no data right now...</div>\");\r\n                        }\r\n\r\n                        var pie = d3.layout.pie().sort(null),\r\n                            size = Number(vm.size || 250);\r\n\r\n                        var arc = d3.svg.arc()\r\n                            .innerRadius(size / 2 - 20)\r\n                            .outerRadius(size / 2 - 57);\r\n                    \r\n                        svg = d3.select(svg)\r\n                            .append(\"g\")\r\n                            .classed('empty-state', true)\r\n                            .attr('transform', \"translate(\" + size / 2 + \",\" + size / 2 + \")\");\r\n                    \r\n                        var path = svg.selectAll(\"path\")\r\n                            .data(pie([1]))\r\n                            .enter().append(\"path\")\r\n                            .attr(\"fill\", \"rgba(0, 0, 0, 0.08)\")\r\n                            .attr(\"d\", <any>arc);\r\n                    }\r\n                }\r\n\r\n                function renderTotalLabel(svgElem) {\r\n                    if ((!vm.total && !vm.donut) || !vm.data) return;\r\n\r\n                    var totalVal = vm.data.reduce(function (sum, curr) {\r\n                        return sum + curr.value;\r\n                    }, 0);\r\n\r\n                    if (totalVal >= 10000) totalVal = (totalVal / 1000).toFixed(1) + 'k';\r\n                    \r\n                    d3.select(svgElem)\r\n                        .select('.nv-pie:not(.nvd3)')\r\n                        .append('text')\r\n                        .classed('label-total', true)\r\n                        .attr('text-anchor', 'middle')\r\n                        .style('dominant-baseline', 'central')\r\n                        .text(totalVal);\r\n\r\n                    titleElem = d3.select($element.find('text.label-total').get(0)).style('opacity', 0);\r\n                }\r\n\r\n                function resizeTitleLabelUnwrap() {\r\n                    if ((!vm.total && !vm.donut) || !vm.data) return;\r\n\r\n                    var boxSize =  $element.find('.nvd3.nv-pieChart').get(0).getBBox();\r\n\r\n                    if (!boxSize.width || !boxSize.height) {\r\n                        return;\r\n                    }\r\n\r\n                    titleElem.style('font-size', ~~boxSize.width / 4.5).style('opacity', 1);\r\n                }\r\n\r\n                /**\r\n                 * Converts palette color name into RGBA color representation.\r\n                 * Should by replaced by palette for charts.\r\n                 *\r\n                 * @param {string} color    Name of color from AM palette\r\n                 * @returns {string} RGBa format\r\n                 */\r\n                function materialColorToRgba(color) {\r\n                    return 'rgba(' + $mdColorPalette[color][500].value[0] + ','\r\n                        + $mdColorPalette[color][500].value[1] + ','\r\n                        + $mdColorPalette[color][500].value[2] + ','\r\n                        + ($mdColorPalette[color][500].value[3] || 1) + ')';\r\n                }\r\n\r\n\r\n                /**\r\n                 * Helpful method\r\n                 * @private\r\n                 */\r\n                function generateParameterColor() {\r\n                    if (!vm.data) return;\r\n\r\n                    vm.data.forEach(function (item, index) {\r\n                        item.color = item.color || materialColorToRgba(colors[index]);\r\n                    });\r\n                }\r\n            }\r\n        };\r\n    }\r\n})();","(function(module) {\ntry {\n  module = angular.module('pipCharts.Templates');\n} catch (e) {\n  module = angular.module('pipCharts.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('bar/bar_chart.html',\n    '<div class=\"bar-chart\"><svg></svg></div><pip-chart-legend pip-series=\"barChart.legend\" pip-interactive=\"barChart.interactiveLegend\"></pip-chart-legend>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipCharts.Templates');\n} catch (e) {\n  module = angular.module('pipCharts.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('line/line_chart.html',\n    '<div class=\"line-chart\" flex=\"auto\" layout=\"column\"><svg class=\"flex-auto\" ng-class=\"{\\'visible-x-axis\\': lineChart.isVisibleX(), \\'visible-y-axis\\': lineChart.isVisibleY()}\"></svg><div class=\"scroll-container\"><div class=\"visual-scroll\"><div class=\"scrolled-block\"></div></div></div><md-button class=\"md-fab md-mini minus-button\" ng-click=\"lineChart.zoomOut()\"><md-icon md-svg-icon=\"icons:minus-circle\"></md-icon></md-button><md-button class=\"md-fab md-mini plus-button\" ng-click=\"lineChart.zoomIn()\"><md-icon md-svg-icon=\"icons:plus-circle\"></md-icon></md-button></div><pip-chart-legend pip-series=\"lineChart.legend\" pip-interactive=\"lineChart.interactiveLegend\"></pip-chart-legend>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipCharts.Templates');\n} catch (e) {\n  module = angular.module('pipCharts.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('legend/interactive_legend.html',\n    '<div><div class=\"chart-legend-item\" ng-repeat=\"item in series\" ng-show=\"item.values || item.value\"><md-checkbox class=\"lp16 m8\" ng-model=\"item.disabled\" ng-true-value=\"false\" ng-false-value=\"true\" ng-if=\"interactive\" aria-label=\"{{ item.label }}\"><p class=\"legend-item-value\" ng-if=\"item.value\" ng-style=\"{\\'background-color\\': item.color}\">{{ item.value }}</p><p class=\"legend-item-label\">{{:: item.label || item.key }}</p></md-checkbox><div ng-if=\"!interactive\"><span class=\"bullet\" ng-style=\"{\\'background-color\\': item.color}\"></span> <span>{{:: item.label || item.key}}</span></div></div></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipCharts.Templates');\n} catch (e) {\n  module = angular.module('pipCharts.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('pie/pie_chart.html',\n    '<div class=\"pie-chart\" ng-class=\"{\\'circle\\': !pieChart.donut}\"><svg class=\"flex-auto\"></svg></div><pip-chart-legend pip-series=\"pieChart.data\" pip-interactive=\"false\" ng-if=\"pieChart.showLegend()\"></pip-chart-legend>');\n}]);\n})();\n\n//# sourceMappingURL=pip-webui-charts-html.min.js.map\n"]}