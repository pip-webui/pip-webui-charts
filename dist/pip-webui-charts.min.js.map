{"version":3,"sources":["../node_modules/browser-pack/_prelude.js","src/bar_chart/BarChart.ts","src/chart_colors/ChartColorsService.ts","src/chart_legend/ChartInteractiveLegend.ts","src/index.ts","src/line_chart/LineChart.ts","src/pie_chart/PieChart.ts","temp/pip-webui-charts-html.min.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","pip","charts","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","BarChartBindings","series","xTickFormat","yTickFormat","interactiveLegend","BarChartController","BarChartBindingsChanges","$element","$scope","$timeout","pipChartColors","_this","chart","height","colors","generateMaterialColors","$watch","updatedLegend","data","prepareData","legend","updateChart","$inject","prototype","$onInit","_","clone","generateParameterColor","paletteColors","d3","scale","ordinal","range","map","color","materialColorToRgba","instantiateChart","$onChanges","changes","currentValue","previousValue","chartElem","datum","configBarWidthAndLabel","drawEmptyState","nv","models","discreteBarChart","margin","top","right","bottom","left","x","d","label","key","y","value","showValues","staggerLabels","showXAxis","showYAxis","valueFormat","format","duration","tooltip","enabled","noData","yAxis","tickFormat","xAxis","select","get","style","windowResize","update","result","seria","disabled","values","push","cloneDeep","find","remove","append","classed","width","innerWidth","attr","timeout","labels","chartBars","getBBox","item","index","barHeight","Number","barWidth","element","transform","translate","transition","getMaterialColor","BarChart","bindings","templateUrl","controller","component","Object","defineProperty","ChartColorsService","$mdColorPalette","palette","filter","isObject","isArray","ChartLegendBindings","interactive","ChartLegendBindingsChanges","ChartLegendController","updateLegends","colorCheckboxes","animate","prepareSeries","checkboxContainers","css","legendTitles","$","addClass","materialColor","ChartLegend","angular","5","6","LineChartBindings","xFormat","xTickValues","dynamic","fixedHeight","dynamicHeight","minHeight","maxHeight","LineChartBindingsChanges","LineChartController","HEIGHT","setZoom","updateZoomOptions","$on","selectAll","updateXTickValues","updateSeries","each","getHeight","Math","min","max","parent","innerHeight","zoomIn","zoomOut","lineChart","undefined","useInteractiveGuideline","showLegend","tickValues","on","tooltipW","bodyWidth","originalEvent","removeTooltip","addZoom","onResize","containerHeight","containerWidth","updateScroll","domains","boundary","bDiff","domDiff","isEqual","svg","scaleExtent","xDomain","yDomain","redraw","xScale","yScale","x_boundary","y_boundary","d3zoom","behavior","zoom","prevXDomain","prevScale","prevTranslate","setData","newChart","domain","slice","nice","zoomed","event","unzoomed","fixDomain","which","translate0","coordinates0","coordinates","center0","center1","point","step","keyCode","keypress","LineChart","7","PieChartBindings","donut","total","size","centered","PieChartBindingsChanges","PieChartController","resizeTitleLabelUnwrap","pieChart","showLabels","labelThreshold","growOnHover","donutRatio","centerChart","renderTotalLabel","svgElem","layout","pie","sort","arc","innerRadius","outerRadius","enter","leftMargin","totalVal","reduce","sum","curr","toFixed","text","titleElem","boxSize","PieChart","8","run","$templateCache","put"],"mappings":"CAAA,SAAAA,GAAA,GAAA,gBAAAC,UAAA,mBAAAC,QAAAA,OAAAD,QAAAD,QAAA,IAAA,kBAAAG,SAAAA,OAAAC,IAAAD,UAAAH,OAAA,CAAA,GAAAK,EAAAA,GAAA,mBAAAC,QAAAA,OAAA,mBAAAC,QAAAA,OAAA,mBAAAC,MAAAA,KAAAC,MAAAJ,EAAAK,MAAAL,EAAAK,SAAAC,OAAAX,MAAA,WAAA,MAAA,SAAAY,GAAAC,EAAAC,EAAAC,GAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,GAAAE,GAAA,kBAAAC,UAAAA,OAAA,KAAAF,GAAAC,EAAA,MAAAA,GAAAF,GAAA,EAAA,IAAAI,EAAA,MAAAA,GAAAJ,GAAA,EAAA,IAAAjB,GAAA,GAAAsB,OAAA,uBAAAL,EAAA,IAAA,MAAAjB,GAAAuB,KAAA,mBAAAvB,EAAA,GAAAwB,GAAAV,EAAAG,IAAAhB,WAAAY,GAAAI,GAAA,GAAAQ,KAAAD,EAAAvB,QAAA,SAAAW,GAAA,GAAAE,GAAAD,EAAAI,GAAA,GAAAL,EAAA,OAAAI,GAAAF,EAAAA,EAAAF,IAAAY,EAAAA,EAAAvB,QAAAW,EAAAC,EAAAC,EAAAC,GAAA,MAAAD,GAAAG,GAAAhB,QAAA,IAAA,GAAAoB,GAAA,kBAAAD,UAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAW,OAAAT,IAAAD,EAAAD,EAAAE,GAAA,OAAAD,KAAAW,GAAA,SAAAP,EAAAlB,EAAAD,gECYI,IAAM2B,IACFC,OAAQ,aACRC,YAAa,mBACbC,YAAa,mBACbC,kBAAmB,oBAYvBC,GATA,WAAA,QAAAC,MAOA,MAAAA,MAEA,mBAmBQD,GAAWE,EAAAC,EAAAC,EAAAC,GANf,UACY,IAAAC,GAAA9B,IACAA,MAAA0B,SAAAA,EACA1B,KAAA2B,OAAQA,EACR3B,KAAA4B,SAAAA,EATJ5B,KAAA6B,eAAkCA,EAGlC7B,KAAA+B,MAAM,KAUV/B,KAAKgC,OAAS,IACdhC,KAAAiC,OAAcjC,KAAA6B,eAAgBK,2BACvBC,OAAE,eAAc,SAAAC,GAACA,IAGpBN,EAAKO,KAAMP,EAAGQ,YAAcF,GAE5BN,EAAKS,OAAAH,EACNN,EAAMU,iBACZ,GA9BL,MAaIhB,GAAAiB,SACY,WACA,SACA,WACA,oBAeZC,UAWCC,QAAA,WAVG,GAAIb,GAAQ9B,IACZA,MAAKqC,KAAMrC,KAAKsC,YAAWtC,KAAOoB,QAClCpB,KAAKuC,OAAAK,EAAAC,MAAA7C,KAAsBoB,QACjBpB,KAAG8C,kCACTC,cAAgB,iBACZC,IAAMC,MAAKC,UAACC,MAAerB,EAAAG,OAAAmB,IAAA,SAA2BC,GACtD,MAAAvB,GAAAD,eAAAyB,oBAAAD,OAIXrD,KAAAuD,sBAGQb,UAAcc,WAAmB,SAAUC,GAChDzD,KAAKqB,YAAcoC,EAAQpC,YAAcoC,EAAQpC,YAAYqC,aAAe,KAC5E1D,KAAKsB,YAAAmC,EAAoBnC,YAAQmC,EAAAnC,YAA4BoC,aAAA,KAE7D1D,KAAIuB,kBAAkBkC,EAAQlC,kBAAmBkC,EAAYlC,kBAAQmC,aAAgB,KACjFD,EAAKrC,QAASqC,EAAQrC,OAAOsC,eAAaD,EAAArC,OAAAuC,gBAC1C3D,KAAKoB,OAAOqC,EAAKrC,OAAYsC,aAC7B1D,KAAKqC,KAAMrC,KAAKsC,YAAWtC,KAAOoB,QAClCpB,KAAKuC,OAAAK,EAAAC,MAAA7C,KAAsBoB,QAC3BpB,KAAK8C,yBACR9C,KAAAwC,kBAIcE,UAAEF,YAAA,WACbxC,KAAK+B,QACL/B,KAAK4D,UAAAC,MAAA7D,KAAAqC,MAAyBrB,KAAAhB,KAAA+B,OAC9B/B,KAAK8D,yBACR9D,KAAA+D,qBAGLrB,UA0DCa,iBAAA,WAzDG,GAAGzB,GAAS9B,iBACH,WAkDN,SAjDM+B,MAAOiC,GAAAC,OAAAC,mBACJC,QACAC,IAAK,GACLC,MAAM,EACNC,OAAQ,GACVC,KAAA,KAEEC,EAAA,SAASC,GACX,MAAAA,GAAAC,OAAAD,EAAAE,KAAAF,EAAAD,IAEEI,EAAA,SAASH,GACX,MAAAA,GAAAI,QAEDC,YAAA,GACAC,eAAc,GACdC,WAAU,GACVC,WAAA,GACAC,YAAWlC,GAAAmC,OAAA,MACXC,SAAO,GACPpD,OAAMF,EAAAE,QACHqB,MAAO,SAASoB,GACjB,MAAA3C,GAAAO,KAAAoC,EAAArD,QAAAiC,OAAAvB,EAAAD,eAAAyB,oBAAAxB,EAAAG,OAAAwC,EAAArD,WAGPU,EAAKC,MAAMsD,QAAOC,SAAA,GAElBxD,EAAKC,MAAMwD,OAAK,mCACXxD,MAAAyD,MACGC,WAAW,SAAChB,GACb,MAAA3C,GAAAR,YAAAQ,EAAAR,YAAAmD,GAAAA,MAGF1C,MAAA2D,MACGD,WAAW,SAAChB,GACb,MAAA3C,GAAAT,YAAAS,EAAAT,YAAAoD,GAAAA,MAGFb,UAAOZ,GAAA2C,OAAgB7D,EAACJ,SAAAkE,IAAA,IACxBD,OAAM,kBACN9B,MAAM/B,EAAAO,MACNwD,MAAK,SAAU,SAEjB7E,KAAMc,EAAAC,gBACD+D,aAAa,WACjBhE,EAAKC,MAAAgE,SACLjE,EAAKgC,uBAAiB,GACvBhC,EAAAiC,mBAGJjC,EAAAC,oBAEKH,SAAK,WACLE,EAAEgC,0BACN,GACDhC,EAAAiC,sBAIcrB,UAACJ,YAAA,SAAAD,GAClB,GAAE2D,KAIL,eAHU3D,EAAE,SAAc4D,IAAkBA,EAAOC,UAAYD,EAAAE,QACzDH,EAAAI,KAAAH,KAENrD,EAAAyD,UAAAL,MAGYtD,UAAcqB,eAAc,cACW,IAA5C/D,KAAG0B,SAAW4E,KAAC,cAAcrF,OAChC+B,GAAA2C,OAAA3F,KAAA0B,SAAA4E,KAAA,gBAAA,IAAAC,aACG,CAIA,GAAE3G,GAAMI,KAAK4D,UAAA4C,OAAA,KAAAC,QAAA,eAAA,GAAAC,EAAA1G,KAAA0B,SAAA4E,KAAA,aAAAK,aAAAxC,EAAA,GAAAuC,WACR,KACAb,MAAM,OAAQ,uBACdW,OAAK,QACLI,KAAK,SAAS5G,KAAIgC,OAAA,IAErB4E,KAAO,QAAI,aACJ,KACJA,KAAK,YAAS,qBACdf,MAAM,OAAQ,uBACdW,OAAK,QACLI,KAAK,SAAS,KAEjBA,KAAO,QAAI,aACJ,KACJA,KAAK,YAAS,sBACdf,MAAM,OAAQ,uBACdW,OAAK,QACLI,KAAK,SAAS,KAEjBA,KAAK,QAAW,IACrBhH,EAAAgH,KAAA,YAAA,cAAA,GAAAzC,GAAA,gBAAAuC,EAAA,EAAAvC,GAAA,IAAA,YAGLzB,UA4BCoB,uBAAA,SAAA+C,GA5B8B,GAAA/E,GAAA9B,IACZ,UAAT6G,IAAsBA,EAAM,IAIlC,IAAGC,GAAO9G,KAAK0B,SAAS4E,KAAK,gBAAkBS,EAAQ/G,KAAW0B,SAAM4E,KAAA,UAAAtG,MAAA0B,SAAA4E,KAAA,aAAA,GAAAU,UAAAhF,MAExEgB,IAAE2C,OAAK3F,KAAA0B,SAAW4E,KAAC,cAAgC,IAAAG,QAAA,WAAA,UAC/CM,EAAe,SAAUE,EAAGC,GAM5B,GAAAC,GAAOC,OAAApE,GAAA2C,OAAAsB,GAAAtB,OAAA,QAAAiB,KAAA,WAAAS,EAAAD,OAAApE,GAAA2C,OAAAsB,GAAAtB,OAAA,QAAAiB,KAAA,UAAAU,EAAAtE,GAAA2C,OAAAsB,GAAAzC,EAAAxB,GAAAuE,UAAAD,EAAAV,KAAA,cAAAY,UAAA,GAAA5C,EAAA5B,GAAAuE,UAAAD,EAAAV,KAAA,cAAAY,UAAA,KAEFZ,KAAA,YAAe,aAAkBQ,OAAA5C,EAAA0C,GAAAG,EAAA,KAAA,MAAAvF,EAAAE,OAAA,IAAA,KAEtC2D,OAAO,QAAAiB,KAAA,SAAA,KAEFa,aACArC,SAAKyB,GACLD,KAAA,YAAe,aAAeQ,OAAU5C,EAAC0C,GAAAG,EAAA,KAAA,KAAAzC,EAAA,KAE3Ce,OAAO,QAAOiB,KAAO,SAAAO,aACdL,EAAMI,IACXN,KAAK,KAAKO,EAAa,EAAC,IAC9BP,KAAA,IAAAS,EAAA,QAGP3E,UASCI,uBAAA,WARG,GAAIhB,GAAM9B,IAAMA,MAAMqC,aAGfrC,KAAKqC,KAAC,SAAY4E,EAAAC,GACjBD,EAAKd,OAAO,KACZc,EAAKd,OAAK,GAAG9C,MAAK4D,EAAUd,OAAM,GAAA9C,OAAAvB,EAAAD,eAAA6F,iBAAAR,EAAApF,EAAAG,QACrCgF,EAAA5D,MAAA4D,EAAAd,OAAA,GAAA9C,UAIZ7B,MAGGmG,GACAC,SAAAzG,EACA0G,YAAY,0BACfC,WAAAtG,WAII/B,OAAA,mBACRsI,UAAA,cAAAJ,uCCrPDK,QAACC,eAAAzI,EAAA,cAAAqF,OAAA,OAEOqD,GAAA,mBACYA,GAAAC,GAGX,UAEMnI,MAAAmI,gBAAAA,EA6BX,SAhCmB1F,SAAA,qBAIkCC,UAACgF,iBAAA,SAAAR,EAAAjF,GAE9C,OAAIA,GAASA,EAAOhB,OAAS,EACpB,MACRiG,GAAAjF,EAAAhB,SAEDiG,EAAY,GAGTlH,KAAAsD,oBAAArB,EAAAiF,QAEMxE,UAAgBY,oBAAoB,SAAMD,SAC/C,QAAKrD,KAAAmI,gBAA4B9E,GAAQ,KAAGwB,MAAG,GAAA,IAC/C7E,KAAKmI,gBAAgB9E,GAAO,KAAKwB,MAAM,GAAG,IACjD7E,KAAAmI,gBAAA9E,GAAA,KAAAwB,MAAA,GAAA,KAEM7E,KAAAmI,gBAAA9E,GAAA,KAAAwB,MAAA,IAAP,GAAA,OACmBnC,UAAeR,uBAAkB,cAC5CJ,GAAO9B,KACRiC,EAAAW,EAAAQ,IAAApD,KAAAmI,gBAAA,SAAAC,EAAA/E,GACH,MAAWA,IAMnB,OAJQpB,GAAGW,EAAAyF,OAAApG,EAAA,SAAAoB,GAEH,MAAOT,GAAM0F,SAACxG,EAAAqG,gBAAA9E,KAAAT,EAAA0F,SAAAxG,EAAAqG,gBAAA9E,GAAA,OAAAT,EAAA2F,QAAAzG,EAAAqG,gBAAA9E,GAAA,KAAAwB,UAIfqD,aAGVzI,OAAA,+JCxCD,oBAQIwI,eAAMzI,EAA4C,cAAAqF,OAAA,OAE9C2D,IACHpH,OAAA,aAEDqH,YAAA,sBAKC,WAAD,QAAAC,MAEA,MAAAA,MAYmB,mBAJHC,GAAiBjH,EAAAC,EAAAC,EAAAC,GACjB,UACA7B,MAAA0B,SAAAA,EAGR1B,KAAK2B,OAASA,EACjB3B,KAAA4B,SAAAA,EAEM5B,KAAA6B,eAAAA,EACH7B,KAAKiC,OAAAjC,KAAa6B,eAAGK,yBA+DzB,SAzEYO,SAAgB,WAAA,SAAA,WAAA,kBAarBkG,EAAAjG,UAAAC,QAAU,WAAjB3C,KAAA4I,mBAEsBlG,UAAQc,WAAO,SAAaC,MAC1C3B,GAAK9B,IACRyD,GAAArC,QAAAqC,EAAArC,OAAAsC,eAAAD,EAAArC,OAAAuC,gBAEG3D,KAAAoB,OAAQqC,EAAWrC,OAAIsC,aACvB1D,KAAK4I,mBAEGH,aAAUhF,EAAAgF,YAAA/E,eAAAD,EAAAgF,YAAA9E,iCACLF,EAAAgF,YAAkB/E,aAC3B1D,KAAKyI,eAAC,GACTzI,KAAA4B,SAAA,WACJE,EAAA+G,mBACJ,OAImBnG,UAAGkG,cAAA,cACf9G,GAAK9B,IACTA,MAAK4B,SAAC,WACFE,EAACgH,UACRhH,EAAA+G,mBAEO,GAAR7I,KAAA+I,mBAGWrG,UAAoBmG,gBAAoB,cAC3C/G,GAAI9B,OACMA,KAAA0B,SAAA4E,KAAA,oCACT0C,EAAA,SAAA/B,EAAAC,GACCA,GAAKpF,EAAAV,OAAAH,aAIRgI,IAAA,QAAAnH,EAAAV,OAAA8F,GAAA7D,OAAAvB,EAAAG,OAAAiF,IACNZ,KAAA,YAEO2C,IAAA,mBAAAnH,EAARV,OAAA8F,GAAA7D,OAAAvB,EAAAG,OAAAiF,SAGWxE,UAAcoG,QAAoB,cACrChH,GAAK9B,OACOA,KAAQ0B,SAAC4E,KAAW,6BAC7B4C,EAAa,SAAAjC,EAAAC,GACjBpF,EAAAF,SAAA,WACNuH,EAAAlC,GAAAmC,SAAA,YAEO,IAAAlC,QACqBxE,UAAAqG,cAAA,WAEzB,GAAEjH,GAAU9B,IACRA,MAAMoB,eAENpB,KAAKoB,OAAW,SAAK6F,EAAQC,GAC9B,GAAAmC,GAAAvH,EAAAD,eAAA6F,iBAAAR,EAAApF,EAAAG,OACNgF,GAAA5D,MAAA4D,EAAA5D,QAAA4D,EAAAd,QAAAc,EAAAd,OAAA,IAAAc,EAAAd,OAAA,GAAA9C,MAAA4D,EAAAd,OAAA,GAAA9C,MAAAgG,GACLpC,EAAAf,SAAAe,EAACf,WAAA,KAGGyC,MAEAW,GACH1B,SAAAY,EAEDX,YAAO,sDACKc,EAEfY,yEC5GGC,GAAA,SAAA7I,EAAelB,EAAAD,WACfC,OAAA,aACA,eACA,gBACA,eACD,gECLFgK,GAAA,SAAA9I,EAAAlB,EAAAD,sCAoBeA,EAAY,cAAAqF,OAAA,OAEpB6E,IACAtI,OAAO,aACP6D,UAAW,aACXD,UAAW,aACX2E,QAAA,eACAtI,YAAS,mBACTC,YAAa,mBACbsI,YAAa,mBACbC,QAAS,eACTC,YAAW,qBACXC,cAAA,qBACHC,UAAA,iBAEDC,UAAA,iBAAA1I,kBAAA,uBAiBA,WAjBA,QAiBC2I,MA2BG,MAAAA,MAsBC,mBApBWC,GAAiBzI,EAAAC,EAAAC,EAAAC,GACjB,UACA,IAAAC,GAAA9B,IA5BJA,MAAA0B,SAASA,EACT1B,KAAA2B,OAAsBA,EACtB3B,KAAA4B,SAASA,EACT5B,KAAA6B,eAAyBA,EACzB7B,KAAAoK,OAAA,IAGDpK,KAAA+B,MAAA,KACA/B,KAAA4D,UAAA,KACA5D,KAAAqK,QAAS,KACTrK,KAAAsK,kBAAyB,KAEzBtK,KAAA8J,YAAqB9J,KAAKoK,OAC1BpK,KAAA+J,eAAyB,EAKzB/J,KAAAgK,UAAmBhK,KAAMoK,OACzBpK,KAAAiK,UAAAjK,KAAiBoK,OAapBpK,KAAKiF,WAAS,EAEdjF,KAAAgF,WAAc,OACV6E,SAAS,OACTtI,mBAAc,OAEdU,OAAKjC,KAAA6B,eAAcK,yBACvBP,EAAOQ,OAAE,eAAA,SAAAC,GAETN,EAAUO,KAACP,EAAYQ,YAAAF,GACnBN,EAAAS,OAASH,IACHI,mBAEVb,EAAG4I,IAAA,WAAA,WACN3I,EAAA,WAEMoB,GAAAwH,UAAA,cAAO3E,MAAd,UAAA,IAAA,OA2eA,SAlgBYpD,SAAgB,WAAA,SAAA,WAAA,oBA0BnBC,UAAkBC,QAAA,WAEvB,GAAIb,GAAC9B,IAEKA,MAAGqC,KAAOrC,KAAAsC,YAAgBtC,KAAAoB,iBAChCmB,OAAUK,EAAAC,MAAM7C,KAAOoB,kCAEtB0B,yBACLE,GAAEC,MAAAF,cAAA,WAEE,MAACC,IAAAC,MAAAC,UAAmBC,MAAArB,EAAAG,OAAAmB,IAAA,SAAAC,GAC3B,MAAAvB,GAAAD,eAAAyB,oBAAAD,OAIGrD,KAAKuD,sBAEAb,UAAgBc,WAAQ,SAAgBC,GAE7CzD,KAAK8J,YAAYrG,EAAQqG,YAAYrG,EAAQqG,YAAUpG,aAAoB1D,KAAAoK,OAC3EpK,KAAKgK,UAAYvG,EAAQuG,UAAYvG,EAAQuG,UAAUtG,aAAe1D,KAAKoK,OAC3EpK,KAAKiK,UAAUxG,EAAQwG,UAAUxG,EAAQwG,UAAQvG,aAAqB1D,KAAAoK,OACtEpK,KAAK+J,gBAAAtG,EAAoBsG,eAAQtG,EAAoBsG,cAAQrG,aAE7D1D,KAAKgF,WAAUvB,EAAQuB,WAAUvB,EAAQuB,UAAQtB,aACjD1D,KAAKiF,WAAWxB,EAAGwB,WAAQxB,EAAcwB,UAAQvB,aACjD1D,KAAK6J,UAAApG,EAAcoG,SAAQpG,EAAcoG,QAAQnG,aAEjD1D,KAAIuB,oBAAmBkC,EAAIlC,mBAAoBkC,EAAYlC,kBAAamC,kBACpEiG,QAAKlG,EAAckG,QAAQlG,EAAAkG,QAAYjG,aAAa,UACpDrC,YAAKoC,EAAiBpC,YAAGoC,EAAApC,YAAAqC,aAAA,KAC7B1D,KAACsB,YAAAmC,EAAAnC,YAAAmC,EAAAnC,YAAAoC,aAAA,KAEGD,EAAQmG,aAAUnG,EAAQmG,YAAOlG,eAAyBD,EAAOmG,YAAejG,gBAChF3D,KAAK4J,YAAcnG,EAACmG,YAAAlG,aACvB1D,KAAAyK,qBAGGhH,EAAArC,QAAAqC,EAAArC,OAAWsC,eAAKD,EAAArC,OAAAuC,eACd3D,KAAA0K,kBAE0ChI,UAAWJ,YAAC,SAAAD,GAC5D,GAAG2D,KAaN,OAXGpD,GAAA+H,KAAOtI,EAAE,SAAU4D,IACtBA,EAAAC,UAAAD,EAAAE,QAEOH,EAAAI,KAAAH,KAQPrD,EAAAyD,UAAAL,IAEMmE,EAAAzH,UAAAkI,UAAP,WACI,MAAI5K,MAAK+J,cAAUc,KAAAC,IAAAD,KAAAE,IAAA/K,KAAAgK,UAAAhK,KAAA0B,SAAAsJ,SAAAC,eAAAjL,KAAAiK,WAAAjK,KAAA8J,aAGvBK,EAACzH,UAAAwI,OAAA,WAAClL,KAAAqK,SAEKrK,KAAAqK,QAAA,OAIPF,EAACzH,UAAAyI,QAAA,WAACnL,KAAAqK,SAEMrK,KAAAqK,QAAA,UAGY3H,UAAAa,iBAAA,iBACDvD,iBACH,WAiFf,SAhFe+B,MAAUiC,GAAAC,OAAAmH,YACVjH,QACFC,IAAA,SACC,GACCE,OAAQ,GACVC,KAAA,KAEEC,EAAA,SAASC,GACX,MAAA4G,UAAA5G,GAAA4G,SAAA5G,EAAAD,EAAA1C,EAAA6H,QAAA7H,EAAA6H,QAAAlF,EAAAD,GAAAC,EAAAD,EAAAC,IAEDG,EAAA,SAAAH,SACU4G,UAAV5G,GAAe4G,SAAA5G,EAAAI,MAAAJ,EAAAI,MAAAJ,IAEfzC,OAAAF,EAAW8I,YAAM,IACjBU,yBAAQ,GACLtG,WAAS,GACVC,WAAA,GAEHsG,YAAO,GACPlI,MAAM,SAAQoB,GAElB,MAAUA,GAACpB,OAAKL,GAAAC,MAAAF,gBAAAI,YAERpB,MAAOsD,QAAKC,SAAW,GAC3BxD,EAAGC,MAAAwD,OAAA,iCAEPzD,EAAKC,MAAMyD,MACNC,WAAW,SAAChB,GACT,MAAO3C,GAAKR,YAAcQ,EAAKR,YAAYmD,GAAKA,MAEnD1C,MAAA2D,MACGD,WAAS,SAAKhB,GAEtB,MAAK3C,GAAST,YAAaS,EAAKT,YAAeoD,GAAEA,IAG/C+G,WAAA1J,EAAmB8H,aAAGhH,EAAA2F,QAAsBzG,EAAE8H,cAAE9H,EAAA8H,YAAA3I,OAAA,EAC9C+B,GAAAG,MAAKrB,EAAS8H,YAAA,GAAA9H,EAAA8H,YAAA,GAAA9H,EAAA8H,YAAA,IAAA,kBACJ5G,GAAO2C,OAAK7D,EAAAJ,SACdkE,IAAQ,IAAGD,OAAQ,+BAKf9B,MAAI/B,EAAAO,UAAawD,MAAY,SAAA/D,EAAA8I,YAAA,GAAA,MAAA5J,KAAAc,EAAAC,4BAC5B0J,GAAA,uBAA6B,SAAYtL,cACvC,WACX,GAAAkF,GAAY8D,EAAA,cAAWuC,EAAArG,EAAAsB,aAAAgF,EAAAxC,EAAA,QAAAxC,aAAAnC,EAAArE,EAAAyL,cAAA,QAAA,GAAA,MAAAhH,EAAAzE,EAAAyL,cAAA,QAAA,GAAA,KACvBvG,GAAQ4D,IAAI,YAAU,cACvBzE,EAAAkH,GAAAC,EAAAnH,EAAAkH,EAAAlH,GAAA,IACJI,EAAA,KAEDS,EAAA4D,IAAkB,OAAI,GACd5D,EAAA4D,IAAA,MAAgB,4BAINwC,GAAA,sBAAA,SAAAtL,GAEhB,GAAA0L,GAAc,WACV1C,EAAA,cAAgBF,IAAA,UAAA,GAErB4C,KAEC/J,EAAKF,SAAS,WACdiK,KACH,OAGG/J,EAAK+H,SACN/H,EAAAgK,QAAAhK,EAAAC,MAAAD,EAAA8B,oBAGKkC,aAAY,WACjBhE,EAAAiK,aAGJjK,EAAAH,OAAA4I,IAAA,iBAAA,WACCzI,EAAKiK,aAEZjK,EAAAC,OAEO,WACAD,EAAMiC,sBAGMrB,UAAK+H,kBAAyB,WACtCzK,KAAG+B,OAGP/B,KAAA+B,MAAA2D,MACA8F,WAAYxL,KAAC4J,aAAAhH,EAAA2F,QAAAvI,KAAA4J,cAAA5J,KAAA4J,YAAA3I,OAAA,EACb+B,GAAAG,MAAKnD,KAAA4J,YAAoB,GAAA5J,KAAA4J,YAAA,GAAA5J,KAAA4J,YAAA,IAAA,SAGpBlH,UAAiBF,YAAA,WAEtBxC,KAAI+B,aAAwB0I,oBAC/BzK,KAAA4D,UAAAC,MAAA7D,KAAAqC,UAAArB,KAAAhB,KAAA+B,OACJ/B,KAAA+D,iBAEO/D,KAAAsK,mBACCtK,KAAOsK,kBAAiBtK,KAAKqC,UAIlBK,UAAGgI,aAAA,WACtB1K,KAAAqC,KAAArC,KAAAsC,YAAAtC,KAAAoB,QAEOpB,KAAAuC,OAAAK,EAAAC,MAAA7C,KAAAoB,QACJpB,KAAK8C,yBACL9C,KAAKwC,iBAEAE,UAAiBqJ,SAAA,WACzB/L,KAAA+B,MAAAC,OAAAhC,KAAA4K,YAAA,IAEO5K,KAAA4D,UAAAiC,MAAA,SAAA7F,KAAA4K,YAAR,GAAA,MACI5K,KAAK+B,MAAKgE,cACNhC,oBACIrB,UAAAqB,eAAA,cACJ/D,KAAM0B,SAAA4E,KAAc,kBAAiBV,IAAK,UAM5B5F,KAAW0B,SAAU4E,KAAI,eAAcK,aAAcqF,EAAmBhM,KAAM0B,SAAS4E,KAAA,eAAA2E,aACpGjL,MAAA0B,SAAA4E,KAAA,gBAAAV,IAAA,GAAK5F,KAAE4D,UACC+B,OAAA,SACAiB,KAAA,YAAc,SAAAqF,EAAA,KAAA,IAAAD,EAAA,IAAA,WAGdpI,UACA4C,OAAK,QACLA,OAAK,WACLI,KAAK,SAAU,GACfA,KAAA,QAAc,GACdA,KAAK,IAAK,KACVA,KAAK,IAAK,KACVA,KAAK,KAAA,MACLJ,OAAK,SACLI,KAAK,IAAA,IACLA,KAAK,IAAA,GAELA,KAAA,SAAS,SACTA,KAAA,QAAc,UACdA,KAAA,YAAQ,SAAoBqF,EAAA,KAAA,IAAAD,EAAA,IAAA,KAC5BpF,KAAK,aAAU,0CACfhD,UACA4C,OAAK,QACbC,QAAA,eAAA,GACJG,KAAA,SAAA,QACJA,KAAA,QAAA,QAEOA,KAAA,OAAA,iBA/BA5D,IAAG2C,OAAM3F,KAAA0B,SAAc4E,KAAA,gBAAsB,IAAGC,YAsCrC7D,UAAewJ,aAAC,SAAAC,EAAAC,GAC3B,GAAGC,GAAAD,EAAA,GAAAA,EAAA,GAAAE,EAAAH,EAAA,GAAAA,EAAA,GAAAI,GAAAJ,EAAA,GAAAA,EAAA,IAAAE,IAAA,CAEPlD,GAAEnJ,KAAE0B,SAAQ,IAAA4E,KAAA,kBAAC2C,IAAA,UAAO,WAElB,MAAKsD,GAAa,EAAK,IAEjBA,UAEH7K,SAAW,IAAE4E,KAAA,mBACV2C,IAAA,OAAO,WACR,MAAAkD,GAAA,GAAAE,EAAA,IAAA,MAGHpD,IAAA,QAAA,WAAR,MAAAqD,GAMCD,EAAA,IAAA,SAHmB3J,UAAEI,uBAAoB,cAClChB,GAAK9B,IACNA,MAAAqC,MAGCO,EAAA+H,KAAA3K,KAAAqC,KAAA,SAAA4E,EAAOC,GAAfD,EAAA5D,MAiOC4D,EAAA5D,OAAAvB,EAAAD,eAAA6F,iBAAAR,EAAApF,EAAAG,aA3NmBS,UAACoJ,QAAA,SAAA/J,EAAAyK,GACjB,GAAI1K,GAAO9B,KACPyM,EAAc,EACdjH,EAAM,KAGNE,EAAM,KACNgH,EAAS,KAGTC,EAAU,KACVC,EAAA,KAGAC,EAAS,KACTC,EAAA,KACAC,EAAY,KACZC,EAAa,KAEXC,EAAOjK,GAAGkK,SAACC,OAEbC,EAAQ,KACRC,EAAQ,KACRC,EAAU,KACVC,EAAU,SAASC,GACnBhI,EAAMgI,EAAWhI,MAGjBE,EAAM8H,EAAS9H,MACfgH,EAASc,EAAMd,SAAQhH,EAAAzC,QAAAwK,OAGvBd,EAAUa,EAASb,SAAQnH,EAASvC,QAAQwK,OAC5Cb,EAAAY,EAAkBzH,OAGlB8G,EAAAnH,EAAczC,QACd6J,EAAStH,EAAGvC,QACZ8J,EAAarH,EAAGzC,QAAOwK,SAAYC,QAGnCV,EAAaxH,EAACvC,QAAAwK,SAAAC,QACdN,EAAcL,EACjBM,EAAAJ,EAAAhK,QAEDqK,EAAeL,EAAAzF,YAGTqF,EAAAc,OACFb,EAAIa,UAEA5L,SACI,SAAc0L,EAAQrB,EAAMnJ,EAAWuE,GA2B/C,MA1BIiG,GAAC,GAAArB,EAAA,KAACqB,EAAM,GAAArB,EAAA,GACJgB,EAAY,KAAAhB,EAAe,IAAAnJ,IAAAoK,EAC3BI,EAAA,IAAcrB,EAAM,GAAAqB,EAAe,IAIvCA,EAAS,GAAGL,EAAc,GAC1B5F,EAAY5E,EAAAC,MAAYyK,KAGxBG,EAAC,GAAArB,EAAA,KAACqB,EAAM,GAAArB,EAAA,GACJgB,EAAY,KAAAhB,EAAe,IAAAnJ,IAAAoK,EAC3BI,EAAA,IAAcA,EAAM,GAAArB,EAAe,IAIpCqB,EAAA,GAAUL,EAAW,GAC5B5F,EAAgB5E,EAAMC,MAAMyK,KAI5BL,EAAOzF,UAAOA,GACjB4F,EAAAxK,EAAAC,MAAA4K,GAEKJ,EAAWzK,EAAGC,MAAAI,GAChBqK,EAAgB1K,EAAAC,MAAA2E,GACTiG,GAEPjL,EAAS,WACTyK,EAAIhK,MAAK,GACZgK,EAAAzF,WAAA,EAAA,IAGKqF,EAAMY,OAAGV,GACXE,EAAiBzI,EAAAqI,GAAOjI,EAAKkI,KACzB9L,KAAAiM,IAEJW,EAAC,WAAO,IAAF5K,GAAE6K,MAAA5K,OACJ6K,IACAtL,MAIPkK,EAAAqB,EAAAlB,EAAAY,SAAAV,EAAA/J,GAAA6K,MAAA5K,MAAAD,GAAA6K,MAAArG,YAGIoF,KAED9K,EAAMoK,aAAaW,EAAOY,SAAWV,iBAI7B,SAAYiB,UAAoBxB,EAAA,GAAM,GAAAxF,UAAYN,MAAK,EAAA8F,EAAA,GAAA,GAAAxF,UAAAhF,OAAA,GAC9DiM,EAAAhB,EAAAzF,YAAA0G,EAAAC,EAAAC,EAAO,QAAFJ,EACEX,EAAYZ,GAAGQ,EAAOhK,MAAMoK,EAAY,IAIzCA,EAAW,GAEXJ,EAAMhK,MAAKoK,EAAA,GAGhB,IAAIgB,GAAGC,EAACJ,EACVjB,GAAMzF,WAAYyG,EAAO,GAAWG,EAAC,GAAAC,EAAA,GAAAJ,EAAA,GAAAG,EAAA,GAAAC,EAAA,KAErCpB,EAAIY,MAAKrB,OAET+B,GAAC,SAAAP,GAAC,GAAIxG,GAAEyF,EAAAzF,WACM,WAAVwG,EACHxG,EAAA,IAAA,GAIJA,EAAA,IAAA,GAGGyF,EAAMzF,UAAQA,GAEdyF,EAAOY,MAAErB,IAGP2B,EAAQ,SAACG,GACX,GAAMrL,GAAQgK,EAAOhK,QACjBuE,EAAYyF,EAAOzF,WACvB,SAAQ8G,EAAA,GAAY9G,EAAU,IAAGvE,GAAWqL,EAAG,GAAA9G,EAAiB,IAAKvE,IAGnEqL,EAAQ,SAAGH,GACb,GAAAlL,GAAqBgK,EAAOhK,QAAUuE,EAAAyF,EAAAzF,mBAClC2G,EAAO,GAAAlL,EAAAuE,EAAA,GAAA2G,EAAA,GAAAlL,EAAAuE,EAAA,OAEH,kBACJxE,GAAO6K,MAAAW,aACH,IACAD,EAAK,QACT,WACI,IACAA,EAAK,OACT,WACI,KACPzM,EAAAuI,QAAA,KACJ,MAGK,KAAQ,KACFvI,EAAAuI,QAAY,SAGpByD,EAAO,WACPpB,EAAAK,GACAH,IACHK,EAAAhK,MAAA,GAGDgK,EAASzF,WAAO,EAAA,MACF,KACO,EAAA,GAIrByF,GAAIzI,EAAKqI,GACPjI,EAAKkI,GAGJL,aAAA,EAAAA,IACEhB,GAAA,OAAKmC,UACLX,GAAMxB,GAAS,gBAASqC,UACtBpM,SAACkE,IAAW,IAAAwD,SAAS,aAGtBxC,KAAA,aAAa,GACff,MAAI,UAAc,QAElB4F,GAAI,UAAUgD,MACV,QAAS,eAoCrBtE,MAEHuE,GAED9G,SAAO8B,cACK,uCACGS,uEC5kBfwE,GAAM,SAAAhO,EAAgBlB,EAAsBD,sCAEjCA,EAAY,cAAAqF,OAAA,OAEnB+J,IACAxN,OAAM,aACNyN,MAAA,aACHtM,OAAA,kBAEDuM,MAAA,iBAAAC,KAAA,eASAC,SAAC,oBAAA,WAED,QAAAC,YAoBQA,MAJQ,mBAEAC,GAAAxN,EAAAC,EAAmCC,EAAAC,GAhBxC,UACA7B,MAAA0B,SAAkBA,EAClB1B,KAAA2B,OAAiBA,EACjB3B,KAAA4B,SAA4BA,EAC5B5B,KAAA6B,eAA0BA,EAGzB7B,KAAA6O,OAAqB,EAazB7O,KAAKuC,QAAS,EACjBvC,KAAA8O,OAAA,EAEM9O,KAAA+O,KAAA,IAAP/O,KAAAgP,UAAA,EACIhP,KAAK+B,MAAO,KACZ/B,KAAKiC,OAAAjC,KAAA6B,eAAyBK,yBAqLlC,SA/LoBO,SAAoB,WAAA,SAAA,WAAA,oBAYtBC,UAAMC,QAAe,iBAC3B3C,UACHqC,KAAGrC,KAAAoB,OACRpB,KAAE8C,yBAEFE,GAAAC,MAAKF,cAAmB,WAC3B,MAAAC,IAAAC,MAAAC,UAAAC,MAAArB,EAAAG,OAAAmB,IAAA,SAAAC,GAEM,MAAAvB,GAAAD,eAAUyB,oBAAiCD,OAE9CrD,KAAKuD,sBAEOb,UAAYc,WAAW,SAAKC,GACxC,GAAI3B,GAAM9B,IAEVA,MAAIuC,OAAQkB,EAAUlB,OAAQkB,EAAOlB,OAAAmB,aAAwB1D,KAACuC,YAC1DyM,SAAYvL,EAAQuL,SAAOvL,EAAYuL,SAACtL,aAAA1D,KAAAgP,cACxCH,MAAKpL,EAAAoL,MAAApL,EAAyBoL,MAAAnL,aAAA1D,KAAA6O,WAE9BE,KAAQtL,EAAQsL,KAACtL,EAAAsL,KAAArL,aAAA1D,KAAA+O,gBACRtL,EAAAqL,MAAgBrL,EAAKqL,MAAMpL,aAAiB1D,KAAA8O,QAC7C1N,QAAUqC,EAAArC,OAAAsC,eAAAD,EAAArC,OAAAuC,0BACVF,EAAKrC,OAAAsC,kBACRZ,yBACD9C,KAAK+B,QACR/B,KAAA4D,UAAAC,MAAA7D,KAAAqC,MAAArB,KAAAhB,KAAA+B,OACJ/B,KAAA4B,SAAA,WACJE,EAAAqN,2BAEDnP,KAAA+D,eAiECf,GAAA2C,OAAA3F,KAAA0B,SAAAkE,IAAA,IAAAD,OAAA,kBAAA,GAAA,SA7DqBjD,UAAAa,iBAAA,iBACNvD,iBACA,oBACA+B,MAAOiC,GAAAC,OAAAmL,WACTjL,YACC,EACCE,MAAO,EACTC,OAAA,OACC,IAEDE,EAAA,SAAAC,SACK3C,GAAC+M,MAAYpK,EAAAI,MAAM,OAEzBD,EAAA,SAAWH,SACXA,GAAAI,QAEA7C,OAAMoF,OAAKtF,EAAMiN,OACjBrI,MAAAU,OAAWtF,EAAIiN,OACfM,YAAM,GACHC,eAAc,MACfC,aAAA,GAEHV,MAAM/M,EAAC+M,OACPW,WAAO,IACPnM,MAAM,SAACoB,GAEX,MAAKA,GAAApB,OAAeL,GAAAC,MAAOF,gBAAkBI,YAExCpB,MAAMsD,QAAQC,SAAQ,KACtBvD,MAAMwD,OAAO,mCACbxD,MAAOwJ,YAAM,KACb3H,UAAMZ,GAAS2C,OAAI7D,EAAAJ,SAAAkE,IAAA,IACnBD,OAAM,cACNE,MAAK,SAAW/D,EAAC,KAAA,MAEnB+D,MAAM,QAAA/D,EAAakN,SAAA,OAAAlN,EAAA,KAAA,MAClB6D,OAAK,OACLE,MAAK,UAAS,SACV/D,EAAKO,UACRrB,KAAEc,EAAAC,gBACC+D,aAAY,WAChBhE,EAAKC,MAAAgE,SACNjE,EAAAF,SAAA,WAEIE,EAAKqN,2BAEZrN,EAAK2N,cACD3N,EAAMiC,eAAaf,GAAO2C,OAAK7D,EAAAJ,SAAgBkE,IAAC,IAAOD,OAAA,kBAAwB,GAAA,MAE5E7D,EAAMC,6BAEJ,iBACMiB,GAAA2C,OAAa7D,EAACJ,SAAAkE,IAAA,IAAAD,OAAA,kBAAA,GAAA,EAEzB7D,GAAK4N,iBAASC,aACLA,GACNlI,aACCrC,SAAC,KACDS,MAAC,UAAe,GACrB/D,EAAAF,SAAA,WACJE,EAAAqN,0BACN,KAEOrN,EAAA2N,cACC3N,EAAKiC,eAAc4L,UAGhBjN,UAAAqB,eAAA,SAAAyI,MACJxM,KAAI0B,SAAK4E,KAAS,kBAAKV,IAAA,GAKvB,CAGwB,IAAlB5F,KAAG0B,SAAU4E,KAAK,uBAAArF,aACnBS,SAAY4E,KAAI,cAChBE,OAAW,6EAGXxD,GAAO4M,OAAIC,MAAAC,KAAA,MAAAf,EAAA3H,OAAApH,KAAA+O,QACX/L,GAAQwJ,IAAAuD,MACRC,YAAKjB,EAAa,EAAA,IAEjBkB,YAAWlB,EAAS,EAAC,MACtB/L,GAAI2C,OAAO6G,GACXhG,OAAO,KACPC,QAAK,eAAQ,GACbG,KAAK,YAAkB,aAAAmI,EAAA,EAAA,IAAAA,EAAA,EAAA,IAC/BvC,GAAAhC,UAAA,QACJnI,KAAAwN,GAAA,KAEOK,QAAA1J,OAAA,QACKI,KAAA,OAAW,uBACVA,KAAA,IAAUmJ,kBA1BP/P,KAAA0B,SAAc4E,KAAA,gBAAa,IAAAC,uBAC3BD,KAAO,uBAAAC,UA6BxB2I,EAACxM,UAAA+M,YAAA,WAEO,GAAAzP,KAAAgP,SAAA,CACA,GAAEW,GAAU3M,GAAK2C,OAAK3F,KAAM0B,SAAUkE,IAAI,IAACD,OAAA,kBAAA,GAAA,GAAAwK,EAAAhH,EAAAwG,GAAAhJ,aAAA,GAAAS,OAAApH,KAAA+O,OAAA,KAAA,CAAC/L,IAAA2C,OAAO3F,KAAA0B,SAAA4E,KAAA,gBAAA,IAAAM,KAAA,YAAA,aAAAuJ,EAAA,YAIjDzN,UAAAgN,iBAAA,SAAAC,GAEN,IAAI3P,KAAA8O,OAAiB9O,KAAC6O,QAAA7O,KAAAqC,KAAtB,CAEA,GAAG+N,GAAOpQ,KAAQqC,KAAAgO,OAAA,SAAAC,EAAAC,SACPD,GAACC,EAAA1L,aAEC,SACHuL,EAAe,KAAQI,QAAC,GAAA,eACxBb,GACLhK,OAAK,sBAELa,OAAA,QACRC,QAAA,eAAA,GAEOG,KAAA,cAAA,UACCf,MAAM,oBAAqB,WAAgB4K,KAAML,GAEtDpQ,KAAM0Q,UAAoB1N,GAAK2C,OAAQ3F,KAAK0B,SAAC4E,KAAA,oBAA6BV,IAAS,IAACC,MAAA,UAAA,OAGzEnD,UAAAyM,uBAAA,WACX,IAACnP,KAAA8O,OAAA9O,KAAA6O,QAAA7O,KAAAqC,KAAD,CAGH,GAAAsO,GAAA3Q,KAAA0B,SAAA4E,KAAA,qBAAAV,IAAA,GAAAoB,SAEO2J,GAAAjK,OAAAiK,EAAA3O,aACY0O,UAAO7K,MAAA,cAAA8K,EAAAjK,MAAA,KAAAb,MAAA,UAAA,OAGTnD,UAAQI,uBAAc,WACpC,GAAGhB,GAAA9B,IACNA,MAAAqC,MAEJO,EAAA+H,KAAA3K,KAAAqC,KAAA,SAAA4E,EAAAC,GAEaD,EAAyB5D,MAAA4D,EAAA5D,OAAAvB,EAAAD,eAAA6F,iBAAAR,EAAApF,EAAAG,WAGnCiN,MAGJ0B,YACYhC,cACG,0BAClB9G,WAAAoH,WCxPDzP,OAAA,mBACAsI,UAAA,cAAA6I,QAGAC,GAAA,SAAAlQ,EAAAlB,EAAAD,IACA,SAAAC,GACA,IACAA,EAAA8J,QAAA9J,OAAA,uBACA,MAAAU,GACAV,EAAA8J,QAAA9J,OAAA,0BAEAA,EAAAqR,KAAA,iBAAA,SAAAC,GACAA,EAAAC,IAAA,0BACA,kLAIA,SAAAvR,GACA,IACAA,EAAA8J,QAAA9J,OAAA,uBACA,MAAAU,GACAV,EAAA8J,QAAA9J,OAAA,0BAEAA,EAAAqR,KAAA,iBAAA,SAAAC,GACAA,EAAAC,IAAA,2CACA,mmBAIA,SAAAvR,GACA,IACAA,EAAA8J,QAAA9J,OAAA,uBACA,MAAAU,GACAV,EAAA8J,QAAA9J,OAAA,0BAEAA,EAAAqR,KAAA,iBAAA,SAAAC,GACAA,EAAAC,IAAA,4BACA,wpBAIA,SAAAvR,GACA,IACAA,EAAA8J,QAAA9J,OAAA,uBACA,MAAAU,GACAV,EAAA8J,QAAA9J,OAAA,0BAEAA,EAAAqR,KAAA,iBAAA,SAAAC,GACAA,EAAAC,IAAA,0BACA","file":"pip-webui-charts.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import { IChartColorsService } from '../chart_colors/IChartColorsService';\n\n{\n    interface IBarChartBindings {\n        [key: string]: any;\n\n        series: any;\n        xTickFormat: any;\n        yTickFormat: any;\n        interactiveLegend: any;\n    }\n\n    const BarChartBindings: IBarChartBindings = {\n        series: '<pipSeries',\n        xTickFormat: '<?pipXTickFormat',\n        yTickFormat: '<?pipYTickFormat',\n        interactiveLegend: '<?pipInterLegend'\n    }\n\n    class BarChartBindingsChanges implements IBarChartBindings, ng.IOnChangesObject {\n        [key: string]: any;\n\n        series: ng.IChangesObject < any > ;\n        xTickFormat: ng.IChangesObject < any > ;\n        yTickFormat: ng.IChangesObject < any > ;\n        interactiveLegend: ng.IChangesObject < boolean > ;\n    }\n\n    class BarChartController implements ng.IController, IBarChartBindings {\n        public series: any;\n        public xTickFormat: any;\n        public yTickFormat: any;\n        public interactiveLegend: boolean;\n        public legend: any;\n\n        private data: any;\n        private chart: nv.DiscreteBarChart = null;\n        private chartElem: any;\n        private colors: string[];\n        private height: number = 270;\n\n        constructor(\n            private $element: JQuery,\n            private $scope: ng.IScope,\n            private $timeout: ng.ITimeoutService,\n            private pipChartColors: IChartColorsService\n        ) {\n            \"ngInject\";\n\n            this.colors = this.pipChartColors.generateMaterialColors();\n            $scope.$watch('$ctrl.legend', (updatedLegend) => {\n                if (!updatedLegend) return;\n\n                this.data = this.prepareData(updatedLegend);\n                this.legend = updatedLegend;\n\n                this.updateChart();\n            }, true);\n        }\n\n        public $onInit() {\n            this.data = this.prepareData(this.series);\n            this.legend = _.clone(this.series);\n            this.generateParameterColor();\n            ( < any > d3.scale).paletteColors = () => {\n                return d3.scale.ordinal().range(this.colors.map((color) => {\n                    return this.pipChartColors.materialColorToRgba(color);\n                }));\n            };\n\n            this.instantiateChart();\n        }\n\n        public $onChanges(changes: BarChartBindingsChanges) {\n            this.xTickFormat = changes.xTickFormat ? changes.xTickFormat.currentValue : null;\n            this.yTickFormat = changes.yTickFormat ? changes.yTickFormat.currentValue : null;\n            this.interactiveLegend = changes.interactiveLegend ? changes.interactiveLegend.currentValue : null;\n\n            if (changes.series && changes.series.currentValue !== changes.series.previousValue) {\n                this.series = changes.series.currentValue;\n                this.data = this.prepareData(this.series);\n                this.legend = _.clone(this.series);\n                this.generateParameterColor();\n                this.updateChart();\n            }\n        }\n\n        private updateChart() {\n            if (this.chart) {\n                this.chartElem.datum(this.data).call(this.chart);\n                this.configBarWidthAndLabel();\n                this.drawEmptyState();\n            }\n        }\n\n        private instantiateChart() {\n            nv.addGraph(() => {\n                this.chart = nv.models.discreteBarChart()\n                    .margin({\n                        top: 10,\n                        right: 0,\n                        bottom: 10,\n                        left: 50\n                    })\n                    .x((d) => {\n                        return d.label || d.key || d.x;\n                    })\n                    .y((d) => {\n                        return d.value;\n                    })\n                    .showValues(true)\n                    .staggerLabels(true)\n                    .showXAxis(true)\n                    .showYAxis(true)\n                    .valueFormat( < any > d3.format('d'))\n                    .duration(0)\n                    .height(this.height)\n                    .color((d) => {\n                        return this.data[d.series].color || this.pipChartColors.materialColorToRgba(this.colors[d.series]);\n                    });\n\n                this.chart.tooltip.enabled(false);\n                this.chart.noData('There is no data right now...');\n\n                this.chart.yAxis\n                    .tickFormat((d) => {\n                        return this.yTickFormat ? this.yTickFormat(d) : d;\n                    });\n\n                this.chart.xAxis\n                    .tickFormat((d) => {\n                        return this.xTickFormat ? this.xTickFormat(d) : d;\n                    });\n\n                this.chartElem = < any > d3.select(this.$element.get(0))\n                    .select('.bar-chart svg')\n                    .datum(this.data)\n                    .style('height', '285px')\n                    .call(this.chart);\n\n                nv.utils.windowResize(() => {\n                    this.chart.update();\n                    this.configBarWidthAndLabel(0);\n                    this.drawEmptyState();\n                });\n\n                return this.chart;\n            }, () => {\n                this.$timeout(() => {\n                    this.configBarWidthAndLabel();\n                }, 0);\n                this.drawEmptyState();\n            });\n        }\n\n        private prepareData(data): any {\n            const result = [];\n            _.each(data, (seria) => {\n                if (!seria.disabled && seria.values) result.push(seria);\n            });\n            return _.cloneDeep(result);\n        }\n\n        private drawEmptyState() {\n            if (this.$element.find('.nv-noData').length === 0) {\n                d3.select(this.$element.find('.empty-state')[0]).remove();\n            } else {\n                const g = this.chartElem.append('g').classed('empty-state', true),\n                    width = this.$element.find('.nvd3-svg').innerWidth(),\n                    margin = width * 0.1;\n\n                g.append('g')\n                    .style('fill', 'rgba(0, 0, 0, 0.08)')\n                    .append('rect')\n                    .attr('height', this.height - 10)\n                    .attr('width', 38);\n\n                g.append('g')\n                    .attr('transform', 'translate(42, 60)')\n                    .style('fill', 'rgba(0, 0, 0, 0.08)')\n                    .append('rect')\n                    .attr('height', 200)\n                    .attr('width', 38);\n\n                g.append('g')\n                    .attr('transform', 'translate(84, 160)')\n                    .style('fill', 'rgba(0, 0, 0, 0.08)')\n                    .append('rect')\n                    .attr('height', 100)\n                    .attr('width', 38);\n\n                g.attr('transform', 'translate(' + (50 + margin) + ', 0), ' + 'scale(' + ((width - 2 * margin) / 126) + ', 1)');\n            }\n        }\n\n        private configBarWidthAndLabel(timeout: number = 1000) {\n            const labels = this.$element.find('.nv-bar text'),\n                chartBars = this.$element.find('.nv-bar'),\n                parentHeight = ( < any > this.$element.find('.nvd3-svg')[0]).getBBox().height;\n\n            d3.select(this.$element.find('.bar-chart')[0]).classed('visible', true);\n\n            _.each(chartBars, (item: EventTarget, index: number) => {\n                const barHeight = Number(d3.select(item).select('rect').attr('height')),\n                    barWidth = Number(d3.select(item).select('rect').attr('width')),\n                    element = d3.select(item),\n                    x = d3.transform(element.attr('transform')).translate[0],\n                    y = d3.transform(element.attr('transform')).translate[1];\n\n                element\n                    .attr('transform', 'translate(' + Number(x + index * (barWidth + 15)) + ', ' + (this.height - 20) + ')')\n                    .select('rect').attr('height', 0);\n\n                element\n                    .transition()\n                    .duration(timeout)\n                    .attr('transform', 'translate(' + Number(x + index * (barWidth + 15)) + ', ' + y + ')')\n                    .select('rect').attr('height', barHeight);\n\n                d3.select(labels[index])\n                    .attr('dy', barHeight / 2 + 10)\n                    .attr('x', barWidth / 2);\n            });\n        }\n\n        private generateParameterColor() {\n            if (!this.data) return;\n\n            _.each(this.data, (item: any, index: number) => {\n                if (item.values[0]) {\n                    item.values[0].color = item.values[0].color || this.pipChartColors.getMaterialColor(index, this.colors);\n                    item.color = item.values[0].color;\n                }\n            });\n        }\n\n    }\n\n    const BarChart: ng.IComponentOptions = {\n        bindings: BarChartBindings,\n        templateUrl: 'bar_chart/BarChart.html',\n        controller: BarChartController\n    }\n\n    angular\n        .module('pipBarCharts', [])\n        .component('pipBarChart', BarChart);\n}","import { IChartColorsService } from './IChartColorsService';\n\n{\n    class ChartColorsService implements IChartColorsService {\n        constructor(\n            private $mdColorPalette: angular.material.IColorPalette\n        ) { \n            \"ngInject\";\n        }\n\n        public getMaterialColor(index: number, colors: string[]): string {\n            if (!colors || colors.length < 1) return null;\n\n            if (index >= colors.length) {\n                index = 0;\n            }\n\n            return this.materialColorToRgba(colors[index]);\n        }\n\n        public materialColorToRgba(color: string): string {\n            return 'rgba(' + this.$mdColorPalette[color][500].value[0] + ',' +\n                this.$mdColorPalette[color][500].value[1] + ',' +\n                this.$mdColorPalette[color][500].value[2] + ',' +\n                (this.$mdColorPalette[color][500].value[3] || 1) + ')';\n        }\n\n        public generateMaterialColors(): string[] {\n            let colors = _.map((<any>this.$mdColorPalette), (palette, color: string) => {\n                return color;\n            });\n            colors = _.filter(colors, (color: string) => {\n                return _.isObject(this.$mdColorPalette[color]) && _.isObject(this.$mdColorPalette[color][500]) && _.isArray(this.$mdColorPalette[color][500].value);\n            });\n\n            return colors;\n        }\n    }\n\n    angular\n        .module('pipChartColors', [])\n        .service('pipChartColors', ChartColorsService);\n}","import { IChartColorsService } from '../chart_colors/IChartColorsService';\n\n{\n    interface IChartLegendBindings {\n        [key: string]: any;\n\n        series: any;\n        interactive: any;\n    }\n\n    const ChartLegendBindings: IChartLegendBindings = {\n        series: '<pipSeries',\n        interactive: '<pipInteractive'\n    }\n\n    class ChartLegendBindingsChanges implements ng.IOnChangesObject, IChartLegendBindings {\n        [key: string]: any;\n\n        series: ng.IChangesObject < any > ;\n        interactive: ng.IChangesObject < boolean > ;\n    }\n\n    class ChartLegendController implements ng.IController, IChartLegendBindings {\n        public series: any;\n        public interactive: boolean;\n\n        private colors: string[];\n\n        constructor(\n            private $element: JQuery,\n            private $scope: ng.IScope,\n            private $timeout: ng.ITimeoutService,\n            private pipChartColors: IChartColorsService\n        ) {\n            \"ngInject\";\n            this.colors = this.pipChartColors.generateMaterialColors();\n        }\n\n        public $onInit() {\n            this.updateLegends();\n        }\n\n        public $onChanges(changes: ChartLegendBindingsChanges) {\n            if (changes.series && changes.series.currentValue !== changes.series.previousValue) {\n                this.series = changes.series.currentValue;\n                this.updateLegends();\n            }\n\n            if (changes.interactive && changes.interactive.currentValue !== changes.interactive.previousValue) {\n                this.interactive = changes.interactive.currentValue;\n                if (this.interactive === true) {\n                    this.$timeout(() => {\n                        this.colorCheckboxes();\n                    }, 0);\n                }\n            }\n        }\n\n        private updateLegends() {\n            this.$timeout(() => {\n                this.animate();\n                this.colorCheckboxes();\n            }, 0);\n            this.prepareSeries();\n        }\n\n        private colorCheckboxes() {\n            const checkboxContainers = this.$element.find('md-checkbox .md-container');\n\n            _.each(checkboxContainers, (item: EventTarget, index: number) => {\n                if (index >= this.series.length) {\n                    return\n                }\n                $(item)\n                    .css('color', this.series[index].color || this.colors[index])\n                    .find('.md-icon')\n                    .css('background-color', this.series[index].color || this.colors[index]);\n            });\n        }\n\n        private animate() {\n            const legendTitles = this.$element.find('.chart-legend-item');\n\n            _.each(legendTitles, (item: EventTarget, index: number) => {\n                this.$timeout(() => {\n                    $(item).addClass('visible');\n                }, 200 * index);\n            });\n        }\n\n        private prepareSeries() {\n            if (!this.series) return;\n\n            _.each(this.series, (item: any, index: number) => {\n                const materialColor = this.pipChartColors.getMaterialColor(index, this.colors);\n                item.color = item.color || (item.values && item.values[0] && item.values[0].color ? item.values[0].color : materialColor);\n                item.disabled = item.disabled || false;\n            });\n        }\n    }\n\n    const ChartLegend: ng.IComponentOptions = {\n        bindings: ChartLegendBindings,\n        templateUrl: 'chart_legend/ChartInteractiveLegend.html',\n        controller: ChartLegendController\n    }\n\n    angular\n        .module('pipChartLegends', [])\n        .component('pipChartLegend', ChartLegend);\n}","﻿angular.module('pipCharts', [\n    'pipBarCharts',\n    'pipLineCharts',\n    'pipPieCharts',\n    'pipChartLegends',\n    'pipChartColors',\n    'pipCharts.Templates'\n]);","import { IChartColorsService } from '../chart_colors/IChartColorsService';\n\n{\n    interface ILineChartBindings {\n        [key: string]: any;\n\n        series: any;\n        showYAxis: any;\n        showXAxis: any;\n        xFormat: any;\n        xTickFormat: any;\n        yTickFormat: any;\n        xTickValues: any;\n        dynamic: any;\n        fixedHeight: any;\n        dynamicHeight: any;\n        minHeight: any;\n        maxHeight: any;\n        interactiveLegend: any;\n    }\n\n    const LineChartBindings: ILineChartBindings = {\n        series: '<pipSeries',\n        showYAxis: '<?pipYAxis',\n        showXAxis: '<?pipXAxis',\n        xFormat: '<?pipXFormat',\n        xTickFormat: '<?pipXTickFormat',\n        yTickFormat: '<?pipYTickFormat',\n        xTickValues: '<?pipXTickValues',\n        dynamic: '<?pipDynamic',\n        fixedHeight: '<?pipDiagramHeight',\n        dynamicHeight: '<?pipDynamicHeight',\n        minHeight: '<?pipMinHeight',\n        maxHeight: '<?pipMaxHeight',\n        interactiveLegend: '<?pipInterLegend'\n    }\n\n    class LineChartBindingsChanges implements ng.IOnChangesObject, ILineChartBindings {\n        [key: string]: any;\n\n        fixedHeight: ng.IChangesObject < number > ;\n        dynamicHeight: ng.IChangesObject < boolean > ;\n        minHeight: ng.IChangesObject < number > ;\n        maxHeight: ng.IChangesObject < number > ;\n\n        series: ng.IChangesObject < any > ;\n        showYAxis: ng.IChangesObject < boolean > ;\n        showXAxis: ng.IChangesObject < boolean > ;\n        xFormat: ng.IChangesObject < any > ;\n        xTickFormat: ng.IChangesObject < any > ;\n        yTickFormat: ng.IChangesObject < any > ;\n        xTickValues: ng.IChangesObject < any > ;\n        dynamic: ng.IChangesObject < boolean > ;\n        interactiveLegend: ng.IChangesObject < boolean > ;\n    }\n\n    class LineChartController implements ng.IController, ILineChartBindings {\n        private HEIGHT = 270;\n        private chart: nv.LineChart = null;\n        private chartElem: any = null;\n        private setZoom: Function = null;\n        private updateZoomOptions: Function = null;\n        private colors: string[];\n        \n        public fixedHeight: number = this.HEIGHT;\n        public dynamicHeight: boolean = false;\n        public minHeight: number = this.HEIGHT;\n        public maxHeight: number = this.HEIGHT;\n        public series: any;\n        public showYAxis: boolean = true;\n        public showXAxis: boolean = true;\n        public xFormat: Function;\n        public xTickFormat: Function;\n        public yTickFormat: Function;\n        public xTickValues: number[];\n        public dynamic: boolean = false;\n        public interactiveLegend: boolean = false;\n        public data: any;\n        public legend: any;\n        public sourceEvents: any;\n\n        constructor(\n            private $element: JQuery,\n            private $scope: ng.IScope,\n            private $timeout: ng.ITimeoutService,\n            private pipChartColors: IChartColorsService\n        ) {\n            \"ngInject\";\n\n            this.colors = this.pipChartColors.generateMaterialColors();\n\n            $scope.$watch('$ctrl.legend', (updatedLegend) => {\n                this.data = this.prepareData(updatedLegend);\n                this.legend = updatedLegend;\n\n                this.updateChart();\n            }, true);\n\n            $scope.$on('$destroy', () => {\n                $timeout(() => {\n                    d3.selectAll('.nvtooltip').style('opacity', 0);\n                }, 800)\n            });\n        }\n\n        public $onInit() {\n            this.data = this.prepareData(this.series) || [];\n            this.legend = _.clone(this.series);\n            this.sourceEvents = [];\n\n            this.generateParameterColor();\n\n            ( < any > d3.scale).paletteColors = () => {\n                return d3.scale.ordinal().range(this.colors.map((color) => {\n                    return this.pipChartColors.materialColorToRgba(color);\n                }));\n            };\n\n            this.instantiateChart();\n        }\n\n        public $onChanges(changes: LineChartBindingsChanges) {\n            this.fixedHeight = changes.fixedHeight ? changes.fixedHeight.currentValue : this.HEIGHT;\n            this.minHeight = changes.minHeight ? changes.minHeight.currentValue : this.HEIGHT;\n            this.maxHeight = changes.maxHeight ? changes.maxHeight.currentValue : this.HEIGHT;\n            this.dynamicHeight = changes.dynamicHeight ? changes.dynamicHeight.currentValue : false;\n\n            this.showXAxis = changes.showXAxis ? changes.showXAxis.currentValue : true;\n            this.showYAxis = changes.showYAxis ? changes.showYAxis.currentValue : true;\n            this.dynamic = changes.dynamic ? changes.dynamic.currentValue : false;\n            this.interactiveLegend = changes.interactiveLegend ? changes.interactiveLegend.currentValue : false;\n\n            this.xFormat = changes.xFormat ? changes.xFormat.currentValue : null;\n            this.xTickFormat = changes.xTickFormat ? changes.xTickFormat.currentValue : null;\n            this.yTickFormat = changes.yTickFormat ? changes.yTickFormat.currentValue : null;\n\n            if (changes.xTickValues && changes.xTickValues.currentValue !== changes.xTickValues.previousValue) {\n                this.xTickValues = changes.xTickValues.currentValue;\n                this.updateXTickValues();\n            }\n\n            if (changes.series && changes.series.currentValue !== changes.series.previousValue) {\n                this.updateSeries();\n            }\n        }\n\n        private prepareData(data) {\n            const result = [];\n            _.each(data, (seria) => {\n                if (!seria.disabled && seria.values) result.push(seria);\n            });\n\n            return _.cloneDeep(result);\n        }\n\n        private getHeight() {\n            /*if (this.dynamicHeight) {\n                const heigth = Math.min(Math.max(this.minHeight, this.$element.parent().innerHeight()), this.maxHeight);\n                return heigth;\n            } else {\n                return this.fixedHeight;\n            }*/\n            return this.dynamicHeight ? Math.min(Math.max(this.minHeight, this.$element.parent().innerHeight()), this.maxHeight) : this.fixedHeight;\n        };\n\n        public zoomIn() {\n            if (this.setZoom) {\n                this.setZoom('in');\n            }\n        };\n\n        public zoomOut() {\n            if (this.setZoom) {\n                this.setZoom('out');\n            }\n        };\n\n        private instantiateChart() {\n            nv.addGraph(() => {\n                this.chart = nv.models.lineChart()\n                    .margin({\n                        top: 20,\n                        right: 20,\n                        bottom: 30,\n                        left: 30\n                    })\n                    .x((d) => {\n                        return (d !== undefined && d.x !== undefined) ? (this.xFormat ? this.xFormat(d.x) : d.x) : d;\n                    })\n                    .y((d) => {\n                        return (d !== undefined && d.value !== undefined) ? d.value : d;\n                    })\n                    .height(this.getHeight() - 50)\n                    .useInteractiveGuideline(true)\n                    .showXAxis(true)\n                    .showYAxis(true)\n                    .showLegend(false)\n                    .color((d) => {\n                        return d.color || ( < any > d3.scale).paletteColors().range();\n                    });\n\n                this.chart.tooltip.enabled(false);\n                this.chart.noData('There is no data right now...');\n\n                this.chart.yAxis\n                    .tickFormat((d) => {\n                        return this.yTickFormat ? this.yTickFormat(d) : d;\n                    });\n\n                this.chart.xAxis\n                    .tickFormat((d) => {\n                        return this.xTickFormat ? this.xTickFormat(d) : d;\n                    })\n                    .tickValues(this.xTickValues && _.isArray(this.xTickValues) && this.xTickValues.length > 2 ?\n                        d3.range(this.xTickValues[0], this.xTickValues[1], this.xTickValues[2]) : null);\n\n                this.chartElem = d3.select(this.$element.get(0)).select('.line-chart svg');\n                this.chartElem.datum(this.data || []).style('height', (this.getHeight() - 50) + 'px').call(this.chart);\n                // Handle touches for correcting tooltip position\n                $('.line-chart svg').on('touchstart touchmove', (e) => {\n                    this.$timeout(() => {\n                        const tooltip = $('.nvtooltip'),\n                            tooltipW = tooltip.innerWidth(),\n                            bodyWidth = $('body').innerWidth(),\n                            x = e.originalEvent['touches'][0]['pageX'],\n                            y = e.originalEvent['touches'][0]['pageY'];\n\n                        tooltip.css('transform', 'translate(' +\n                            (x + tooltipW >= bodyWidth ? (x - tooltipW) : x) + ',' +\n                            y + ')');\n                        tooltip.css('left', 0);\n                        tooltip.css('top', 0);\n                    });\n                });\n\n                $('.line-chart svg').on('touchstart touchend', (e) => {\n                    const removeTooltip = () => {\n                        $('.nvtooltip').css('opacity', 0);\n                    };\n\n                    removeTooltip();\n\n                    this.$timeout(() => {\n                        removeTooltip();\n                    }, 500);\n                });\n\n                if (this.dynamic) {\n                    this.addZoom(this.chart, this.chartElem);\n                }\n\n                nv.utils.windowResize(() => {\n                    this.onResize();\n                });\n\n                this.$scope.$on('pipMainResized', () => {\n                    this.onResize();\n                });\n\n                return this.chart;\n            }, () => {\n                this.drawEmptyState();\n            });\n        }\n\n        private updateXTickValues() {\n            if (!this.chart) return;\n\n            this.chart.xAxis\n                .tickValues(this.xTickValues && _.isArray(this.xTickValues) && this.xTickValues.length > 2 ?\n                    d3.range(this.xTickValues[0], this.xTickValues[1], this.xTickValues[2]) : null);\n        }\n\n        private updateChart() {\n            if (this.chart) {\n                this.updateXTickValues();\n\n                this.chartElem.datum(this.data || []).call(this.chart);\n                this.drawEmptyState();\n\n                if (this.updateZoomOptions) this.updateZoomOptions(this.data);\n            }\n        }\n\n        private updateSeries() {\n            this.data = this.prepareData(this.series);\n            this.legend = _.clone(this.series);\n\n            this.generateParameterColor();\n            this.updateChart();\n        }\n\n        private onResize() {\n            this.chart.height(this.getHeight() - 50);\n            this.chartElem.style('height', (this.getHeight() - 50) + 'px');\n            this.chart.update();\n            this.drawEmptyState();\n        }\n\n        private drawEmptyState() {\n            if (!this.$element.find('text.nv-noData').get(0)) {\n                d3.select(this.$element.find('.empty-state')[0]).remove();\n            } else {\n                const containerWidth = this.$element.find('.line-chart').innerWidth(),\n                    containerHeight = this.$element.find('.line-chart').innerHeight();\n\n                if (this.$element.find('.empty-state').get(0)) {\n                    this.chartElem\n                        .select('image')\n                        .attr('transform', 'scale(' + (containerWidth / 1151) + ',' + (containerHeight / 216) + ')');\n                } else {\n                    this.chartElem\n                        .append(\"defs\")\n                        .append(\"pattern\")\n                        .attr(\"height\", 1)\n                        .attr(\"width\", 1)\n                        .attr(\"x\", \"0\")\n                        .attr(\"y\", \"0\")\n                        .attr(\"id\", \"bg\")\n                        .append(\"image\")\n                        .attr('x', 17)\n                        .attr('y', 0)\n                        .attr('height', \"216px\")\n                        .attr('width', \"1151px\")\n                        .attr('transform', 'scale(' + (containerWidth / 1151) + ',' + (containerHeight / 216) + ')')\n                        .attr(\"xlink:href\", \"images/line_chart_empty_state.svg\");\n\n                    this.chartElem\n                        .append('rect')\n                        .classed('empty-state', true)\n                        .attr('height', \"100%\")\n                        .attr('width', \"100%\")\n                        .attr('fill', 'url(#bg)');\n                }\n            }\n        }\n\n        private updateScroll(domains, boundary) {\n            const bDiff = boundary[1] - boundary[0],\n                domDiff = domains[1] - domains[0],\n                isEqual = (domains[1] - domains[0]) / bDiff === 1;\n\n            $(this.$element[0]).find('.visual-scroll')\n                .css('opacity', function () {\n                    return isEqual ? 0 : 1;\n                });\n\n            if (isEqual) return;\n\n            $(this.$element[0]).find('.scrolled-block')\n                .css('left', function () {\n                    return domains[0] / bDiff * 100 + '%';\n                })\n                .css('width', function () {\n                    return domDiff / bDiff * 100 + '%';\n                });\n        }\n\n        private generateParameterColor() {\n            if (!this.data) return;\n\n            _.each(this.data, (item, index: number) => {\n                item.color = item.color || this.pipChartColors.getMaterialColor(index, this.colors);\n            });\n        }\n\n        private addZoom(chart, svg) {\n            // scaleExtent\n            const scaleExtent = 4;\n\n            // Parameters\n            let yAxis = null;\n            let xAxis = null;\n            let xDomain = null;\n            let yDomain = null;\n            let redraw = null;\n\n            // Scales\n            let xScale = null;\n            let yScale = null;\n\n            // Min/max boundaries\n            let x_boundary = null;\n            let y_boundary = null;\n\n            // Create d3 zoom handler\n            let d3zoom = d3.behavior.zoom();\n            let prevXDomain = null;\n            let prevScale = null;\n            let prevTranslate = null;\n\n            const setData = (newChart) => {\n                // Parameters\n                yAxis = newChart.yAxis;\n                xAxis = newChart.xAxis;\n                xDomain = newChart.xDomain || xAxis.scale().domain;\n                yDomain = newChart.yDomain || yAxis.scale().domain;\n                redraw = newChart.update;\n\n                // Scales\n                xScale = xAxis.scale();\n                yScale = yAxis.scale();\n\n                // Min/max boundaries\n                x_boundary = xAxis.scale().domain().slice();\n                y_boundary = yAxis.scale().domain().slice();\n\n                // Create d3 zoom handler\n                prevXDomain = x_boundary;\n                prevScale = d3zoom.scale();\n                prevTranslate = d3zoom.translate();\n\n                // Ensure nice axis\n                xScale.nice();\n                yScale.nice();\n            }\n\n            setData(chart);\n\n            // Fix domain\n            const fixDomain = (domain, boundary, scale, translate) => {\n                if (domain[0] < boundary[0]) {\n                    domain[0] = boundary[0];\n                    if (prevXDomain[0] !== boundary[0] || scale !== prevScale) {\n                        domain[1] += (boundary[0] - domain[0]);\n                    } else {\n                        domain[1] = prevXDomain[1];\n                        translate = _.clone(prevTranslate);\n                    }\n\n                }\n                if (domain[1] > boundary[1]) {\n                    domain[1] = boundary[1];\n                    if (prevXDomain[1] !== boundary[1] || scale !== prevScale) {\n                        domain[0] -= (domain[1] - boundary[1]);\n                    } else {\n                        domain[0] = prevXDomain[0];\n                        translate = _.clone(prevTranslate);\n                    }\n                }\n\n                d3zoom.translate(translate);\n                prevXDomain = _.clone(domain);\n                prevScale = _.clone(scale);\n                prevTranslate = _.clone(translate);\n\n                return domain;\n            }\n\n            const updateChart = () => {\n                d3zoom.scale(1);\n                d3zoom.translate([0, 0]);\n                xScale.domain(x_boundary);\n                d3zoom.x(xScale).y(yScale);\n                svg.call(d3zoom);\n            }\n\n            // Zoom event handler\n            const zoomed = () => {\n                if (( < any > d3.event).scale === 1) {\n                    unzoomed();\n                    updateChart();\n                } else {\n                    xDomain(fixDomain(xScale.domain(), x_boundary, ( < any > d3.event).scale, ( < any > d3.event).translate));\n                    redraw();\n                }\n\n                this.updateScroll(xScale.domain(), x_boundary);\n            }\n\n            // Describe set zoom function\n            this.setZoom = (which) => {\n                const center0 = [svg[0][0].getBBox().width / 2, svg[0][0].getBBox().height / 2];\n                const translate0 = d3zoom.translate(),\n                    coordinates0 = coordinates(center0);\n\n                if (which === 'in') {\n                    if (prevScale < scaleExtent) d3zoom.scale(prevScale + 0.2);\n                } else {\n                    if (prevScale > 1) d3zoom.scale(prevScale - 0.2);\n                }\n\n                const center1 = point(coordinates0);\n                d3zoom.translate([translate0[0] + center0[0] - center1[0], translate0[1] + center0[1] - center1[1]]);\n\n                d3zoom.event(svg);\n            };\n\n            const step = (which) => {\n                const translate = d3zoom.translate();\n\n                if (which === 'right') {\n                    translate[0] -= 20;\n                } else {\n                    translate[0] += 20;\n                }\n\n                d3zoom.translate(translate);\n                d3zoom.event(svg);\n            }\n\n            const coordinates = (point) => {\n                const scale = d3zoom.scale(),\n                    translate = d3zoom.translate();\n                return [(point[0] - translate[0]) / scale, (point[1] - translate[1]) / scale];\n            }\n\n            const point = (coordinates) => {\n                const scale = d3zoom.scale(),\n                    translate = d3zoom.translate();\n                return [coordinates[0] * scale + translate[0], coordinates[1] * scale + translate[1]];\n            }\n\n            const keypress = () => {\n                switch (( < any > d3.event).keyCode) {\n                    case 39:\n                        step('right');\n                        break;\n                    case 37:\n                        step('left');\n                        break;\n                    case 107:\n                        this.setZoom('in');\n                        break;\n                    case 109:\n                        this.setZoom('out');\n                }\n            }\n\n            // Zoom event handler\n            const unzoomed = () => {\n                xDomain(x_boundary);\n                redraw();\n                d3zoom.scale(1);\n                d3zoom.translate([0, 0]);\n                prevScale = 1;\n                prevTranslate = [0, 0];\n            }\n\n            // Initialize wrapper\n            d3zoom.x(xScale)\n                .y(yScale)\n                .scaleExtent([1, scaleExtent])\n                .on('zoom', zoomed);\n\n            // Add handler\n            svg.call(d3zoom).on('dblclick.zoom', unzoomed);\n            $(this.$element.get(0)).addClass('dynamic');\n\n            // Add keyboard handlers\n            svg\n                .attr('focusable', false)\n                .style('outline', 'none')\n                .on('keydown', keypress)\n                .on('focus', () => {});\n\n            const getXMinMax = (data) => {\n                let maxVal, minVal = null;\n\n                for (let i = 0; i < data.length; i++) {\n                    if (!data[i].disabled) {\n                        const tempMinVal = d3.max(data[i].values, (d: any) => {\n                            return this.xFormat ? this.xFormat(d.x) : d.x;\n                        });\n                        const tempMaxVal = d3.min(data[i].values, (d: any) => {\n                            return this.xFormat ? this.xFormat(d.x) : d.x;\n                        });\n                        minVal = (!minVal || tempMinVal < minVal) ? tempMinVal : minVal;\n                        maxVal = (!maxVal || tempMaxVal > maxVal) ? tempMaxVal : maxVal;\n                    }\n                }\n                return [maxVal, minVal];\n            };\n\n            const updateZoomOptions = (data) => {\n                yAxis = chart.yAxis;\n                xAxis = chart.xAxis;\n\n                xScale = xAxis.scale();\n                yScale = yAxis.scale();\n\n                x_boundary = getXMinMax(data);\n\n                if (d3zoom.scale() === 1) {\n                    d3zoom.x(xScale).y(yScale);\n                    svg.call(d3zoom);\n                    d3zoom.event(svg);\n                }\n\n                this.updateScroll(xScale.domain(), x_boundary);\n            }\n        }\n    }\n\n    const LineChart: ng.IComponentOptions = {\n        bindings: LineChartBindings,\n        templateUrl: 'line_chart/LineChart.html',\n        controller: LineChartController\n    }\n\n    angular\n        .module('pipLineCharts', [])\n        .component('pipLineChart', LineChart);\n}","import { IChartColorsService } from '../chart_colors/IChartColorsService';\n\n{\n    interface IPieChartBindings {\n        [key: string]: any;\n\n        series: any;\n        donut: any;\n        legend: any;\n        total: any;\n        size: any;\n        centered: any;\n    }\n\n    const PieChartBindings: IPieChartBindings = {\n        series: '<pipSeries',\n        donut: '<?pipDonut',\n        legend: '<?pipShowLegend',\n        total: '<?pipShowTotal',\n        size: '<?pipPieSize',\n        centered: '<?pipCentered'\n    }\n\n    class PieChartBindingsChanges implements ng.IOnChangesObject, IPieChartBindings {\n        [key: string]: any;\n\n        series: ng.IChangesObject < any > ;\n        donut: ng.IChangesObject < boolean > ;\n        legend: ng.IChangesObject < boolean > ;\n        total: ng.IChangesObject < boolean > ;\n        size: ng.IChangesObject < number | string > ;\n        centered: ng.IChangesObject < boolean > ;\n    }\n\n    class PieChartController implements ng.IController, IPieChartBindings {\n        public series: any;\n        public donut: boolean = false;\n        public legend: boolean = true;\n        public total: boolean = true;\n        public size: number | string = 250;\n        public centered: boolean = false;\n\n        private data: any;\n        private chart: nv.PieChart = null;\n        private chartElem: any;\n        private titleElem: any;\n        private colors: string[];\n\n        constructor(\n            private $element: JQuery,\n            private $scope: ng.IScope,\n            private $timeout: ng.ITimeoutService,\n            private pipChartColors: IChartColorsService\n        ) {\n            \"ngInject\";\n\n            this.colors = this.pipChartColors.generateMaterialColors();\n        }\n\n        public $onInit() {\n            this.data = this.series;\n            this.generateParameterColor();\n            ( < any > d3.scale).paletteColors = () => {\n                return d3.scale.ordinal().range(this.colors.map((color) => {\n                    return this.pipChartColors.materialColorToRgba(color);\n                }));\n            };\n\n            this.instantiateChart();\n        }\n\n        public $onChanges(changes: PieChartBindingsChanges) {\n            this.legend = changes.legend ? changes.legend.currentValue : this.legend;\n            this.centered = changes.centered ? changes.centered.currentValue : this.centered;\n            this.donut = changes.donut ? changes.donut.currentValue : this.donut;\n            this.size = changes.size ? changes.size.currentValue : this.size;\n            this.total = changes.total ? changes.total.currentValue : this.total;\n\n            if (changes.series && changes.series.currentValue !== changes.series.previousValue) {\n                this.data = changes.series.currentValue;\n                this.generateParameterColor();\n\n                if (this.chart) {\n                    this.chartElem.datum(this.data).call(this.chart);\n                    this.$timeout(() => {\n                        this.resizeTitleLabelUnwrap();\n                    });\n                    this.drawEmptyState(d3.select(this.$element.get(0)).select('.pie-chart svg')[0][0]);\n                }\n            }\n        }\n\n        private instantiateChart() {\n            nv.addGraph(() => {\n                this.chart = nv.models.pieChart()\n                    .margin({\n                        top: 0,\n                        right: 0,\n                        bottom: 0,\n                        left: 0\n                    })\n                    .x((d) => {\n                        return this.donut ? d.value : null;\n                    })\n                    .y((d) => {\n                        return d.value;\n                    })\n                    .height(Number(this.size))\n                    .width(Number(this.size))\n                    .showLabels(true)\n                    .labelThreshold(.001)\n                    .growOnHover(false)\n                    .donut(this.donut)\n                    .donutRatio(0.5)\n                    .color((d) => {\n                        return d.color || ( < any > d3.scale).paletteColors().range();\n                    });\n\n                this.chart.tooltip.enabled(false);\n                this.chart.noData('There is no data right now...');\n                this.chart.showLegend(false);\n\n                this.chartElem = d3.select(this.$element.get(0))\n                    .select('.pie-chart')\n                    .style('height', (this.size) + 'px')\n                    .style('width', this.centered ? '100%' : (this.size) + 'px')\n                    .select('svg')\n                    .style('opacity', 0)\n                    .datum(this.data || [])\n                    .call(this.chart);\n\n                nv.utils.windowResize(() => {\n                    this.chart.update();\n                    this.$timeout(() => {\n                        this.resizeTitleLabelUnwrap();\n                    });\n                    this.centerChart();\n                    this.drawEmptyState(d3.select(this.$element.get(0)).select('.pie-chart svg')[0][0]);\n                });\n\n                return this.chart;\n            }, () => {\n                this.$timeout(() => {\n                    const svgElem = d3.select(this.$element.get(0)).select('.pie-chart svg')[0][0];\n                    this.renderTotalLabel(svgElem);\n                    d3.select(svgElem)\n                        .transition()\n                        .duration(1000)\n                        .style('opacity', 1);\n\n                    this.$timeout(() => {\n                        this.resizeTitleLabelUnwrap();\n                    }, 800);\n                    this.centerChart();\n                    this.drawEmptyState(svgElem);\n                });\n            });\n        }\n\n        private drawEmptyState(svg) {\n            if (!this.$element.find('text.nv-noData').get(0)) {\n                d3.select(this.$element.find('.empty-state')[0]).remove();\n                this.$element.find('.pip-empty-pie-text').remove();\n            } else {\n                if (this.$element.find('.pip-empty-pie-text').length === 0) {\n                    this.$element.find('.pie-chart')\n                        .append(\"<div class='pip-empty-pie-text'>There is no data right now...</div>\");\n                }\n\n                const pie = d3.layout.pie().sort(null),\n                    size = Number(this.size);\n\n                const arc = d3.svg.arc()\n                    .innerRadius(size / 2 - 20)\n                    .outerRadius(size / 2 - 57);\n\n                svg = d3.select(svg)\n                    .append(\"g\")\n                    .classed('empty-state', true)\n                    .attr('transform', \"translate(\" + size / 2 + \",\" + size / 2 + \")\");\n\n                const path = svg.selectAll(\"path\")\n                    .data(pie([1]))\n                    .enter().append(\"path\")\n                    .attr(\"fill\", \"rgba(0, 0, 0, 0.08)\")\n                    .attr(\"d\", < any > arc);\n            }\n        }\n\n        private centerChart() {\n            if (this.centered) {\n                const svgElem = d3.select(this.$element.get(0)).select('.pie-chart svg')[0][0],\n                    leftMargin = $(svgElem).innerWidth() / 2 - (Number(this.size) || 250) / 2;\n                d3.select(this.$element.find('.nv-pieChart')[0]).attr('transform', 'translate(' + leftMargin + ', 0)');\n            }\n        }\n\n        private renderTotalLabel(svgElem) {\n            if ((!this.total && !this.donut) || !this.data) return;\n\n            let totalVal = this.data.reduce(function (sum, curr) {\n                return sum + curr.value;\n            }, 0);\n\n            if (totalVal >= 10000) totalVal = (totalVal / 1000).toFixed(1) + 'k';\n\n            d3.select(svgElem)\n                .select('.nv-pie:not(.nvd3)')\n                .append('text')\n                .classed('label-total', true)\n                .attr('text-anchor', 'middle')\n                .style('dominant-baseline', 'central')\n                .text(totalVal);\n\n            this.titleElem = d3.select(this.$element.find('text.label-total').get(0)).style('opacity', 0);\n        }\n\n        private resizeTitleLabelUnwrap() {\n            if ((!this.total && !this.donut) || !this.data) return;\n\n            const boxSize = ( < any > this.$element.find('.nvd3.nv-pieChart').get(0)).getBBox();\n\n            if (!boxSize.width || !boxSize.height) {\n                return;\n            }\n\n            this.titleElem.style('font-size', ~~boxSize.width / 4.5).style('opacity', 1);\n        }\n\n        private generateParameterColor() {\n            if (!this.data) return;\n\n            _.each(this.data, (item: any, index: number) => {\n                item.color = item.color || this.pipChartColors.getMaterialColor(index, this.colors);\n            });\n        }\n\n    }\n\n    const PieChart: ng.IComponentOptions = {\n        bindings: PieChartBindings,\n        templateUrl: 'pie_chart/PieChart.html',\n        controller: PieChartController\n    }\n\n    angular\n        .module('pipPieCharts', [])\n        .component('pipPieChart', PieChart);\n}","(function(module) {\ntry {\n  module = angular.module('pipCharts.Templates');\n} catch (e) {\n  module = angular.module('pipCharts.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('bar_chart/BarChart.html',\n    '<div class=\"bar-chart\"><svg></svg></div><pip-chart-legend ng-show=\"$ctrl.legend\" pip-series=\"$ctrl.legend\" pip-interactive=\"$ctrl.interactiveLegend\"></pip-chart-legend>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipCharts.Templates');\n} catch (e) {\n  module = angular.module('pipCharts.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('chart_legend/ChartInteractiveLegend.html',\n    '<div><div class=\"chart-legend-item\" ng-repeat=\"item in $ctrl.series\" ng-show=\"item.values || item.value\"><md-checkbox ng-model=\"item.disabled\" ng-true-value=\"false\" ng-false-value=\"true\" ng-if=\"$ctrl.interactive\" aria-label=\"{{ item.label }}\"><p class=\"legend-item-value\" ng-if=\"item.value\" ng-style=\"{\\'background-color\\': item.color}\">{{ item.value }}</p><p class=\"legend-item-label\">{{:: item.label || item.key }}</p></md-checkbox><div ng-if=\"!$ctrl.interactive\"><span class=\"bullet\" ng-style=\"{\\'background-color\\': item.color}\"></span> <span>{{:: item.label || item.key}}</span></div></div></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipCharts.Templates');\n} catch (e) {\n  module = angular.module('pipCharts.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('line_chart/LineChart.html',\n    '<div class=\"line-chart\" flex=\"auto\" layout=\"column\"><svg class=\"flex-auto\" ng-class=\"{\\'visible-x-axis\\': $ctrl.showXAxis, \\'visible-y-axis\\': $ctrl.showYAxis}\"></svg><div class=\"scroll-container\"><div class=\"visual-scroll\"><div class=\"scrolled-block\"></div></div></div><md-button class=\"md-fab md-mini minus-button\" ng-click=\"$ctrl.zoomOut()\"><md-icon md-svg-icon=\"icons:minus-circle\"></md-icon></md-button><md-button class=\"md-fab md-mini plus-button\" ng-click=\"$ctrl.zoomIn()\"><md-icon md-svg-icon=\"icons:plus-circle\"></md-icon></md-button></div><pip-chart-legend pip-series=\"$ctrl.legend\" pip-interactive=\"$ctrl.interactiveLegend\"></pip-chart-legend>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipCharts.Templates');\n} catch (e) {\n  module = angular.module('pipCharts.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('pie_chart/PieChart.html',\n    '<div class=\"pie-chart\" ng-class=\"{\\'circle\\': !$ctrl.donut}\"><svg class=\"flex-auto\"></svg></div><pip-chart-legend pip-series=\"$ctrl.data\" pip-interactive=\"false\" ng-if=\"$ctrl.legend\"></pip-chart-legend>');\n}]);\n})();\n\n//# sourceMappingURL=pip-webui-charts-html.min.js.map\n"]}