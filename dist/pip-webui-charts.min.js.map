{"version":3,"sources":["../node_modules/browser-pack/_prelude.js","src/bar_chart/BarChart.ts","src/chart_colors/ChartColorsService.ts","src/chart_legend/ChartInteractiveLegend.ts","src/index.ts","src/line_chart/LineChart.ts","src/pie_chart/PieChart.ts","temp/pip-webui-charts-html.min.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","pip","charts","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","BarChartBindings","series","xTickFormat","yTickFormat","interactiveLegend","BarChartController","BarChartBindingsChanges","$element","$scope","$rootScope","$timeout","pipChartColors","_this","chart","height","spaceAfterBar","spaceAfterMultiBar","colors","generateMaterialColors","$watch","updatedLegend","data","prepareData","legend","updateChart","$inject","prototype","$onInit","_","clone","generateParameterColor","paletteColors","d3","scale","ordinal","range","map","color","materialColorToRgba","instantiateChart","$onChanges","changes","currentValue","previousValue","chartElem","datum","configBarWidthAndLabel","drawEmptyState","nv","models","discreteBarChart","margin","top","right","bottom","x","d","label","key","y","value","showValues","staggerLabels","showXAxis","showYAxis","valueFormat","format","duration","tooltip","enabled","noData","yAxis","tickFormat","xAxis","select","get","style","windowResize","onResize","$on","update","result","seria","disabled","values","push","cloneDeep","find","remove","append","classed","width","innerWidth","attr","getGroupSize","timeout","labels","chartBars","getBBox","groupSize","item","index","barHeight","Number","barWidth","element","transform","translate","transition","getMaterialColor","BarChart","bindings","templateUrl","controller","component","Object","defineProperty","ChartColorsService","$mdColorPalette","palette","filter","isObject","isArray","ChartLegendBindings","interactive","ChartLegendBindingsChanges","ChartLegendController","updateLegends","colorCheckboxes","animate","prepareSeries","checkboxContainers","css","legendTitles","$","addClass","materialColor","ChartLegend","angular","5","6","LineChartBindings","xFormat","xTickValues","dynamic","fixedHeight","dynamicHeight","minHeight","maxHeight","LineChartBindingsChanges","LineChartController","HEIGHT","setZoom","updateZoomOptions","selectAll","updateXTickValues","updateSeries","each","getHeight","Math","min","max","parent","innerHeight","zoomIn","zoomOut","lineChart","left","undefined","useInteractiveGuideline","showLegend","onlyZeroY","yDomain","clipYTick","tickValues","on","tooltipW","bodyWidth","originalEvent","removeTooltip","addZoom","string","substr","v","containerHeight","containerWidth","updateScroll","domains","boundary","bDiff","domDiff","isEqual","svg","xDomain","redraw","xScale","yScale","x_boundary","y_boundary","d3zoom","behavior","zoom","prevXDomain","prevScale","prevTranslate","newChart","domain","slice","nice","zoomed","event","unzoomed","fixDomain","which","translate0","coordinates0","coordinates","center0","center1","point","step","keyCode","scaleExtent","keypress","LineChart","7","PieChartBindings","donut","total","size","centered","PieChartBindingsChanges","PieChartController","resizeTitleLabelUnwrap","pieChart","showLabels","labelThreshold","growOnHover","donutRatio","centerChart","renderTotalLabel","svgElem","layout","pie","sort","arc","innerRadius","outerRadius","enter","leftMargin","totalVal","reduce","sum","curr","toFixed","text","titleElem","boxSize","PieChart","8","run","$templateCache","put"],"mappings":"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","file":"pip-webui-charts.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import { IChartColorsService } from '../chart_colors/IChartColorsService';\r\n\r\n{\r\n    interface IBarChartBindings {\r\n        [key: string]: any;\r\n\r\n        series: any;\r\n        xTickFormat: any;\r\n        yTickFormat: any;\r\n        interactiveLegend: any;\r\n    }\r\n\r\n    const BarChartBindings: IBarChartBindings = {\r\n        series: '<pipSeries',\r\n        xTickFormat: '<?pipXTickFormat',\r\n        yTickFormat: '<?pipYTickFormat',\r\n        interactiveLegend: '<?pipInterLegend'\r\n    }\r\n\r\n    class BarChartBindingsChanges implements IBarChartBindings, ng.IOnChangesObject {\r\n        [key: string]: any;\r\n\r\n        series: ng.IChangesObject<any>;\r\n        xTickFormat: ng.IChangesObject<any>;\r\n        yTickFormat: ng.IChangesObject<any>;\r\n        interactiveLegend: ng.IChangesObject<boolean>;\r\n    }\r\n\r\n    class BarChartController implements ng.IController, IBarChartBindings {\r\n        public series: any;\r\n        public xTickFormat: any;\r\n        public yTickFormat: any;\r\n        public interactiveLegend: boolean;\r\n        public legend: any;\r\n\r\n        private data: any;\r\n        private chart: nv.DiscreteBarChart = null;\r\n        private chartElem: any;\r\n        private colors: string[];\r\n        private height: number = 270;\r\n\r\n        private spaceAfterBar: number = 15;\r\n        private spaceAfterMultiBar: number = 1;\r\n\r\n        constructor(\r\n            private $element: JQuery,\r\n            private $scope: ng.IScope,\r\n            private $rootScope: ng.IRootScopeService,\r\n            private $timeout: ng.ITimeoutService,\r\n            private pipChartColors: IChartColorsService\r\n        ) {\r\n            \"ngInject\";\r\n\r\n            this.colors = this.pipChartColors.generateMaterialColors();\r\n            $scope.$watch('$ctrl.legend', (updatedLegend) => {\r\n                if (!updatedLegend) return;\r\n\r\n                this.data = this.prepareData(updatedLegend);\r\n                this.legend = updatedLegend;\r\n\r\n                this.updateChart();\r\n            }, true);\r\n        }\r\n\r\n        public $onInit() {\r\n            this.data = this.prepareData(this.series);\r\n            this.legend = _.clone(this.series);\r\n            this.generateParameterColor();\r\n            (<any>d3.scale).paletteColors = () => {\r\n                return d3.scale.ordinal().range(this.colors.map((color) => {\r\n                    return this.pipChartColors.materialColorToRgba(color);\r\n                }));\r\n            };\r\n\r\n            this.instantiateChart();\r\n        }\r\n\r\n        public $onChanges(changes: BarChartBindingsChanges) {\r\n            this.xTickFormat = changes.xTickFormat ? changes.xTickFormat.currentValue : null;\r\n            this.yTickFormat = changes.yTickFormat ? changes.yTickFormat.currentValue : null;\r\n            this.interactiveLegend = changes.interactiveLegend ? changes.interactiveLegend.currentValue : null;\r\n\r\n            if (changes.series && changes.series.currentValue !== changes.series.previousValue) {\r\n                this.series = changes.series.currentValue;\r\n                this.data = this.prepareData(this.series);\r\n                this.legend = _.clone(this.series);\r\n                this.generateParameterColor();\r\n                this.updateChart();\r\n            }\r\n        }\r\n\r\n        private updateChart() {\r\n            if (this.chart) {\r\n                this.chartElem.datum(this.data).call(this.chart);\r\n                this.configBarWidthAndLabel();\r\n                this.drawEmptyState();\r\n            }\r\n        }\r\n\r\n        private instantiateChart() {\r\n            nv.addGraph(() => {\r\n                this.chart = nv.models.discreteBarChart()\r\n                    .margin({\r\n                        top: 10,\r\n                        right: 0,\r\n                        bottom: 10\r\n                    })\r\n                    .x((d) => {\r\n                        return d.label || d.key || d.x;\r\n                    })\r\n                    .y((d) => {\r\n                        return d.value;\r\n                    })\r\n                    .showValues(true)\r\n                    .staggerLabels(true)\r\n                    .showXAxis(true)\r\n                    .showYAxis(true)\r\n                    .valueFormat(<any>d3.format('d'))\r\n                    .duration(0)\r\n                    .height(this.height)\r\n                    .color((d) => {\r\n                        return this.data[d.series].color || this.pipChartColors.materialColorToRgba(this.colors[d.series]);\r\n                    });\r\n\r\n                this.chart.tooltip.enabled(false);\r\n                this.chart.noData('There is no data right now...');\r\n\r\n                this.chart.yAxis\r\n                    .tickFormat((d) => {\r\n                        return this.yTickFormat ? this.yTickFormat(d) : d;\r\n                    });\r\n\r\n                this.chart.xAxis\r\n                    .tickFormat((d) => {\r\n                        return this.xTickFormat ? this.xTickFormat(d) : d;\r\n                    });\r\n\r\n                this.chartElem = <any>d3.select(this.$element.get(0))\r\n                    .select('.bar-chart svg')\r\n                    .datum(this.data)\r\n                    .style('height', '305px')\r\n                    .call(this.chart);\r\n\r\n                nv.utils.windowResize(() => {\r\n                    this.onResize();\r\n                });\r\n\r\n                this.$rootScope.$on('pipMainResized', () => {\r\n                    this.onResize();\r\n                });\r\n\r\n                this.$rootScope.$on('pipAuxPanelOpened', () => {\r\n                    this.$timeout(() => {\r\n                        this.onResize();\r\n                    }, 1000);\r\n                });\r\n\r\n                this.$rootScope.$on('pipAuxPanelClosed', () => {\r\n                    this.$timeout(() => {\r\n                        this.onResize();\r\n                    }, 1000);\r\n                });\r\n\r\n                return this.chart;\r\n            }, () => {\r\n                this.$timeout(() => {\r\n                    this.configBarWidthAndLabel(0);\r\n                }, 0);\r\n                this.drawEmptyState();\r\n            });\r\n        }\r\n\r\n        private onResize() {\r\n            this.chart.update();\r\n            this.configBarWidthAndLabel(0);\r\n            this.drawEmptyState();\r\n        }\r\n\r\n        private prepareData(data): any {\r\n            const result = [];\r\n            _.each(data, (seria) => {\r\n                if (!seria.disabled && seria.values) result.push(seria);\r\n            });\r\n            return _.cloneDeep(result);\r\n        }\r\n\r\n        private drawEmptyState() {\r\n            if (this.$element.find('.nv-noData').length === 0) {\r\n                d3.select(this.$element.find('.empty-state')[0]).remove();\r\n            } else {\r\n                const g = this.chartElem.append('g').classed('empty-state', true),\r\n                    width = this.$element.find('.nvd3-svg').innerWidth(),\r\n                    margin = width * 0.1;\r\n\r\n                g.append('g')\r\n                    .style('fill', 'rgba(0, 0, 0, 0.08)')\r\n                    .append('rect')\r\n                    .attr('height', this.height - 10)\r\n                    .attr('width', 38);\r\n\r\n                g.append('g')\r\n                    .attr('transform', 'translate(42, 60)')\r\n                    .style('fill', 'rgba(0, 0, 0, 0.08)')\r\n                    .append('rect')\r\n                    .attr('height', 200)\r\n                    .attr('width', 38);\r\n\r\n                g.append('g')\r\n                    .attr('transform', 'translate(84, 160)')\r\n                    .style('fill', 'rgba(0, 0, 0, 0.08)')\r\n                    .append('rect')\r\n                    .attr('height', 100)\r\n                    .attr('width', 38);\r\n\r\n                g.attr('transform', 'translate(' + (50 + margin) + ', 0), ' + 'scale(' + ((width - 2 * margin) / 126) + ', 1)');\r\n            }\r\n        }\r\n\r\n        private getGroupSize(): number {\r\n            let n: number = 1;\r\n\r\n            for (let i = 0; i < this.data.length; i++) {\r\n                if (this.data[i] && this.data[i].values && this.data[i].values.length > 0) {\r\n                    if (this.data[i].values.length > n) {\r\n                        n = this.data[i].values.length;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return this.data.length;\r\n        }\r\n\r\n        private configBarWidthAndLabel(timeout: number = 1000) {\r\n            const labels = this.$element.find('.nv-bar text'),\r\n                chartBars = this.$element.find('.nv-bar'),\r\n                parentHeight = (<any>this.$element.find('.nvd3-svg')[0]).getBBox().height;\r\n\r\n            d3.select(this.$element.find('.bar-chart')[0]).classed('visible', true);\r\n\r\n            let groupSize = this.getGroupSize();\r\n            let space: number = groupSize == 1 ? this.spaceAfterBar : this.spaceAfterMultiBar;\r\n            let correction = 2;\r\n            if (groupSize > 1) {\r\n                _.each(chartBars, (item: EventTarget, index: number) => {\r\n                    const barHeight = Number(d3.select(item).select('rect').attr('height')),\r\n                        barWidth = Number(d3.select(item).select('rect').attr('width'))/groupSize,\r\n                        element = d3.select(item),\r\n                        x = d3.transform(element.attr('transform')).translate[0],\r\n                        y = d3.transform(element.attr('transform')).translate[1];\r\n    \r\n                    element\r\n                        .attr('transform', 'translate(' + Number(x + index * (barWidth)) + ', ' + (this.height - 20) + ')')\r\n                        .select('rect').attr('height', 0);\r\n    \r\n                    element\r\n                        .transition()\r\n                        .duration(timeout)\r\n                        .attr('transform', 'translate(' + Number(x + index * (barWidth)) + ', ' + y + ')')\r\n                        .select('rect').attr('height', barHeight);\r\n    \r\n                    d3.select(labels[index])\r\n                        .attr('dy', barHeight / 2 + 10)\r\n                        .attr('x', barWidth * groupSize  / 2);\r\n                });\r\n            }\r\n\r\n        }\r\n\r\n        private generateParameterColor() {\r\n            if (!this.data) return;\r\n\r\n            _.each(this.data, (item: any, index: number) => {\r\n                if (item.values[0]) {\r\n                    item.values[0].color = item.values[0].color || this.pipChartColors.getMaterialColor(index, this.colors);\r\n                    item.color = item.values[0].color;\r\n                }\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    const BarChart: ng.IComponentOptions = {\r\n        bindings: BarChartBindings,\r\n        templateUrl: 'bar_chart/BarChart.html',\r\n        controller: BarChartController\r\n    }\r\n\r\n    angular\r\n        .module('pipBarCharts', [])\r\n        .component('pipBarChart', BarChart);\r\n}","import { IChartColorsService } from './IChartColorsService';\r\n\r\n{\r\n    class ChartColorsService implements IChartColorsService {\r\n        constructor(\r\n            private $mdColorPalette: angular.material.IColorPalette\r\n        ) { \r\n            \"ngInject\";\r\n        }\r\n\r\n        public getMaterialColor(index: number, colors: string[]): string {\r\n            if (!colors || colors.length < 1) return null;\r\n\r\n            if (index >= colors.length) {\r\n                index = 0;\r\n            }\r\n\r\n            return this.materialColorToRgba(colors[index]);\r\n        }\r\n\r\n        public materialColorToRgba(color: string): string {\r\n            return 'rgba(' + this.$mdColorPalette[color][500].value[0] + ',' +\r\n                this.$mdColorPalette[color][500].value[1] + ',' +\r\n                this.$mdColorPalette[color][500].value[2] + ',' +\r\n                (this.$mdColorPalette[color][500].value[3] || 1) + ')';\r\n        }\r\n\r\n        public generateMaterialColors(): string[] {\r\n            let colors = _.map((<any>this.$mdColorPalette), (palette, color: string) => {\r\n                return color;\r\n            });\r\n            colors = _.filter(colors, (color: string) => {\r\n                return _.isObject(this.$mdColorPalette[color]) && _.isObject(this.$mdColorPalette[color][500]) && _.isArray(this.$mdColorPalette[color][500].value);\r\n            });\r\n\r\n            return colors;\r\n        }\r\n    }\r\n\r\n    angular\r\n        .module('pipChartColors', [])\r\n        .service('pipChartColors', ChartColorsService);\r\n}","import { IChartColorsService } from '../chart_colors/IChartColorsService';\r\n\r\n{\r\n    interface IChartLegendBindings {\r\n        [key: string]: any;\r\n\r\n        series: any;\r\n        interactive: any;\r\n    }\r\n\r\n    const ChartLegendBindings: IChartLegendBindings = {\r\n        series: '<pipSeries',\r\n        interactive: '<pipInteractive'\r\n    }\r\n\r\n    class ChartLegendBindingsChanges implements ng.IOnChangesObject, IChartLegendBindings {\r\n        [key: string]: any;\r\n\r\n        series: ng.IChangesObject < any > ;\r\n        interactive: ng.IChangesObject < boolean > ;\r\n    }\r\n\r\n    class ChartLegendController implements ng.IController, IChartLegendBindings {\r\n        public series: any;\r\n        public interactive: boolean;\r\n\r\n        private colors: string[];\r\n\r\n        constructor(\r\n            private $element: JQuery,\r\n            private $scope: ng.IScope,\r\n            private $timeout: ng.ITimeoutService,\r\n            private pipChartColors: IChartColorsService\r\n        ) {\r\n            \"ngInject\";\r\n            this.colors = this.pipChartColors.generateMaterialColors();\r\n        }\r\n\r\n        public $onInit() {\r\n            this.updateLegends();\r\n        }\r\n\r\n        public $onChanges(changes: ChartLegendBindingsChanges) {\r\n            if (changes.series && changes.series.currentValue !== changes.series.previousValue) {\r\n                this.series = changes.series.currentValue;\r\n                this.updateLegends();\r\n            }\r\n\r\n            if (changes.interactive && changes.interactive.currentValue !== changes.interactive.previousValue) {\r\n                this.interactive = changes.interactive.currentValue;\r\n                if (this.interactive === true) {\r\n                    this.$timeout(() => {\r\n                        this.colorCheckboxes();\r\n                    }, 0);\r\n                }\r\n            }\r\n        }\r\n\r\n        private updateLegends() {\r\n            this.$timeout(() => {\r\n                this.animate();\r\n                this.colorCheckboxes();\r\n            }, 0);\r\n            this.prepareSeries();\r\n        }\r\n\r\n        private colorCheckboxes() {\r\n            const checkboxContainers = this.$element.find('md-checkbox .md-container');\r\n\r\n            _.each(checkboxContainers, (item: EventTarget, index: number) => {\r\n                if (index >= this.series.length) {\r\n                    return\r\n                }\r\n                $(item)\r\n                    .css('color', this.series[index].color || this.colors[index])\r\n                    .find('.md-icon')\r\n                    .css('background-color', this.series[index].color || this.colors[index]);\r\n            });\r\n        }\r\n\r\n        private animate() {\r\n            const legendTitles = this.$element.find('.chart-legend-item');\r\n\r\n            _.each(legendTitles, (item: EventTarget, index: number) => {\r\n                this.$timeout(() => {\r\n                    $(item).addClass('visible');\r\n                }, 200 * index);\r\n            });\r\n        }\r\n\r\n        private prepareSeries() {\r\n            if (!this.series) return;\r\n\r\n            _.each(this.series, (item: any, index: number) => {\r\n                const materialColor = this.pipChartColors.getMaterialColor(index, this.colors);\r\n                item.color = item.color || (item.values && item.values[0] && item.values[0].color ? item.values[0].color : materialColor);\r\n                item.disabled = item.disabled || false;\r\n            });\r\n        }\r\n    }\r\n\r\n    const ChartLegend: ng.IComponentOptions = {\r\n        bindings: ChartLegendBindings,\r\n        templateUrl: 'chart_legend/ChartInteractiveLegend.html',\r\n        controller: ChartLegendController\r\n    }\r\n\r\n    angular\r\n        .module('pipChartLegends', [])\r\n        .component('pipChartLegend', ChartLegend);\r\n}","﻿angular.module('pipCharts', [\r\n    'pipBarCharts',\r\n    'pipLineCharts',\r\n    'pipPieCharts',\r\n    'pipChartLegends',\r\n    'pipChartColors',\r\n    'pipCharts.Templates'\r\n]);","import { IChartColorsService } from '../chart_colors/IChartColorsService';\r\n\r\n{\r\n    interface ILineChartBindings {\r\n        [key: string]: any;\r\n\r\n        series: any;\r\n        showYAxis: any;\r\n        showXAxis: any;\r\n        xFormat: any;\r\n        xTickFormat: any;\r\n        yTickFormat: any;\r\n        xTickValues: any;\r\n        dynamic: any;\r\n        fixedHeight: any;\r\n        dynamicHeight: any;\r\n        minHeight: any;\r\n        maxHeight: any;\r\n        interactiveLegend: any;\r\n    }\r\n\r\n    const LineChartBindings: ILineChartBindings = {\r\n        series: '<pipSeries',\r\n        showYAxis: '<?pipYAxis',\r\n        showXAxis: '<?pipXAxis',\r\n        xFormat: '<?pipXFormat',\r\n        xTickFormat: '<?pipXTickFormat',\r\n        yTickFormat: '<?pipYTickFormat',\r\n        xTickValues: '<?pipXTickValues',\r\n        dynamic: '<?pipDynamic',\r\n        fixedHeight: '<?pipDiagramHeight',\r\n        dynamicHeight: '<?pipDynamicHeight',\r\n        minHeight: '<?pipMinHeight',\r\n        maxHeight: '<?pipMaxHeight',\r\n        interactiveLegend: '<?pipInterLegend'\r\n    }\r\n\r\n    class LineChartBindingsChanges implements ng.IOnChangesObject, ILineChartBindings {\r\n        [key: string]: any;\r\n\r\n        fixedHeight: ng.IChangesObject<number>;\r\n        dynamicHeight: ng.IChangesObject<boolean>;\r\n        minHeight: ng.IChangesObject<number>;\r\n        maxHeight: ng.IChangesObject<number>;\r\n\r\n        series: ng.IChangesObject<any>;\r\n        showYAxis: ng.IChangesObject<boolean>;\r\n        showXAxis: ng.IChangesObject<boolean>;\r\n        xFormat: ng.IChangesObject<any>;\r\n        xTickFormat: ng.IChangesObject<any>;\r\n        yTickFormat: ng.IChangesObject<any>;\r\n        xTickValues: ng.IChangesObject<any>;\r\n        dynamic: ng.IChangesObject<boolean>;\r\n        interactiveLegend: ng.IChangesObject<boolean>;\r\n    }\r\n\r\n    class LineChartController implements ng.IController, ILineChartBindings {\r\n        private HEIGHT = 270;\r\n        private chart: nv.LineChart = null;\r\n        private chartElem: any = null;\r\n        private setZoom: Function = null;\r\n        private updateZoomOptions: Function = null;\r\n        private colors: string[];\r\n\r\n        public fixedHeight: number = this.HEIGHT;\r\n        public dynamicHeight: boolean = false;\r\n        public minHeight: number = this.HEIGHT;\r\n        public maxHeight: number = this.HEIGHT;\r\n        public series: any;\r\n        public showYAxis: boolean = true;\r\n        public showXAxis: boolean = true;\r\n        public xFormat: Function;\r\n        public xTickFormat: Function;\r\n        public yTickFormat: Function;\r\n        public xTickValues: number[];\r\n        public dynamic: boolean = false;\r\n        public interactiveLegend: boolean = false;\r\n        public data: any;\r\n        public legend: any;\r\n        public sourceEvents: any;\r\n\r\n        constructor(\r\n            private $element: JQuery,\r\n            private $scope: ng.IScope,\r\n            private $rootScope: ng.IRootScopeService,\r\n            private $timeout: ng.ITimeoutService,\r\n            private pipChartColors: IChartColorsService\r\n        ) {\r\n            \"ngInject\";\r\n\r\n            this.colors = this.pipChartColors.generateMaterialColors();\r\n\r\n            $scope.$watch('$ctrl.legend', (updatedLegend) => {\r\n                this.data = this.prepareData(updatedLegend);\r\n                this.legend = updatedLegend;\r\n\r\n                this.updateChart();\r\n            }, true);\r\n\r\n            $scope.$on('$destroy', () => {\r\n                $timeout(() => {\r\n                    d3.selectAll('.nvtooltip').style('opacity', 0);\r\n                }, 800)\r\n            });\r\n        }\r\n\r\n        public $onInit() {\r\n            this.data = this.prepareData(this.series) || [];\r\n            this.legend = _.clone(this.series);\r\n            this.sourceEvents = [];\r\n\r\n            this.generateParameterColor();\r\n\r\n            (<any>d3.scale).paletteColors = () => {\r\n                return d3.scale.ordinal().range(this.colors.map((color) => {\r\n                    return this.pipChartColors.materialColorToRgba(color);\r\n                }));\r\n            };\r\n\r\n            this.instantiateChart();\r\n        }\r\n\r\n        public $onChanges(changes: LineChartBindingsChanges) {\r\n            this.fixedHeight = changes.fixedHeight ? changes.fixedHeight.currentValue : this.HEIGHT;\r\n            this.minHeight = changes.minHeight ? changes.minHeight.currentValue : this.HEIGHT;\r\n            this.maxHeight = changes.maxHeight ? changes.maxHeight.currentValue : this.HEIGHT;\r\n            this.dynamicHeight = changes.dynamicHeight ? changes.dynamicHeight.currentValue : this.dynamicHeight;\r\n\r\n            this.showXAxis = changes.showXAxis ? changes.showXAxis.currentValue : this.showXAxis;\r\n            this.showYAxis = changes.showYAxis ? changes.showYAxis.currentValue : this.showYAxis;\r\n            this.dynamic = changes.dynamic ? changes.dynamic.currentValue : this.dynamic;\r\n            this.interactiveLegend = changes.interactiveLegend ? changes.interactiveLegend.currentValue : this.interactiveLegend;\r\n\r\n            this.xFormat = changes.xFormat ? changes.xFormat.currentValue : this.xFormat;\r\n            this.xTickFormat = changes.xTickFormat ? changes.xTickFormat.currentValue : this.xTickFormat;\r\n            this.yTickFormat = changes.yTickFormat ? changes.yTickFormat.currentValue : this.yTickFormat;\r\n\r\n            if (changes.xTickValues && changes.xTickValues.currentValue !== changes.xTickValues.previousValue) {\r\n                this.xTickValues = changes.xTickValues.currentValue;\r\n                this.updateXTickValues();\r\n                if (this.chartElem && this.chart) this.chartElem.datum(this.data || []).call(this.chart);\r\n            }\r\n\r\n            if (changes.series && changes.series.currentValue !== changes.series.previousValue) {\r\n                this.updateSeries();\r\n            }\r\n        }\r\n\r\n        private prepareData(data) {\r\n            const result = [];\r\n            _.each(data, (seria) => {\r\n                if (!seria.disabled && seria.values) result.push(seria);\r\n            });\r\n\r\n            return _.cloneDeep(result);\r\n        }\r\n\r\n        private getHeight() {\r\n            /*if (this.dynamicHeight) {\r\n                const heigth = Math.min(Math.max(this.minHeight, this.$element.parent().innerHeight()), this.maxHeight);\r\n                return heigth;\r\n            } else {\r\n                return this.fixedHeight;\r\n            }*/\r\n            return this.dynamicHeight ? Math.min(Math.max(this.minHeight, this.$element.parent().innerHeight()), this.maxHeight) : this.fixedHeight;\r\n        };\r\n\r\n        public zoomIn() {\r\n            if (this.setZoom) {\r\n                this.setZoom('in');\r\n            }\r\n        };\r\n\r\n        public zoomOut() {\r\n            if (this.setZoom) {\r\n                this.setZoom('out');\r\n            }\r\n        };\r\n\r\n        private instantiateChart() {\r\n            nv.addGraph(() => {\r\n                this.chart = nv.models.lineChart()\r\n                    .margin({\r\n                        top: 20,\r\n                        right: 20,\r\n                        bottom: 30,\r\n                        left: 80\r\n                    })\r\n                    .x((d) => {\r\n                        return (d !== undefined && d.x !== undefined) ? (this.xFormat ? this.xFormat(d.x) : d.x) : d;\r\n                    })\r\n                    .y((d) => {\r\n                        return (d !== undefined && d.value !== undefined) ? d.value : d;\r\n                    })\r\n                    .height(this.getHeight() - 50)\r\n                    .useInteractiveGuideline(true)\r\n                    .showXAxis(true)\r\n                    .showYAxis(true)\r\n                    .showLegend(false)\r\n                    .color((d) => {\r\n                        return d.color || (<any>d3.scale).paletteColors().range();\r\n                    });\r\n                if (this.onlyZeroY()) {\r\n                    this.chart.yDomain([0, 5]);\r\n                }\r\n\r\n                this.chart.tooltip.enabled(false);\r\n                this.chart.noData('There is no data right now...');\r\n\r\n                this.chart.yAxis\r\n                    .tickFormat((d: any) => {\r\n                        let y = this.yTickFormat ? this.yTickFormat(d) : d;\r\n\r\n                        return this.clipYTick(y);\r\n                    });\r\n\r\n                this.chart.xAxis\r\n                    .tickFormat((d) => {\r\n                        return this.xTickFormat ? this.xTickFormat(d) : d;\r\n                    })\r\n                    .tickValues(this.xTickValues && _.isArray(this.xTickValues) && this.xTickValues.length > 2 ?\r\n                        d3.range(this.xTickValues[0], this.xTickValues[1], this.xTickValues[2]) : null);\r\n\r\n                this.chartElem = d3.select(this.$element.get(0)).select('.line-chart svg');\r\n                this.chartElem.datum(this.data || []).style('height', (this.getHeight() - 50) + 'px').call(this.chart);\r\n                // Handle touches for correcting tooltip position\r\n                $('.line-chart svg').on('touchstart touchmove', (e) => {\r\n                    this.$timeout(() => {\r\n                        const tooltip = $('.nvtooltip'),\r\n                            tooltipW = tooltip.innerWidth(),\r\n                            bodyWidth = $('body').innerWidth(),\r\n                            x = e.originalEvent['touches'][0]['pageX'],\r\n                            y = e.originalEvent['touches'][0]['pageY'];\r\n\r\n                        tooltip.css('transform', 'translate(' +\r\n                            (x + tooltipW >= bodyWidth ? (x - tooltipW) : x) + ',' +\r\n                            y + ')');\r\n                        tooltip.css('left', 0);\r\n                        tooltip.css('top', 0);\r\n                    });\r\n                });\r\n\r\n                $('.line-chart svg').on('touchstart touchend', (e) => {\r\n                    const removeTooltip = () => {\r\n                        $('.nvtooltip').css('opacity', 0);\r\n                    };\r\n\r\n                    removeTooltip();\r\n\r\n                    this.$timeout(() => {\r\n                        removeTooltip();\r\n                    }, 500);\r\n                });\r\n\r\n                if (this.dynamic) {\r\n                    this.addZoom(this.chart, this.chartElem);\r\n                }\r\n\r\n                nv.utils.windowResize(() => {\r\n                    this.onResize();\r\n                });\r\n\r\n                this.$rootScope.$on('pipMainResized', () => {\r\n                    this.onResize();\r\n                });\r\n\r\n                this.$rootScope.$on('pipAuxPanelOpened', () => {\r\n                    this.$timeout(() => {\r\n                        this.onResize();\r\n                    }, 1500);\r\n                });\r\n\r\n                this.$rootScope.$on('pipAuxPanelClosed', () => {\r\n                    this.$timeout(() => {\r\n                        this.onResize();\r\n                    }, 1500);\r\n                });\r\n\r\n                return this.chart;\r\n            }, () => {\r\n                this.drawEmptyState();\r\n            });\r\n        }\r\n\r\n        private clipYTick(string: String): any {\r\n            return string.length > 12 ? (string.substr(0, 10) + '..') : string;\r\n        }\r\n\r\n        private onlyZeroY() {\r\n            for (let seria in this.data) {\r\n                for (let v in this.data[seria]['values']) {\r\n                    if (this.data[seria]['values'][v]['value'] != 0) return false;\r\n                };\r\n            };\r\n\r\n            return true;\r\n        }\r\n\r\n        private updateXTickValues() {\r\n            if (!this.chart) return;\r\n\r\n            this.chart.xAxis\r\n                .tickValues(this.xTickValues && _.isArray(this.xTickValues) && this.xTickValues.length > 2 ?\r\n                    d3.range(this.xTickValues[0], this.xTickValues[1], this.xTickValues[2]) : null);\r\n        }\r\n\r\n        private updateChart() {\r\n            if (this.chart) {\r\n                this.updateXTickValues();\r\n\r\n                this.chartElem.datum(this.data || []).call(this.chart);\r\n                this.drawEmptyState();\r\n\r\n                if (this.updateZoomOptions) this.updateZoomOptions(this.data);\r\n            }\r\n        }\r\n\r\n        private updateSeries() {\r\n            this.data = this.prepareData(this.series);\r\n            this.legend = _.clone(this.series);\r\n\r\n            this.generateParameterColor();\r\n            this.updateChart();\r\n        }\r\n\r\n        private onResize() {\r\n            this.chart.height(this.getHeight() - 50);\r\n            this.chartElem.style('height', (this.getHeight() - 50) + 'px');\r\n            this.chart.update();\r\n            this.drawEmptyState();\r\n        }\r\n\r\n        private drawEmptyState() {\r\n            if (!this.$element.find('text.nv-noData').get(0)) {\r\n                d3.select(this.$element.find('.empty-state')[0]).remove();\r\n            } else {\r\n                const containerWidth = this.$element.find('.line-chart').innerWidth(),\r\n                    containerHeight = this.$element.find('.line-chart').innerHeight();\r\n\r\n                if (this.$element.find('.empty-state').get(0)) {\r\n                    this.chartElem\r\n                        .select('image')\r\n                        .attr('transform', 'scale(' + (containerWidth / 1151) + ',' + (containerHeight / 216) + ')');\r\n                } else {\r\n                    this.chartElem\r\n                        .append(\"defs\")\r\n                        .append(\"pattern\")\r\n                        .attr(\"height\", 1)\r\n                        .attr(\"width\", 1)\r\n                        .attr(\"x\", \"0\")\r\n                        .attr(\"y\", \"0\")\r\n                        .attr(\"id\", \"bg\")\r\n                        .append(\"image\")\r\n                        .attr('x', 17)\r\n                        .attr('y', 0)\r\n                        .attr('height', \"216px\")\r\n                        .attr('width', \"1151px\")\r\n                        .attr('transform', 'scale(' + (containerWidth / 1151) + ',' + (containerHeight / 216) + ')')\r\n                        .attr(\"xlink:href\", \"images/line_chart_empty_state.svg\");\r\n\r\n                    this.chartElem\r\n                        .append('rect')\r\n                        .classed('empty-state', true)\r\n                        .attr('height', \"100%\")\r\n                        .attr('width', \"100%\")\r\n                        .attr('fill', 'url(#bg)');\r\n                }\r\n            }\r\n        }\r\n\r\n        private updateScroll(domains, boundary) {\r\n            const bDiff = boundary[1] - boundary[0],\r\n                domDiff = domains[1] - domains[0],\r\n                isEqual = domDiff / bDiff === 1;\r\n\r\n            $(this.$element[0]).find('.visual-scroll')\r\n                .css('opacity', function () {\r\n                    return isEqual ? 0 : 1;\r\n                });\r\n\r\n            if (isEqual) return;\r\n\r\n            $(this.$element[0]).find('.scrolled-block')\r\n                .css('left', () => {\r\n                    return (domains[0] - boundary[0]) / bDiff * 100 + '%';\r\n                })\r\n                .css('width', () => {\r\n                    return domDiff / bDiff * 100 + '%';\r\n                });\r\n        }\r\n\r\n        private generateParameterColor() {\r\n            if (!this.data) return;\r\n\r\n            _.each(this.data, (item, index: number) => {\r\n                item.color = item.color || this.pipChartColors.getMaterialColor(index, this.colors);\r\n            });\r\n        }\r\n\r\n        private addZoom(chart, svg) {\r\n            // Scale Extent\r\n            const scaleExtent = 4;\r\n\r\n            // Parameters\r\n            let yAxis = null;\r\n            let xAxis = null;\r\n            let xDomain = null;\r\n            let yDomain = null;\r\n            let redraw = null;\r\n\r\n            // Scales\r\n            let xScale = null;\r\n            let yScale = null;\r\n\r\n            // Min/max boundaries\r\n            let x_boundary = null;\r\n            let y_boundary = null;\r\n\r\n            // Create d3 zoom handler\r\n            let d3zoom = d3.behavior.zoom();\r\n            let prevXDomain = null;\r\n            let prevScale = null;\r\n            let prevTranslate = null;\r\n\r\n            const setData = (newChart) => {\r\n                // Parameters\r\n                yAxis = newChart.yAxis;\r\n                xAxis = newChart.xAxis;\r\n                xDomain = newChart.xDomain || xAxis.scale().domain;\r\n                yDomain = newChart.yDomain || yAxis.scale().domain;\r\n                redraw = newChart.update;\r\n\r\n                // Scales\r\n                xScale = xAxis.scale();\r\n                yScale = yAxis.scale();\r\n\r\n                // Min/max boundaries\r\n                x_boundary = xAxis.scale().domain().slice();\r\n                y_boundary = yAxis.scale().domain().slice();\r\n\r\n                // Create d3 zoom handler\r\n                prevXDomain = x_boundary;\r\n                prevScale = d3zoom.scale();\r\n                prevTranslate = d3zoom.translate();\r\n\r\n                // Ensure nice axis\r\n                xScale.nice();\r\n                yScale.nice();\r\n            }\r\n\r\n            setData(chart);\r\n\r\n            // Fix domain\r\n            const fixDomain = (domain, boundary, scale, translate) => {\r\n                if (domain[0] < boundary[0]) {\r\n                    domain[0] = boundary[0];\r\n                    if (prevXDomain[0] !== boundary[0] || scale !== prevScale) {\r\n                        domain[1] += (boundary[0] - domain[0]);\r\n                    } else {\r\n                        domain[1] = prevXDomain[1];\r\n                        translate = _.clone(prevTranslate);\r\n                    }\r\n\r\n                }\r\n                if (domain[1] > boundary[1]) {\r\n                    domain[1] = boundary[1];\r\n                    if (prevXDomain[1] !== boundary[1] || scale !== prevScale) {\r\n                        domain[0] -= (domain[1] - boundary[1]);\r\n                    } else {\r\n                        domain[0] = prevXDomain[0];\r\n                        translate = _.clone(prevTranslate);\r\n                    }\r\n                }\r\n\r\n                d3zoom.translate(translate);\r\n                prevXDomain = _.clone(domain);\r\n                prevScale = _.clone(scale);\r\n                prevTranslate = _.clone(translate);\r\n\r\n                return domain;\r\n            }\r\n\r\n            const updateChart = () => {\r\n                d3zoom.scale(1);\r\n                d3zoom.translate([0, 0]);\r\n                xScale.domain(x_boundary);\r\n                d3zoom.x(xScale).y(yScale);\r\n                svg.call(d3zoom);\r\n            }\r\n\r\n            // Zoom event handler\r\n            const zoomed = () => {\r\n                if ((<any>d3.event).scale === 1) {\r\n                    unzoomed();\r\n                    updateChart();\r\n                } else {\r\n                    xDomain(fixDomain(xScale.domain(), x_boundary, (<any>d3.event).scale, (<any>d3.event).translate));\r\n                    redraw();\r\n                }\r\n\r\n                this.updateScroll(xScale.domain(), x_boundary);\r\n            }\r\n\r\n            // Describe set zoom function\r\n            this.setZoom = (which) => {\r\n                const center0 = [svg[0][0].getBBox().width / 2, svg[0][0].getBBox().height / 2];\r\n                const translate0 = d3zoom.translate(),\r\n                    coordinates0 = coordinates(center0);\r\n\r\n                if (which === 'in') {\r\n                    if (prevScale < scaleExtent) d3zoom.scale(prevScale + 0.2);\r\n                } else {\r\n                    if (prevScale > 1) d3zoom.scale(prevScale - 0.2);\r\n                }\r\n\r\n                const center1 = point(coordinates0);\r\n                d3zoom.translate([translate0[0] + center0[0] - center1[0], translate0[1] + center0[1] - center1[1]]);\r\n\r\n                d3zoom.event(svg);\r\n            };\r\n\r\n            const step = (which) => {\r\n                const translate = d3zoom.translate();\r\n\r\n                if (which === 'right') {\r\n                    translate[0] -= 20;\r\n                } else {\r\n                    translate[0] += 20;\r\n                }\r\n\r\n                d3zoom.translate(translate);\r\n                d3zoom.event(svg);\r\n            }\r\n\r\n            const coordinates = (point) => {\r\n                const scale = d3zoom.scale(),\r\n                    translate = d3zoom.translate();\r\n                return [(point[0] - translate[0]) / scale, (point[1] - translate[1]) / scale];\r\n            }\r\n\r\n            const point = (coordinates) => {\r\n                const scale = d3zoom.scale(),\r\n                    translate = d3zoom.translate();\r\n                return [coordinates[0] * scale + translate[0], coordinates[1] * scale + translate[1]];\r\n            }\r\n\r\n            const keypress = () => {\r\n                switch ((<any>d3.event).keyCode) {\r\n                    case 39:\r\n                        step('right');\r\n                        break;\r\n                    case 37:\r\n                        step('left');\r\n                        break;\r\n                    case 107:\r\n                        this.setZoom('in');\r\n                        break;\r\n                    case 109:\r\n                        this.setZoom('out');\r\n                }\r\n            }\r\n\r\n            // Zoom event handler\r\n            const unzoomed = () => {\r\n                xDomain(x_boundary);\r\n                redraw();\r\n                d3zoom.scale(1);\r\n                d3zoom.translate([0, 0]);\r\n                prevScale = 1;\r\n                prevTranslate = [0, 0];\r\n            }\r\n\r\n            // Initialize wrapper\r\n            d3zoom.x(xScale)\r\n                .y(yScale)\r\n                .scaleExtent([1, scaleExtent])\r\n                .on('zoom', zoomed);\r\n\r\n            // Add handler\r\n            svg.call(d3zoom).on('dblclick.zoom', unzoomed);\r\n            $(this.$element.get(0)).addClass('dynamic');\r\n\r\n            // Add keyboard handlers\r\n            svg\r\n                .attr('focusable', false)\r\n                .style('outline', 'none')\r\n                .on('keydown', keypress)\r\n                .on('focus', () => { });\r\n\r\n            const getXMinMax = (data) => {\r\n                let maxVal, minVal = null;\r\n\r\n                for (let i = 0; i < data.length; i++) {\r\n                    if (!data[i].disabled) {\r\n                        const tempMinVal = d3.max(data[i].values, (d: any) => {\r\n                            return this.xFormat ? this.xFormat(d.x) : d.x;\r\n                        });\r\n                        const tempMaxVal = d3.min(data[i].values, (d: any) => {\r\n                            return this.xFormat ? this.xFormat(d.x) : d.x;\r\n                        });\r\n                        minVal = (!minVal || tempMinVal < minVal) ? tempMinVal : minVal;\r\n                        maxVal = (!maxVal || tempMaxVal > maxVal) ? tempMaxVal : maxVal;\r\n                    }\r\n                }\r\n                return [maxVal, minVal];\r\n            };\r\n\r\n            const updateZoomOptions = (data) => {\r\n                yAxis = chart.yAxis;\r\n                xAxis = chart.xAxis;\r\n\r\n                xScale = xAxis.scale();\r\n                yScale = yAxis.scale();\r\n\r\n                x_boundary = getXMinMax(data);\r\n\r\n                if (d3zoom.scale() === 1) {\r\n                    d3zoom.x(xScale).y(yScale);\r\n                    svg.call(d3zoom);\r\n                    d3zoom.event(svg);\r\n                }\r\n\r\n                this.updateScroll(xScale.domain(), x_boundary);\r\n            }\r\n        }\r\n    }\r\n\r\n    const LineChart: ng.IComponentOptions = {\r\n        bindings: LineChartBindings,\r\n        templateUrl: 'line_chart/LineChart.html',\r\n        controller: LineChartController\r\n    }\r\n\r\n    angular\r\n        .module('pipLineCharts', [])\r\n        .component('pipLineChart', LineChart);\r\n}","import { IChartColorsService } from '../chart_colors/IChartColorsService';\r\n\r\n{\r\n    interface IPieChartBindings {\r\n        [key: string]: any;\r\n\r\n        series: any;\r\n        donut: any;\r\n        legend: any;\r\n        total: any;\r\n        size: any;\r\n        centered: any;\r\n    }\r\n\r\n    const PieChartBindings: IPieChartBindings = {\r\n        series: '<pipSeries',\r\n        donut: '<?pipDonut',\r\n        legend: '<?pipShowLegend',\r\n        total: '<?pipShowTotal',\r\n        size: '<?pipPieSize',\r\n        centered: '<?pipCentered'\r\n    }\r\n\r\n    class PieChartBindingsChanges implements ng.IOnChangesObject, IPieChartBindings {\r\n        [key: string]: any;\r\n\r\n        series: ng.IChangesObject < any > ;\r\n        donut: ng.IChangesObject < boolean > ;\r\n        legend: ng.IChangesObject < boolean > ;\r\n        total: ng.IChangesObject < boolean > ;\r\n        size: ng.IChangesObject < number | string > ;\r\n        centered: ng.IChangesObject < boolean > ;\r\n    }\r\n\r\n    class PieChartController implements ng.IController, IPieChartBindings {\r\n        public series: any;\r\n        public donut: boolean = false;\r\n        public legend: boolean = true;\r\n        public total: boolean = true;\r\n        public size: number | string = 250;\r\n        public centered: boolean = false;\r\n\r\n        private data: any;\r\n        private chart: nv.PieChart = null;\r\n        private chartElem: any;\r\n        private titleElem: any;\r\n        private colors: string[];\r\n\r\n        constructor(\r\n            private $element: JQuery,\r\n            private $scope: ng.IScope,\r\n            private $timeout: ng.ITimeoutService,\r\n            private pipChartColors: IChartColorsService\r\n        ) {\r\n            \"ngInject\";\r\n\r\n            this.colors = this.pipChartColors.generateMaterialColors();\r\n        }\r\n\r\n        public $onInit() {\r\n            this.data = this.series;\r\n            this.generateParameterColor();\r\n            ( < any > d3.scale).paletteColors = () => {\r\n                return d3.scale.ordinal().range(this.colors.map((color) => {\r\n                    return this.pipChartColors.materialColorToRgba(color);\r\n                }));\r\n            };\r\n\r\n            this.instantiateChart();\r\n        }\r\n\r\n        public $onChanges(changes: PieChartBindingsChanges) {\r\n            this.legend = changes.legend ? changes.legend.currentValue : this.legend;\r\n            this.centered = changes.centered ? changes.centered.currentValue : this.centered;\r\n            this.donut = changes.donut ? changes.donut.currentValue : this.donut;\r\n            this.size = changes.size ? changes.size.currentValue : this.size;\r\n            this.total = changes.total ? changes.total.currentValue : this.total;\r\n\r\n            if (changes.series && changes.series.currentValue !== changes.series.previousValue) {\r\n                this.data = changes.series.currentValue;\r\n                this.generateParameterColor();\r\n\r\n                if (this.chart) {\r\n                    this.chartElem.datum(this.data).call(this.chart);\r\n                    this.$timeout(() => {\r\n                        this.resizeTitleLabelUnwrap();\r\n                    });\r\n                    this.drawEmptyState(d3.select(this.$element.get(0)).select('.pie-chart svg')[0][0]);\r\n                }\r\n            }\r\n        }\r\n\r\n        private instantiateChart() {\r\n            nv.addGraph(() => {\r\n                this.chart = nv.models.pieChart()\r\n                    .margin({\r\n                        top: 0,\r\n                        right: 0,\r\n                        bottom: 0,\r\n                        left: 0\r\n                    })\r\n                    .x((d) => {\r\n                        return this.donut ? d.value : null;\r\n                    })\r\n                    .y((d) => {\r\n                        return d.value;\r\n                    })\r\n                    .height(Number(this.size))\r\n                    .width(Number(this.size))\r\n                    .showLabels(true)\r\n                    .labelThreshold(.001)\r\n                    .growOnHover(false)\r\n                    .donut(this.donut)\r\n                    .donutRatio(0.5)\r\n                    .color((d) => {\r\n                        return d.color || ( < any > d3.scale).paletteColors().range();\r\n                    });\r\n\r\n                this.chart.tooltip.enabled(false);\r\n                this.chart.noData('There is no data right now...');\r\n                this.chart.showLegend(false);\r\n\r\n                this.chartElem = d3.select(this.$element.get(0))\r\n                    .select('.pie-chart')\r\n                    .style('height', (this.size) + 'px')\r\n                    .style('width', this.centered ? '100%' : (this.size) + 'px')\r\n                    .select('svg')\r\n                    .style('opacity', 0)\r\n                    .datum(this.data || [])\r\n                    .call(this.chart);\r\n\r\n                nv.utils.windowResize(() => {\r\n                    this.chart.update();\r\n                    this.$timeout(() => {\r\n                        this.resizeTitleLabelUnwrap();\r\n                    });\r\n                    this.centerChart();\r\n                    this.drawEmptyState(d3.select(this.$element.get(0)).select('.pie-chart svg')[0][0]);\r\n                });\r\n\r\n                return this.chart;\r\n            }, () => {\r\n                this.$timeout(() => {\r\n                    const svgElem = d3.select(this.$element.get(0)).select('.pie-chart svg')[0][0];\r\n                    this.renderTotalLabel(svgElem);\r\n                    d3.select(svgElem)\r\n                        .transition()\r\n                        .duration(1000)\r\n                        .style('opacity', 1);\r\n\r\n                    this.$timeout(() => {\r\n                        this.resizeTitleLabelUnwrap();\r\n                    }, 800);\r\n                    this.centerChart();\r\n                    this.drawEmptyState(svgElem);\r\n                });\r\n            });\r\n        }\r\n\r\n        private drawEmptyState(svg) {\r\n            if (!this.$element.find('text.nv-noData').get(0)) {\r\n                d3.select(this.$element.find('.empty-state')[0]).remove();\r\n                this.$element.find('.pip-empty-pie-text').remove();\r\n            } else {\r\n                if (this.$element.find('.pip-empty-pie-text').length === 0) {\r\n                    this.$element.find('.pie-chart')\r\n                        .append(\"<div class='pip-empty-pie-text'>There is no data right now...</div>\");\r\n                }\r\n\r\n                const pie = d3.layout.pie().sort(null),\r\n                    size = Number(this.size);\r\n\r\n                const arc = d3.svg.arc()\r\n                    .innerRadius(size / 2 - 20)\r\n                    .outerRadius(size / 2 - 57);\r\n\r\n                svg = d3.select(svg)\r\n                    .append(\"g\")\r\n                    .classed('empty-state', true)\r\n                    .attr('transform', \"translate(\" + size / 2 + \",\" + size / 2 + \")\");\r\n\r\n                const path = svg.selectAll(\"path\")\r\n                    .data(pie([1]))\r\n                    .enter().append(\"path\")\r\n                    .attr(\"fill\", \"rgba(0, 0, 0, 0.08)\")\r\n                    .attr(\"d\", < any > arc);\r\n            }\r\n        }\r\n\r\n        private centerChart() {\r\n            if (this.centered) {\r\n                const svgElem = d3.select(this.$element.get(0)).select('.pie-chart svg')[0][0],\r\n                    leftMargin = $(svgElem).innerWidth() / 2 - (Number(this.size) || 250) / 2;\r\n                d3.select(this.$element.find('.nv-pieChart')[0]).attr('transform', 'translate(' + leftMargin + ', 0)');\r\n            }\r\n        }\r\n\r\n        private renderTotalLabel(svgElem) {\r\n            if ((!this.total && !this.donut) || !this.data) return;\r\n\r\n            let totalVal = this.data.reduce(function (sum, curr) {\r\n                return sum + curr.value;\r\n            }, 0);\r\n\r\n            if (totalVal >= 10000) totalVal = (totalVal / 1000).toFixed(1) + 'k';\r\n\r\n            d3.select(svgElem)\r\n                .select('.nv-pie:not(.nvd3)')\r\n                .append('text')\r\n                .classed('label-total', true)\r\n                .attr('text-anchor', 'middle')\r\n                .style('dominant-baseline', 'central')\r\n                .text(totalVal);\r\n\r\n            this.titleElem = d3.select(this.$element.find('text.label-total').get(0)).style('opacity', 0);\r\n        }\r\n\r\n        private resizeTitleLabelUnwrap() {\r\n            if ((!this.total && !this.donut) || !this.data) return;\r\n\r\n            const boxSize = ( < any > this.$element.find('.nvd3.nv-pieChart').get(0)).getBBox();\r\n\r\n            if (!boxSize.width || !boxSize.height) {\r\n                return;\r\n            }\r\n\r\n            this.titleElem.style('font-size', ~~boxSize.width / 4.5).style('opacity', 1);\r\n        }\r\n\r\n        private generateParameterColor() {\r\n            if (!this.data) return;\r\n\r\n            _.each(this.data, (item: any, index: number) => {\r\n                item.color = item.color || this.pipChartColors.getMaterialColor(index, this.colors);\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    const PieChart: ng.IComponentOptions = {\r\n        bindings: PieChartBindings,\r\n        templateUrl: 'pie_chart/PieChart.html',\r\n        controller: PieChartController\r\n    }\r\n\r\n    angular\r\n        .module('pipPieCharts', [])\r\n        .component('pipPieChart', PieChart);\r\n}","(function(module) {\ntry {\n  module = angular.module('pipCharts.Templates');\n} catch (e) {\n  module = angular.module('pipCharts.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('bar_chart/BarChart.html',\n    '<div class=\"bar-chart\"><svg></svg></div><pip-chart-legend ng-show=\"$ctrl.legend\" pip-series=\"$ctrl.legend\" pip-interactive=\"$ctrl.interactiveLegend\"></pip-chart-legend>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipCharts.Templates');\n} catch (e) {\n  module = angular.module('pipCharts.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('chart_legend/ChartInteractiveLegend.html',\n    '<div><div class=\"chart-legend-item\" ng-repeat=\"item in $ctrl.series\" ng-show=\"item.values || item.value\"><md-checkbox ng-model=\"item.disabled\" ng-true-value=\"false\" ng-false-value=\"true\" ng-if=\"$ctrl.interactive\" aria-label=\"{{ item.label }}\"><p class=\"legend-item-value\" ng-if=\"item.value\" ng-style=\"{\\'background-color\\': item.color}\">{{ item.value }}</p><p class=\"legend-item-label\">{{:: item.label || item.key }}</p></md-checkbox><div ng-if=\"!$ctrl.interactive\"><span class=\"bullet\" ng-style=\"{\\'background-color\\': item.color}\"></span> <span>{{:: item.label || item.key}}</span></div></div></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipCharts.Templates');\n} catch (e) {\n  module = angular.module('pipCharts.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('line_chart/LineChart.html',\n    '<div class=\"line-chart\" flex=\"auto\" layout=\"column\"><svg class=\"flex-auto\" ng-class=\"{\\'visible-x-axis\\': $ctrl.showXAxis, \\'visible-y-axis\\': $ctrl.showYAxis}\"></svg><div class=\"scroll-container\"><div class=\"visual-scroll\"><div class=\"scrolled-block\"></div></div></div><md-button class=\"md-fab md-mini minus-button\" ng-click=\"$ctrl.zoomOut()\"><md-icon md-svg-icon=\"icons:minus-circle\"></md-icon></md-button><md-button class=\"md-fab md-mini plus-button\" ng-click=\"$ctrl.zoomIn()\"><md-icon md-svg-icon=\"icons:plus-circle\"></md-icon></md-button></div><pip-chart-legend pip-series=\"$ctrl.legend\" pip-interactive=\"$ctrl.interactiveLegend\"></pip-chart-legend>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipCharts.Templates');\n} catch (e) {\n  module = angular.module('pipCharts.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('pie_chart/PieChart.html',\n    '<div class=\"pie-chart\" ng-class=\"{\\'circle\\': !$ctrl.donut}\"><svg class=\"flex-auto\"></svg></div><pip-chart-legend pip-series=\"$ctrl.data\" pip-interactive=\"false\" ng-if=\"$ctrl.legend\"></pip-chart-legend>');\n}]);\n})();\n\n//# sourceMappingURL=pip-webui-charts-html.min.js.map\n"]}