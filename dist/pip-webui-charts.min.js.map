{"version":3,"sources":["bar/bar_chart.html","legend/interactive_legend.html","line/line_chart.html","pie/pie_chart.html","charts.ts","bar/bar_chart.ts","legend/interactive_legend.ts","line/line_chart.ts","pie/pie_chart.ts"],"names":["module","angular","e","run","$templateCache","put","pipBarChart","restrict","scope","series","bindToController","controllerAs","templateUrl","controller","$element","$scope","$timeout","$interval","$mdColorPalette","configBarWidthAndLabel","labels","d3","selectAll","chartBars","parentHeight","select","getBBox","height","classed","forEach","item","index","barSize","element","y","transform","attr","translate","Number","transition","duration","materialColorToRgba","color","value","generateParameterColor","vm","legend","colors","this","chart","chartElem","_","map","palette","data","length","slice","values","scale","paletteColors","ordinal","range","$watch","updatedSeries","datum","call","update","nv","addGraph","models","discreteBarChart","margin","top","right","bottom","left","x","d","label","showValues","showXAxis","showYAxis","valueFormat","format","tooltip","enabled","noData","get","style","dispatch","on","directive","pipChartLegend","interactive","colorCheckboxes","checkboxContainers","$","find","each","css","animate","legendTitles","addClass","prepareSeries","disabled","hex","newValue","oldValue","pipLineChart","dynamic","updateScroll","domains","boundary","bDiff","domDiff","isEqual","addZoom","options","fixDomain","domain","prevXDomain","prevScale","clone","prevTranslate","d3zoom","zoomed","event","unzoomed","xDomain","xScale","x_boundary","redraw","step","which","svg","coordinates","point","keypress","keyCode","setZoom","yDomain","y_boundary","scaleExtent","yAxis","xAxis","discrete","yScale","behavior","zoom","nice","center0","width","translate0","coordinates0","center1","sourceEvents","isVisibleX","undefined","isVisibleY","zoomIn","zoomOut","lineChart","showLegend","tickFormat","toFixed","utils","windowResize","pipPieChart","renderTotalLabel","svgElem","totalVal","reduce","sum","curr","append","text","titleElem","resizeTitleLabel","resizeTitleLabelUnwrap","boxSize","newVal","pieChart","showLabels","labelThreshold","growOnHover","donut","donutRatio"],"mappings":"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","file":"pip-webui-charts.min.js","sourcesContent":["<div class=\"bar-chart flex-auto layout-column\">\r\n    <svg class=\"flex-auto\"></svg>\r\n</div>\r\n\r\n<pip-chart-legend pip-series=\"barChart.legend\" pip-interactive=\"false\"></pip-chart-legend>","<div >\r\n    <div class=\"chart-legend-item\" ng-repeat=\"item in series\">\r\n        <md-checkbox class=\"lp16 m8\"\r\n                     ng-model=\"item.disabled\"\r\n                     ng-true-value=\"false\"\r\n                     ng-false-value=\"true\"\r\n                     ng-if=\"interactive\"\r\n                     aria-label=\"{{ item.label }}\">\r\n            <p class=\"legend-item-value\"\r\n               ng-style=\"{'background-color': item.color}\">\r\n                {{ item.value }}\r\n            </p>\r\n            <p class=\"legend-item-label\">{{:: item.label || item.key }}</p>\r\n        </md-checkbox>\r\n\r\n        <div ng-if=\"!interactive\">\r\n            <span class=\"bullet\" ng-style=\"{'background-color': item.color}\"></span>\r\n            <span>{{:: item.label || item.key}}</span>\r\n        </div>\r\n    </div>\r\n</div>","<div class=\"line-chart\" flex=\"auto\" layout=\"column\">\r\n    <svg class=\"flex-auto\" ng-class=\"{'visible-x-axis': lineChart.isVisibleX(), 'visible-y-axis': lineChart.isVisibleY()}\">\r\n    </svg>\r\n    <div class=\"visual-scroll\">\r\n        <div class=\"scrolled-block\"></div>\r\n    </div>\r\n    <md-button class=\"md-fab md-mini minus-button\" ng-click=\"lineChart.zoomOut()\">\r\n        <md-icon md-svg-icon=\"icons:minus-circle\"></md-icon>\r\n    </md-button>\r\n    <md-button class=\"md-fab md-mini plus-button\" ng-click=\"lineChart.zoomIn()\">\r\n        <md-icon md-svg-icon=\"icons:plus-circle\"></md-icon>\r\n    </md-button>\r\n</div>\r\n\r\n<pip-chart-legend pip-series=\"lineChart.data\" pip-interactive=\"false\"></pip-chart-legend>\r\n","<div class=\"pie-chart\" flex=\"auto\" layout=\"column\">\r\n    <svg class=\"flex-auto\"></svg>\r\n</div>\r\n\r\n<pip-chart-legend pip-series=\"pieChart.data\" pip-interactive=\"false\"></pip-chart-legend>","/**\r\n * @file Registration of chart WebUI controls\r\n * @copyright Digital Living Software Corp. 2014-2016\r\n */\r\n\r\n/* global angular */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('pipCharts', [\r\n        'pipBarCharts',\r\n        'pipLineCharts',\r\n        'pipPieCharts',\r\n        'pipChartLegends'\r\n    ]);\r\n\r\n})();\r\n\r\n","(function () {\r\n    'use strict';\r\n\r\n    /**\r\n     * @ngdoc module\r\n     * @name pipBarCharts\r\n     *\r\n     * @description\r\n     * Bar chart on top of Rickshaw charts\r\n     */\r\n    angular.module('pipBarCharts', [])\r\n        .directive('pipBarChart', pipBarChart);\r\n\r\n    function pipBarChart() {\r\n        return {\r\n            restrict: 'E',\r\n            scope: {\r\n                series: '=pipSeries'\r\n            },\r\n            bindToController: true,\r\n            controllerAs: 'barChart',\r\n            templateUrl: 'bar/bar_chart.html',\r\n            controller: function ($element, $scope, $timeout, $interval, $mdColorPalette) {\r\n                var vm = this;\r\n                var chart = null;\r\n                var chartElem = null;\r\n                var colors = _.map($mdColorPalette, function (palette, color) {\r\n                    return color;\r\n                });\r\n\r\n                vm.data = vm.series || [];\r\n\r\n                if ((vm.series || []).length > colors.length) {\r\n                    vm.data = vm.series.slice(0, 9);\r\n                }\r\n\r\n                //colors = _.sample(colors, colors.length);\r\n\r\n                // sets legend params\r\n                vm.legend = vm.data[0].values;\r\n                \r\n                // Sets colors of items\r\n                generateParameterColor();\r\n\r\n                (<any>d3.scale).paletteColors = function () {\r\n                    return d3.scale.ordinal().range(colors.map(materialColorToRgba));\r\n                };\r\n\r\n                $scope.$watch('barChart.series', function (updatedSeries) {\r\n                    vm.data = updatedSeries || [];\r\n\r\n                    generateParameterColor();\r\n\r\n                    if (chart) {\r\n                        chartElem.datum(vm.data).call(chart);\r\n                        chart.update();\r\n                        // Todo: the method does not exist\r\n                        //intervalUpdate(chart.update, 10);\r\n                    }\r\n                });\r\n\r\n\r\n                /**\r\n                 * Instantiate chart\r\n                 */\r\n                nv.addGraph(function () {\r\n                    chart = nv.models.discreteBarChart()\r\n                        .margin({top: 10, right: 0, bottom: 0, left: -50})\r\n                        .x(function (d) { return d.label; })\r\n                        .y(function (d) { return d.value; })\r\n                        .showValues(true)\r\n                        .showXAxis(false)\r\n                        .showYAxis(false)\r\n                        .valueFormat(<any>d3.format('d'))\r\n                        .duration(0)\r\n                        .height(270)\r\n                        .color(function(d) {\r\n                            return d.color || (<any>d3.scale).paletteColors().range();\r\n                        });\r\n\r\n                    chart.tooltip.enabled(false);\r\n                    chart.noData('No data for this moment...');\r\n\r\n                    chartElem = d3.select($element.get(0))\r\n                        .select('.bar-chart svg')\r\n                        .datum(vm.data)\r\n                        .style('height', 270)\r\n                        .call(chart);\r\n\r\n                    //nv.utils.windowResize(chart.update);\r\n\r\n                    return chart;\r\n                }, function () {\r\n                    chart.dispatch.on('beforeUpdate', function () {\r\n                        $timeout(configBarWidthAndLabel, 0);\r\n                    });\r\n\r\n                    $timeout(configBarWidthAndLabel, 0);\r\n                });\r\n\r\n                /**\r\n                 * Aligns value label according to parent container size.\r\n                 * @return {void}\r\n                 */\r\n                function configBarWidthAndLabel() {\r\n                    var labels = d3.selectAll('.nv-bar text')[0],\r\n                        chartBars = d3.selectAll('.nv-bar')[0],\r\n                        parentHeight = (<any>d3.select('.nvd3-svg')[0][0]).getBBox().height;\r\n\r\n                    d3.select('.bar-chart').classed('visible', true);\r\n\r\n                    chartBars.forEach(function (item, index) {\r\n                        var barSize = (<any>item).getBBox(),\r\n                            element = d3.select(item),\r\n                            y = d3.transform(element.attr('transform')).translate[1];\r\n                        \r\n                        element\r\n                            .attr('transform', 'translate(' + Number(index * (38 + 8) + 50) + ', ' + parentHeight + ')')\r\n                            .select('rect')\r\n                            .attr('width', 38);\r\n\r\n                        element\r\n                            .transition()\r\n                            .duration(1000)\r\n                            .attr('transform', 'translate(' + Number(index * (38 + 8) + 50) + ', ' + y + ')');\r\n\r\n                        d3.select(labels[index])\r\n                            .attr('dy', barSize.height / 2)\r\n                            .attr('x', 19);\r\n                    });\r\n                }\r\n\r\n                /**\r\n                 * Converts palette color name into RGBA color representation.\r\n                 * Should by replaced by palette for charts.\r\n                 *\r\n                 * @param {string} color    Name of color from AM palette\r\n                 * @returns {string} RGBa format\r\n                 */\r\n                function materialColorToRgba(color) {\r\n                    return 'rgba(' + $mdColorPalette[color][500].value[0] + ','\r\n                        + $mdColorPalette[color][500].value[1] + ','\r\n                        + $mdColorPalette[color][500].value[2] + ','\r\n                        + ($mdColorPalette[color][500].value[3] || 1) + ')';\r\n                }\r\n\r\n                /**\r\n                 * Helpful method\r\n                 * @private\r\n                 */\r\n                function generateParameterColor() {\r\n                    vm.legend.forEach(function (item, index) {\r\n                        item.color = item.color || materialColorToRgba(colors[index]);\r\n                    });\r\n                }\r\n            }\r\n        };\r\n    }\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    /**\r\n     * @ngdoc module\r\n     * @name pipLegends\r\n     *\r\n     * @description\r\n     * Legend of charts\r\n     */\r\n    angular.module('pipChartLegends', [])\r\n        .directive('pipChartLegend', pipChartLegend);\r\n\r\n    function pipChartLegend() {\r\n        return {\r\n            restrict: 'E',\r\n            scope: {\r\n                series: '=pipSeries',\r\n                interactive: '=pipInteractive'\r\n            },\r\n            templateUrl: 'legend/interactive_legend.html',\r\n            controller: function ($element, $scope, $timeout, $mdColorPalette) {\r\n                var colors = _.map($mdColorPalette, function (palette) {\r\n                    return palette[500].hex;\r\n                });\r\n\r\n                function colorCheckboxes() {\r\n                    var checkboxContainers = $($element).find('md-checkbox .md-container');\r\n                    \r\n                    checkboxContainers.each(function (index, item) {\r\n                        $(item)\r\n                            .css('color', $scope.series[index].color || colors[index])\r\n                            .find('.md-icon')\r\n                            .css('background-color', $scope.series[index].color || colors[index]);\r\n                    });\r\n                }\r\n\r\n                function animate() {\r\n                    var legendTitles = $($element).find('.chart-legend-item');\r\n\r\n                    legendTitles.each(function (index, item) {\r\n                        $timeout(function () {\r\n                            $(item).addClass('visible');\r\n                        }, 200 * index);\r\n                    });\r\n                }\r\n                \r\n                function prepareSeries() {\r\n                    $scope.series.forEach(function (item, index) {\r\n                        item.color = item.color || colors[index];\r\n                        item.disabled = item.disabled || false;\r\n                    });   \r\n                }\r\n\r\n                $scope.$watch('series', function () {\r\n                    $timeout(function () {\r\n                        animate();\r\n                        colorCheckboxes();\r\n                    }, 0);\r\n                    prepareSeries();\r\n                }, true);\r\n\r\n                $scope.$watch('interactive', function (newValue, oldValue) {\r\n                    if (newValue == true && newValue != oldValue) {\r\n                        $timeout(colorCheckboxes, 0);\r\n                    }\r\n                });\r\n\r\n                $timeout(function () {\r\n                    animate();\r\n                    colorCheckboxes();\r\n                }, 0);\r\n                prepareSeries();\r\n            }\r\n        };\r\n    }\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    /**\r\n     * @ngdoc module\r\n     * @name pipLineCharts\r\n     *\r\n     * @description\r\n     * Line chart on top of Rickshaw charts\r\n     */\r\n    angular.module('pipLineCharts', [])\r\n        .directive('pipLineChart', pipLineChart);\r\n\r\n    function pipLineChart() {\r\n        return {\r\n            restrict: 'E',\r\n            scope: {\r\n                series: '=pipSeries',\r\n                showYAxis: '=pipYAxis',\r\n                showXAxis: '=pipXAxis',\r\n                dynamic: '=pipDynamic'\r\n            },\r\n            bindToController: true,\r\n            controllerAs: 'lineChart',\r\n            templateUrl: 'line/line_chart.html',\r\n            controller: function ($element, $scope, $timeout, $interval, $mdColorPalette) {\r\n                var vm        = this;\r\n                var chart     = null;\r\n                var chartElem = null;\r\n                var setZoom = null;\r\n                var colors    = _.map($mdColorPalette, function (palette, color) {\r\n                    return color;\r\n                });\r\n\r\n                vm.data = vm.series || [];\r\n                vm.sourceEvents = [];\r\n                \r\n                vm.isVisibleX = function () {\r\n                    return vm.showXAxis == undefined ? true : vm.showXAxis; \r\n                };\r\n\r\n                vm.isVisibleY = function () {\r\n                    return vm.showYAxis == undefined ? true : vm.showYAxis;\r\n                };\r\n\r\n                vm.zoomIn = function () {\r\n                    if (setZoom) {\r\n                        setZoom('in');\r\n                    }\r\n                };\r\n\r\n                vm.zoomOut = function () {\r\n                    if (setZoom) {\r\n                        setZoom('out');\r\n                    }\r\n                };\r\n                \r\n                if (vm.series.length > colors.length) {\r\n                    vm.data = vm.series.slice(0, 9);\r\n                }\r\n\r\n                // Sets colors of items\r\n                generateParameterColor();\r\n\r\n                (<any>d3.scale).paletteColors = function () {\r\n                    return d3.scale.ordinal().range(colors.map(materialColorToRgba));\r\n                };\r\n\r\n                $scope.$watch('lineChart.series', function (updatedSeries) {\r\n                    vm.data = updatedSeries;\r\n\r\n                    generateParameterColor();\r\n\r\n                    if (chart) {\r\n                        chartElem.datum(vm.data).call(chart);\r\n                    }\r\n                }, true);\r\n\r\n                /**\r\n                 * Instantiate chart\r\n                 */\r\n                nv.addGraph(function () {\r\n                    chart = nv.models.lineChart()\r\n                        .margin({ top: 20, right: 20, bottom: 30, left: 30 })\r\n                        .x(function (d) {\r\n                            return d.x;\r\n                        })\r\n                        .y(function (d) {\r\n                            return d.value;\r\n                        })\r\n                        .height(270)\r\n                        .interactive(true)\r\n                        .showXAxis(true)\r\n                        .showYAxis(true)\r\n                        .showLegend(false)\r\n                        .color(function(d) {\r\n                            return d.color || (<any>d3.scale).paletteColors().range();\r\n                        });\r\n\r\n                    chart.tooltip.enabled(false);\r\n                    chart.noData('No data for this moment...');\r\n\r\n                    chart.yAxis\r\n                        .tickFormat(function (d) {\r\n                            return d / 1000 + 'k';\r\n                        });\r\n\r\n                    chart.xAxis\r\n                        .tickFormat(function (d) {\r\n                            return d.toFixed(2);\r\n                        });\r\n\r\n                    chartElem = d3.select($element.get(0)).select('.line-chart svg');\r\n                    chartElem.datum(vm.data).style('height', 270).call(chart);\r\n\r\n                    if (vm.dynamic) {\r\n                        addZoom({\r\n                            xAxis: chart.xAxis,\r\n                            yAxis: chart.yAxis,\r\n                            yDomain: chart.yDomain,\r\n                            xDomain: chart.xDomain,\r\n                            redraw: function () {\r\n                                chart.update();\r\n                            },\r\n                            svg: chartElem\r\n                        });\r\n                    }\r\n\r\n                    nv.utils.windowResize(chart.update);\r\n\r\n                    return chart;\r\n                });\r\n\r\n                function updateScroll(domains, boundary) {\r\n                    var bDiff = boundary[1] - boundary[0],\r\n                        domDiff = domains[1] - domains[0],\r\n                        isEqual = (domains[1] - domains[0])/bDiff === 1;\r\n\r\n                    $($element[0]).find('.visual-scroll')\r\n                        .css('opacity', function () {\r\n                            return isEqual ? 0 : 1;\r\n                        });\r\n\r\n                    if (isEqual) return;\r\n                    \r\n                    $($element[0]).find('.scrolled-block')\r\n                        .css('left', function () {\r\n                            return domains[0]/bDiff * 100 + '%';\r\n                        })\r\n                        .css('width', function () {\r\n                            return domDiff/bDiff * 100 + '%';\r\n                        });\r\n                }\r\n\r\n                function addZoom(options) {\r\n                    // scaleExtent\r\n                    var scaleExtent = 4;\r\n\r\n                    // parameters\r\n                    var yAxis       = options.yAxis;\r\n                    var xAxis       = options.xAxis;\r\n                    var xDomain     = options.xDomain || xAxis.scale().domain;\r\n                    var yDomain     = options.yDomain || yAxis.scale().domain;\r\n                    var redraw      = options.redraw;\r\n                    var svg         = options.svg;\r\n                    var discrete    = options.discrete;\r\n\r\n                    // scales\r\n                    var xScale = xAxis.scale();\r\n                    var yScale = yAxis.scale();\r\n\r\n                    // min/max boundaries\r\n                    var x_boundary = xAxis.scale().domain().slice();\r\n                    var y_boundary = yAxis.scale().domain().slice();\r\n\r\n                    // create d3 zoom handler\r\n                    var d3zoom = d3.behavior.zoom();\r\n                    var prevXDomain = x_boundary;\r\n                    var prevScale = d3zoom.scale();\r\n                    var prevTranslate = d3zoom.translate();\r\n\r\n                    // ensure nice axis\r\n                    xScale.nice();\r\n                    yScale.nice();\r\n\r\n                    // fix domain\r\n                    function fixDomain(domain, boundary, scale, translate) {\r\n                        if (domain[0] < boundary[0]) {\r\n                            domain[0] = boundary[0];\r\n                            if (prevXDomain[0] !== boundary[0] || scale !== prevScale) {\r\n                                domain[1] += (boundary[0] - domain[0]);\r\n                            } else {\r\n                                domain[1] = prevXDomain[1];\r\n                                translate = _.clone(prevTranslate);\r\n                            }\r\n\r\n                        }\r\n                        if (domain[1] > boundary[1]) {\r\n                            domain[1] = boundary[1];\r\n                            if (prevXDomain[1] !== boundary[1] || scale !== prevScale) {\r\n                                domain[0] -= (domain[1] - boundary[1]);\r\n                            } else {\r\n                                domain[0] = prevXDomain[0];\r\n                                translate = _.clone(prevTranslate);\r\n                            }\r\n                        }\r\n\r\n                        d3zoom.translate(translate);\r\n                        prevXDomain = _.clone(domain);\r\n                        prevScale = _.clone(scale);\r\n                        prevTranslate = _.clone(translate);\r\n                        return domain;\r\n                    }\r\n\r\n                    // zoom event handler\r\n                    function zoomed() {\r\n                        // Switch off vertical zooming temporary\r\n                        // yDomain(yScale.domain());\r\n                        if ((<any>d3.event).scale === 1) {\r\n                            unzoomed();\r\n                        } else {\r\n                            xDomain(fixDomain(xScale.domain(), x_boundary, (<any>d3.event).scale, (<any>d3.event).translate));\r\n                            redraw();\r\n                        }\r\n                        updateScroll(xScale.domain(), x_boundary);\r\n                    }\r\n\r\n                    //\r\n                    setZoom = function(which) {\r\n                        var center0 = [svg[0][0].getBBox().width / 2, svg[0][0].getBBox().height / 2];\r\n                        var translate0 = d3zoom.translate(), coordinates0 = coordinates(center0);\r\n\r\n                        if (which === 'in') {\r\n                            if (prevScale < scaleExtent) d3zoom.scale(prevScale + 0.2);\r\n                        } else {\r\n                            if (prevScale > 1) d3zoom.scale(prevScale - 0.2);\r\n                        }\r\n\r\n                        var center1 = point(coordinates0);\r\n                        d3zoom.translate([translate0[0] + center0[0] - center1[0], translate0[1] + center0[1] - center1[1]]);\r\n\r\n                        d3zoom.event(svg);\r\n                    };\r\n\r\n                    function step(which) {\r\n                        var translate = d3zoom.translate();\r\n\r\n                        if (which === 'right') {\r\n                            translate[0] -= 20;\r\n                        } else {\r\n                            translate[0] += 20;\r\n                        }\r\n\r\n                        d3zoom.translate(translate);\r\n                        d3zoom.event(svg);\r\n                    }\r\n\r\n                    function coordinates(point) {\r\n                        var scale = d3zoom.scale(), translate = d3zoom.translate();\r\n                        return [(point[0] - translate[0]) / scale, (point[1] - translate[1]) / scale];\r\n                    }\r\n\r\n                    function point(coordinates) {\r\n                        var scale = d3zoom.scale(), translate = d3zoom.translate();\r\n                        return [coordinates[0] * scale + translate[0], coordinates[1] * scale + translate[1]];\r\n                    }\r\n\r\n                    function keypress() {\r\n                        switch((<any>d3.event).keyCode) {\r\n                            case 39: step('right'); break;\r\n                            case 37: step('left'); break;\r\n                            case 107: setZoom('in'); break;\r\n                            case 109: setZoom('out');\r\n                        }\r\n                    }\r\n\r\n                    // zoom event handler\r\n                    function unzoomed() {\r\n                        xDomain(x_boundary);\r\n                        yDomain(y_boundary);\r\n                        redraw();\r\n                        d3zoom.scale(1);\r\n                        d3zoom.translate([0,0]);\r\n                        prevScale = 1;\r\n                        prevTranslate = [0,0];\r\n                    }\r\n\r\n                    // initialize wrapper\r\n                    d3zoom.x(xScale)\r\n                        .y(yScale)\r\n                        .scaleExtent([1, scaleExtent])\r\n                        .on('zoom', zoomed);\r\n\r\n                    // add handler\r\n                    svg.call(d3zoom).on('dblclick.zoom', unzoomed);\r\n                    $($element.get(0)).addClass('dynamic');\r\n\r\n                    // add keyboard handlers\r\n\r\n                    svg\r\n                        .attr('focusable', false)\r\n                        .style('outline', 'none')\r\n                        .on('keydown', keypress)\r\n                        .on('focus', function () {});\r\n                }\r\n\r\n                /**\r\n                 * Converts palette color name into RGBA color representation.\r\n                 * Should by replaced by palette for charts.\r\n                 *\r\n                 * @param {string} color    Name of color from AM palette\r\n                 * @returns {string} RGBa format\r\n                 */\r\n                function materialColorToRgba(color) {\r\n                    return 'rgba(' + $mdColorPalette[color][500].value[0] + ','\r\n                        + $mdColorPalette[color][500].value[1] + ','\r\n                        + $mdColorPalette[color][500].value[2] + ','\r\n                        + ($mdColorPalette[color][500].value[3] || 1) + ')';\r\n                }\r\n\r\n                /**\r\n                 * Helpful method\r\n                 * @private\r\n                 */\r\n                function generateParameterColor() {\r\n                    vm.data.forEach(function (item, index) {\r\n                        item.color = item.color || materialColorToRgba(colors[index]);\r\n                    });\r\n                }\r\n            }\r\n        };\r\n    }\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    /**\r\n     * @ngdoc module\r\n     * @name pipPieCharts\r\n     *\r\n     * @description\r\n     * Line chart on top of Rickshaw charts\r\n     */\r\n    angular.module('pipPieCharts', [])\r\n        .directive('pipPieChart', pipPieChart);\r\n\r\n    function pipPieChart() {\r\n        return {\r\n            restrict: 'E',\r\n            scope: {\r\n                series: '=pipSeries'\r\n            },\r\n            bindToController: true,\r\n            controllerAs: 'pieChart',\r\n            templateUrl: 'pie/pie_chart.html',\r\n            controller: function ($element, $scope, $timeout, $interval, $mdColorPalette) {\r\n                var vm               = this;\r\n                var chart            = null;\r\n                var titleElem        = null;\r\n                var chartElem        = null;\r\n                var colors           = _.map($mdColorPalette, function (palette, color) {\r\n                    return color;\r\n                });\r\n                var resizeTitleLabel = resizeTitleLabelUnwrap;\r\n\r\n                vm.data = vm.data || [];\r\n\r\n                if (vm.series.length > colors.length) {\r\n                    vm.data = vm.series.slice(0, 9);\r\n                }\r\n\r\n                $scope.$watch('pieChart.series', function (newVal) {\r\n                    vm.data = newVal;\r\n\r\n                    generateParameterColor();\r\n\r\n                    if (chart) {\r\n                        chartElem.datum(vm.data).call(chart);\r\n                        $timeout(resizeTitleLabel);\r\n                    }\r\n                }, true);\r\n\r\n                // Sets colors of items\r\n                generateParameterColor();\r\n\r\n                (<any>d3.scale).paletteColors = function () {\r\n                    return d3.scale.ordinal().range(colors.map(materialColorToRgba));\r\n                };\r\n\r\n                /**\r\n                 * Instantiate chart\r\n                 */\r\n                nv.addGraph(function () {\r\n                    chart = nv.models.pieChart()\r\n                        .margin({ top: 0, right: 0, bottom: 0, left: 0 })\r\n                        .x(function (d) {\r\n                            return d.value;\r\n                        })\r\n                        .y(function (d) {\r\n                            return d.value;\r\n                        })\r\n                        .height(250)\r\n                        .width(250)\r\n                        .showLabels(true)\r\n                        .labelThreshold(.001)\r\n                        .growOnHover(false)\r\n                        .donut(true)\r\n                        .donutRatio(0.5)\r\n                        .color(function(d) {\r\n                            return d.color || (<any>d3.scale).paletteColors().range();\r\n                        });\r\n\r\n                    chart.tooltip.enabled(false);\r\n                    chart.noData('No data for this moment...');\r\n                    chart.showLegend(false);\r\n\r\n                    chartElem = d3.select($element.get(0))\r\n                        .select('.pie-chart svg')\r\n                        .attr('height', 250)\r\n                        .style('opacity', 0)\r\n                        .datum(vm.data)\r\n                        .call(chart);\r\n\r\n                    nv.utils.windowResize(function () {\r\n                        chart.update();\r\n                        $timeout(resizeTitleLabel);\r\n                    });\r\n\r\n                    return chart;\r\n                }, function () {\r\n                    $timeout(renderTotalLabel);\r\n                });\r\n\r\n                function renderTotalLabel() {\r\n                    var svgElem  = d3.select($element.get(0)).select('.pie-chart svg')[0][0];\r\n                    var totalVal = vm.data.reduce(function (sum, curr) {\r\n                        return sum + curr.value;\r\n                    }, 0);\r\n\r\n                    d3.select(svgElem)\r\n                        .select('.nv-pie:not(.nvd3)')\r\n                        .append('text')\r\n                        .classed('label-total', true)\r\n                        .attr('text-anchor', 'middle')\r\n                        .style('dominant-baseline', 'central')\r\n                        .text(totalVal);\r\n                    \r\n                    d3.select(svgElem)\r\n                        .transition()\r\n                        .duration(1000)\r\n                        .style('opacity', 1);\r\n\r\n                    titleElem = d3.select($element.find('text.label-total').get(0));\r\n                    resizeTitleLabel();\r\n                }\r\n\r\n                function resizeTitleLabelUnwrap() {\r\n                    var boxSize = $element.find('.nv-pieLabels').get(0).getBBox();\r\n\r\n                    if (!boxSize.width || !boxSize.height) {\r\n                        return;\r\n                    }\r\n\r\n                    titleElem.style('font-size', ~~boxSize.width / 2);\r\n                }\r\n\r\n                /**\r\n                 * Converts palette color name into RGBA color representation.\r\n                 * Should by replaced by palette for charts.\r\n                 *\r\n                 * @param {string} color    Name of color from AM palette\r\n                 * @returns {string} RGBa format\r\n                 */\r\n                function materialColorToRgba(color) {\r\n                    return 'rgba(' + $mdColorPalette[color][500].value[0] + ','\r\n                        + $mdColorPalette[color][500].value[1] + ','\r\n                        + $mdColorPalette[color][500].value[2] + ','\r\n                        + ($mdColorPalette[color][500].value[3] || 1) + ')';\r\n                }\r\n\r\n\r\n                /**\r\n                 * Helpful method\r\n                 * @private\r\n                 */\r\n                function generateParameterColor() {\r\n                    vm.data.forEach(function (item, index) {\r\n                        item.color = item.color || materialColorToRgba(colors[index]);\r\n                    });\r\n                }\r\n            }\r\n        };\r\n    }\r\n})();"]}