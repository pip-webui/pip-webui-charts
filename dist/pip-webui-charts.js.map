{"version":3,"sources":["../node_modules/browser-pack/_prelude.js","src/bar_chart/BarChart.ts","src/chart_colors/ChartColorsService.ts","src/chart_legend/ChartInteractiveLegend.ts","src/index.ts","src/line_chart/LineChart.ts","src/pie_chart/PieChart.ts","temp/pip-webui-charts-html.js"],"names":[],"mappings":"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AE,CAAC,CAAC,CAAC;QACjF,CAAC;QAEO,mDAAsB,GAA9B;YAAA,iBAMC;YALG,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;gBAAC,MAAM,CAAC;YAEvB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,UAAC,IAAS,EAAE,KAAa;gBACvC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,IAAI,KAAI,CAAC,cAAc,CAAC,gBAAgB,CAAC,KAAK,EAAE,KAAI,CAAC,MAAM,CAAC,CAAC;YACxF,CAAC,CAAC,CAAC;QACP,CAAC;QAEL,yBAAC;IAAD,CA3MA,AA2MC,IAAA;IAED,IAAM,QAAQ,GAAyB;QACnC,QAAQ,EAAE,gBAAgB;QAC1B,WAAW,EAAE,yBAAyB;QACtC,UAAU,EAAE,kBAAkB;KACjC,CAAA;IAED,OAAO;SACF,MAAM,CAAC,cAAc,EAAE,EAAE,CAAC;SAC1B,SAAS,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC;AAC5C,CAAC;;;ACxPD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"pip-webui-charts.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import { IChartColorsService } from '../chart_colors/IChartColorsService';\n\n{\n    interface IBarChartBindings {\n        [key: string]: any;\n\n        series: any;\n        xTickFormat: any;\n        yTickFormat: any;\n        interactiveLegend: any;\n    }\n\n    const BarChartBindings: IBarChartBindings = {\n        series: '<pipSeries',\n        xTickFormat: '<?pipXTickFormat',\n        yTickFormat: '<?pipYTickFormat',\n        interactiveLegend: '<?pipInterLegend'\n    }\n\n    class BarChartBindingsChanges implements IBarChartBindings, ng.IOnChangesObject {\n        [key: string]: any;\n\n        series: ng.IChangesObject < any > ;\n        xTickFormat: ng.IChangesObject < any > ;\n        yTickFormat: ng.IChangesObject < any > ;\n        interactiveLegend: ng.IChangesObject < boolean > ;\n    }\n\n    class BarChartController implements ng.IController, IBarChartBindings {\n        public series: any;\n        public xTickFormat: any;\n        public yTickFormat: any;\n        public interactiveLegend: boolean;\n        public legend: any;\n\n        private data: any;\n        private chart: nv.DiscreteBarChart = null;\n        private chartElem: any;\n        private colors: string[];\n        private height: number = 270;\n\n        constructor(\n            private $element: JQuery,\n            private $scope: ng.IScope,\n            private $timeout: ng.ITimeoutService,\n            private pipChartColors: IChartColorsService\n        ) {\n            \"ngInject\";\n\n            this.colors = this.pipChartColors.generateMaterialColors();\n            $scope.$watch('$ctrl.legend', (updatedLegend) => {\n                if (!updatedLegend) return;\n\n                this.data = this.prepareData(updatedLegend);\n                this.legend = updatedLegend;\n\n                this.updateChart();\n            }, true);\n        }\n\n        public $onInit() {\n            this.data = this.prepareData(this.series);\n            this.legend = _.clone(this.series);\n            this.generateParameterColor();\n            ( < any > d3.scale).paletteColors = () => {\n                return d3.scale.ordinal().range(this.colors.map((color) => {\n                    return this.pipChartColors.materialColorToRgba(color);\n                }));\n            };\n\n            this.instantiateChart();\n        }\n\n        public $onChanges(changes: BarChartBindingsChanges) {\n            this.xTickFormat = changes.xTickFormat ? changes.xTickFormat.currentValue : null;\n            this.yTickFormat = changes.yTickFormat ? changes.yTickFormat.currentValue : null;\n            this.interactiveLegend = changes.interactiveLegend ? changes.interactiveLegend.currentValue : null;\n\n            if (changes.series && changes.series.currentValue !== changes.series.previousValue) {\n                this.series = changes.series.currentValue;\n                this.data = this.prepareData(this.series);\n                this.legend = _.clone(this.series);\n                this.generateParameterColor();\n                this.updateChart();\n            }\n        }\n\n        private updateChart() {\n            if (this.chart) {\n                this.chartElem.datum(this.data).call(this.chart);\n                this.configBarWidthAndLabel();\n                this.drawEmptyState();\n            }\n        }\n\n        private instantiateChart() {\n            nv.addGraph(() => {\n                this.chart = nv.models.discreteBarChart()\n                    .margin({\n                        top: 10,\n                        right: 0,\n                        bottom: 10,\n                        left: 50\n                    })\n                    .x((d) => {\n                        return d.label || d.key || d.x;\n                    })\n                    .y((d) => {\n                        return d.value;\n                    })\n                    .showValues(true)\n                    .staggerLabels(true)\n                    .showXAxis(true)\n                    .showYAxis(true)\n                    .valueFormat( < any > d3.format('d'))\n                    .duration(0)\n                    .height(this.height)\n                    .color((d) => {\n                        return this.data[d.series].color || this.pipChartColors.materialColorToRgba(this.colors[d.series]);\n                    });\n\n                this.chart.tooltip.enabled(false);\n                this.chart.noData('There is no data right now...');\n\n                this.chart.yAxis\n                    .tickFormat((d) => {\n                        return this.yTickFormat ? this.yTickFormat(d) : d;\n                    });\n\n                this.chart.xAxis\n                    .tickFormat((d) => {\n                        return this.xTickFormat ? this.xTickFormat(d) : d;\n                    });\n\n                this.chartElem = < any > d3.select(this.$element.get(0))\n                    .select('.bar-chart svg')\n                    .datum(this.data)\n                    .style('height', '285px')\n                    .call(this.chart);\n\n                nv.utils.windowResize(() => {\n                    this.chart.update();\n                    this.configBarWidthAndLabel(0);\n                    this.drawEmptyState();\n                });\n\n                return this.chart;\n            }, () => {\n                this.$timeout(() => {\n                    this.configBarWidthAndLabel();\n                }, 0);\n                this.drawEmptyState();\n            });\n        }\n\n        private prepareData(data): any {\n            const result = [];\n            _.each(data, (seria) => {\n                if (!seria.disabled && seria.values) result.push(seria);\n            });\n            return _.cloneDeep(result);\n        }\n\n        private drawEmptyState() {\n            if (this.$element.find('.nv-noData').length === 0) {\n                d3.select(this.$element.find('.empty-state')[0]).remove();\n            } else {\n                const g = this.chartElem.append('g').classed('empty-state', true),\n                    width = this.$element.find('.nvd3-svg').innerWidth(),\n                    margin = width * 0.1;\n\n                g.append('g')\n                    .style('fill', 'rgba(0, 0, 0, 0.08)')\n                    .append('rect')\n                    .attr('height', this.height - 10)\n                    .attr('width', 38);\n\n                g.append('g')\n                    .attr('transform', 'translate(42, 60)')\n                    .style('fill', 'rgba(0, 0, 0, 0.08)')\n                    .append('rect')\n                    .attr('height', 200)\n                    .attr('width', 38);\n\n                g.append('g')\n                    .attr('transform', 'translate(84, 160)')\n                    .style('fill', 'rgba(0, 0, 0, 0.08)')\n                    .append('rect')\n                    .attr('height', 100)\n                    .attr('width', 38);\n\n                g.attr('transform', 'translate(' + (50 + margin) + ', 0), ' + 'scale(' + ((width - 2 * margin) / 126) + ', 1)');\n            }\n        }\n\n        private configBarWidthAndLabel(timeout: number = 1000) {\n            const labels = this.$element.find('.nv-bar text'),\n                chartBars = this.$element.find('.nv-bar'),\n                parentHeight = ( < any > this.$element.find('.nvd3-svg')[0]).getBBox().height;\n\n            d3.select(this.$element.find('.bar-chart')[0]).classed('visible', true);\n\n            _.each(chartBars, (item: EventTarget, index: number) => {\n                const barHeight = Number(d3.select(item).select('rect').attr('height')),\n                    barWidth = Number(d3.select(item).select('rect').attr('width')),\n                    element = d3.select(item),\n                    x = d3.transform(element.attr('transform')).translate[0],\n                    y = d3.transform(element.attr('transform')).translate[1];\n\n                element\n                    .attr('transform', 'translate(' + Number(x + index * (barWidth + 15)) + ', ' + (this.height - 20) + ')')\n                    .select('rect').attr('height', 0);\n\n                element\n                    .transition()\n                    .duration(timeout)\n                    .attr('transform', 'translate(' + Number(x + index * (barWidth + 15)) + ', ' + y + ')')\n                    .select('rect').attr('height', barHeight);\n\n                d3.select(labels[index])\n                    .attr('dy', barHeight / 2 + 10)\n                    .attr('x', barWidth / 2);\n            });\n        }\n\n        private generateParameterColor() {\n            if (!this.data) return;\n\n            _.each(this.data, (item: any, index: number) => {\n                if (item.values[0]) {\n                    item.values[0].color = item.values[0].color || this.pipChartColors.getMaterialColor(index, this.colors);\n                    item.color = item.values[0].color;\n                }\n            });\n        }\n\n    }\n\n    const BarChart: ng.IComponentOptions = {\n        bindings: BarChartBindings,\n        templateUrl: 'bar_chart/BarChart.html',\n        controller: BarChartController\n    }\n\n    angular\n        .module('pipBarCharts', [])\n        .component('pipBarChart', BarChart);\n}","import { IChartColorsService } from './IChartColorsService';\n\n{\n    class ChartColorsService implements IChartColorsService {\n        constructor(\n            private $mdColorPalette: angular.material.IColorPalette\n        ) { \n            \"ngInject\";\n        }\n\n        public getMaterialColor(index: number, colors: string[]): string {\n            if (!colors || colors.length < 1) return null;\n\n            if (index >= colors.length) {\n                index = 0;\n            }\n\n            return this.materialColorToRgba(colors[index]);\n        }\n\n        public materialColorToRgba(color: string): string {\n            return 'rgba(' + this.$mdColorPalette[color][500].value[0] + ',' +\n                this.$mdColorPalette[color][500].value[1] + ',' +\n                this.$mdColorPalette[color][500].value[2] + ',' +\n                (this.$mdColorPalette[color][500].value[3] || 1) + ')';\n        }\n\n        public generateMaterialColors(): string[] {\n            let colors = _.map((<any>this.$mdColorPalette), (palette, color: string) => {\n                return color;\n            });\n            colors = _.filter(colors, (color: string) => {\n                return _.isObject(this.$mdColorPalette[color]) && _.isObject(this.$mdColorPalette[color][500]) && _.isArray(this.$mdColorPalette[color][500].value);\n            });\n\n            return colors;\n        }\n    }\n\n    angular\n        .module('pipChartColors', [])\n        .service('pipChartColors', ChartColorsService);\n}","import { IChartColorsService } from '../chart_colors/IChartColorsService';\n\n{\n    interface IChartLegendBindings {\n        [key: string]: any;\n\n        series: any;\n        interactive: any;\n    }\n\n    const ChartLegendBindings: IChartLegendBindings = {\n        series: '<pipSeries',\n        interactive: '<pipInteractive'\n    }\n\n    class ChartLegendBindingsChanges implements ng.IOnChangesObject, IChartLegendBindings {\n        [key: string]: any;\n\n        series: ng.IChangesObject < any > ;\n        interactive: ng.IChangesObject < boolean > ;\n    }\n\n    class ChartLegendController implements ng.IController, IChartLegendBindings {\n        public series: any;\n        public interactive: boolean;\n\n        private colors: string[];\n\n        constructor(\n            private $element: JQuery,\n            private $scope: ng.IScope,\n            private $timeout: ng.ITimeoutService,\n            private pipChartColors: IChartColorsService\n        ) {\n            \"ngInject\";\n            this.colors = this.pipChartColors.generateMaterialColors();\n        }\n\n        public $onInit() {\n            this.updateLegends();\n        }\n\n        public $onChanges(changes: ChartLegendBindingsChanges) {\n            if (changes.series && changes.series.currentValue !== changes.series.previousValue) {\n                this.series = changes.series.currentValue;\n                this.updateLegends();\n            }\n\n            if (changes.interactive && changes.interactive.currentValue !== changes.interactive.previousValue) {\n                this.interactive = changes.interactive.currentValue;\n                if (this.interactive === true) {\n                    this.$timeout(() => {\n                        this.colorCheckboxes();\n                    }, 0);\n                }\n            }\n        }\n\n        private updateLegends() {\n            this.$timeout(() => {\n                this.animate();\n                this.colorCheckboxes();\n            }, 0);\n            this.prepareSeries();\n        }\n\n        private colorCheckboxes() {\n            const checkboxContainers = this.$element.find('md-checkbox .md-container');\n\n            _.each(checkboxContainers, (item: EventTarget, index: number) => {\n                if (index >= this.series.length) {\n                    return\n                }\n                $(item)\n                    .css('color', this.series[index].color || this.colors[index])\n                    .find('.md-icon')\n                    .css('background-color', this.series[index].color || this.colors[index]);\n            });\n        }\n\n        private animate() {\n            const legendTitles = this.$element.find('.chart-legend-item');\n\n            _.each(legendTitles, (item: EventTarget, index: number) => {\n                this.$timeout(() => {\n                    $(item).addClass('visible');\n                }, 200 * index);\n            });\n        }\n\n        private prepareSeries() {\n            if (!this.series) return;\n\n            _.each(this.series, (item: any, index: number) => {\n                const materialColor = this.pipChartColors.getMaterialColor(index, this.colors);\n                item.color = item.color || (item.values && item.values[0] && item.values[0].color ? item.values[0].color : materialColor);\n                item.disabled = item.disabled || false;\n            });\n        }\n    }\n\n    const ChartLegend: ng.IComponentOptions = {\n        bindings: ChartLegendBindings,\n        templateUrl: 'chart_legend/ChartInteractiveLegend.html',\n        controller: ChartLegendController\n    }\n\n    angular\n        .module('pipChartLegends', [])\n        .component('pipChartLegend', ChartLegend);\n}","﻿angular.module('pipCharts', [\n    'pipBarCharts',\n    'pipLineCharts',\n    'pipPieCharts',\n    'pipChartLegends',\n    'pipChartColors',\n    'pipCharts.Templates'\n]);","import { IChartColorsService } from '../chart_colors/IChartColorsService';\n\n{\n    interface ILineChartBindings {\n        [key: string]: any;\n\n        series: any;\n        showYAxis: any;\n        showXAxis: any;\n        xFormat: any;\n        xTickFormat: any;\n        yTickFormat: any;\n        xTickValues: any;\n        dynamic: any;\n        fixedHeight: any;\n        dynamicHeight: any;\n        minHeight: any;\n        maxHeight: any;\n        interactiveLegend: any;\n    }\n\n    const LineChartBindings: ILineChartBindings = {\n        series: '<pipSeries',\n        showYAxis: '<?pipYAxis',\n        showXAxis: '<?pipXAxis',\n        xFormat: '<?pipXFormat',\n        xTickFormat: '<?pipXTickFormat',\n        yTickFormat: '<?pipYTickFormat',\n        xTickValues: '<?pipXTickValues',\n        dynamic: '<?pipDynamic',\n        fixedHeight: '<?pipDiagramHeight',\n        dynamicHeight: '<?pipDynamicHeight',\n        minHeight: '<?pipMinHeight',\n        maxHeight: '<?pipMaxHeight',\n        interactiveLegend: '<?pipInterLegend'\n    }\n\n    class LineChartBindingsChanges implements ng.IOnChangesObject, ILineChartBindings {\n        [key: string]: any;\n\n        fixedHeight: ng.IChangesObject < number > ;\n        dynamicHeight: ng.IChangesObject < boolean > ;\n        minHeight: ng.IChangesObject < number > ;\n        maxHeight: ng.IChangesObject < number > ;\n\n        series: ng.IChangesObject < any > ;\n        showYAxis: ng.IChangesObject < boolean > ;\n        showXAxis: ng.IChangesObject < boolean > ;\n        xFormat: ng.IChangesObject < any > ;\n        xTickFormat: ng.IChangesObject < any > ;\n        yTickFormat: ng.IChangesObject < any > ;\n        xTickValues: ng.IChangesObject < any > ;\n        dynamic: ng.IChangesObject < boolean > ;\n        interactiveLegend: ng.IChangesObject < boolean > ;\n    }\n\n    class LineChartController implements ng.IController, ILineChartBindings {\n        private HEIGHT = 270;\n        private chart: nv.LineChart = null;\n        private chartElem: any = null;\n        private setZoom: Function = null;\n        private updateZoomOptions: Function = null;\n        private colors: string[];\n        \n        public fixedHeight: number = this.HEIGHT;\n        public dynamicHeight: boolean = false;\n        public minHeight: number = this.HEIGHT;\n        public maxHeight: number = this.HEIGHT;\n        public series: any;\n        public showYAxis: boolean = true;\n        public showXAxis: boolean = true;\n        public xFormat: Function;\n        public xTickFormat: Function;\n        public yTickFormat: Function;\n        public xTickValues: number[];\n        public dynamic: boolean = false;\n        public interactiveLegend: boolean = false;\n        public data: any;\n        public legend: any;\n        public sourceEvents: any;\n\n        constructor(\n            private $element: JQuery,\n            private $scope: ng.IScope,\n            private $timeout: ng.ITimeoutService,\n            private pipChartColors: IChartColorsService\n        ) {\n            \"ngInject\";\n\n            this.colors = this.pipChartColors.generateMaterialColors();\n\n            $scope.$watch('$ctrl.legend', (updatedLegend) => {\n                this.data = this.prepareData(updatedLegend);\n                this.legend = updatedLegend;\n\n                this.updateChart();\n            }, true);\n\n            $scope.$on('$destroy', () => {\n                $timeout(() => {\n                    d3.selectAll('.nvtooltip').style('opacity', 0);\n                }, 800)\n            });\n        }\n\n        public $onInit() {\n            this.data = this.prepareData(this.series) || [];\n            this.legend = _.clone(this.series);\n            this.sourceEvents = [];\n\n            this.generateParameterColor();\n\n            ( < any > d3.scale).paletteColors = () => {\n                return d3.scale.ordinal().range(this.colors.map((color) => {\n                    return this.pipChartColors.materialColorToRgba(color);\n                }));\n            };\n\n            this.instantiateChart();\n        }\n\n        public $onChanges(changes: LineChartBindingsChanges) {\n            this.fixedHeight = changes.fixedHeight ? changes.fixedHeight.currentValue : this.HEIGHT;\n            this.minHeight = changes.minHeight ? changes.minHeight.currentValue : this.HEIGHT;\n            this.maxHeight = changes.maxHeight ? changes.maxHeight.currentValue : this.HEIGHT;\n            this.dynamicHeight = changes.dynamicHeight ? changes.dynamicHeight.currentValue : this.dynamicHeight;\n\n            this.showXAxis = changes.showXAxis ? changes.showXAxis.currentValue : this.showXAxis;\n            this.showYAxis = changes.showYAxis ? changes.showYAxis.currentValue : this.showYAxis;\n            this.dynamic = changes.dynamic ? changes.dynamic.currentValue : this.dynamic;\n            this.interactiveLegend = changes.interactiveLegend ? changes.interactiveLegend.currentValue : this.interactiveLegend;\n\n            this.xFormat = changes.xFormat ? changes.xFormat.currentValue : this.xFormat;\n            this.xTickFormat = changes.xTickFormat ? changes.xTickFormat.currentValue : this.xTickFormat;\n            this.yTickFormat = changes.yTickFormat ? changes.yTickFormat.currentValue : this.yTickFormat;\n\n            if (changes.xTickValues && changes.xTickValues.currentValue !== changes.xTickValues.previousValue) {\n                this.xTickValues = changes.xTickValues.currentValue;\n                this.updateXTickValues();\n                if (this.chartElem && this.chart) this.chartElem.datum(this.data || []).call(this.chart);\n            }\n\n            if (changes.series && changes.series.currentValue !== changes.series.previousValue) {\n                this.updateSeries();\n            }\n        }\n\n        private prepareData(data) {\n            const result = [];\n            _.each(data, (seria) => {\n                if (!seria.disabled && seria.values) result.push(seria);\n            });\n\n            return _.cloneDeep(result);\n        }\n\n        private getHeight() {\n            /*if (this.dynamicHeight) {\n                const heigth = Math.min(Math.max(this.minHeight, this.$element.parent().innerHeight()), this.maxHeight);\n                return heigth;\n            } else {\n                return this.fixedHeight;\n            }*/\n            return this.dynamicHeight ? Math.min(Math.max(this.minHeight, this.$element.parent().innerHeight()), this.maxHeight) : this.fixedHeight;\n        };\n\n        public zoomIn() {\n            if (this.setZoom) {\n                this.setZoom('in');\n            }\n        };\n\n        public zoomOut() {\n            if (this.setZoom) {\n                this.setZoom('out');\n            }\n        };\n\n        private instantiateChart() {\n            nv.addGraph(() => {\n                this.chart = nv.models.lineChart()\n                    .margin({\n                        top: 20,\n                        right: 20,\n                        bottom: 30,\n                        left: 30\n                    })\n                    .x((d) => {\n                        return (d !== undefined && d.x !== undefined) ? (this.xFormat ? this.xFormat(d.x) : d.x) : d;\n                    })\n                    .y((d) => {\n                        return (d !== undefined && d.value !== undefined) ? d.value : d;\n                    })\n                    .height(this.getHeight() - 50)\n                    .useInteractiveGuideline(true)\n                    .showXAxis(true)\n                    .showYAxis(true)\n                    .showLegend(false)\n                    .color((d) => {\n                        return d.color || ( < any > d3.scale).paletteColors().range();\n                    });\n\n                this.chart.tooltip.enabled(false);\n                this.chart.noData('There is no data right now...');\n\n                this.chart.yAxis\n                    .tickFormat((d) => {\n                        return this.yTickFormat ? this.yTickFormat(d) : d;\n                    });\n\n                this.chart.xAxis\n                    .tickFormat((d) => {\n                        return this.xTickFormat ? this.xTickFormat(d) : d;\n                    })\n                    .tickValues(this.xTickValues && _.isArray(this.xTickValues) && this.xTickValues.length > 2 ?\n                        d3.range(this.xTickValues[0], this.xTickValues[1], this.xTickValues[2]) : null);\n\n                this.chartElem = d3.select(this.$element.get(0)).select('.line-chart svg');\n                this.chartElem.datum(this.data || []).style('height', (this.getHeight() - 50) + 'px').call(this.chart);\n                // Handle touches for correcting tooltip position\n                $('.line-chart svg').on('touchstart touchmove', (e) => {\n                    this.$timeout(() => {\n                        const tooltip = $('.nvtooltip'),\n                            tooltipW = tooltip.innerWidth(),\n                            bodyWidth = $('body').innerWidth(),\n                            x = e.originalEvent['touches'][0]['pageX'],\n                            y = e.originalEvent['touches'][0]['pageY'];\n\n                        tooltip.css('transform', 'translate(' +\n                            (x + tooltipW >= bodyWidth ? (x - tooltipW) : x) + ',' +\n                            y + ')');\n                        tooltip.css('left', 0);\n                        tooltip.css('top', 0);\n                    });\n                });\n\n                $('.line-chart svg').on('touchstart touchend', (e) => {\n                    const removeTooltip = () => {\n                        $('.nvtooltip').css('opacity', 0);\n                    };\n\n                    removeTooltip();\n\n                    this.$timeout(() => {\n                        removeTooltip();\n                    }, 500);\n                });\n\n                if (this.dynamic) {\n                    this.addZoom(this.chart, this.chartElem);\n                }\n\n                nv.utils.windowResize(() => {\n                    this.onResize();\n                });\n\n                this.$scope.$on('pipMainResized', () => {\n                    this.onResize();\n                });\n\n                return this.chart;\n            }, () => {\n                this.drawEmptyState();\n            });\n        }\n\n        private updateXTickValues() {\n            if (!this.chart) return;\n\n            this.chart.xAxis\n                .tickValues(this.xTickValues && _.isArray(this.xTickValues) && this.xTickValues.length > 2 ?\n                    d3.range(this.xTickValues[0], this.xTickValues[1], this.xTickValues[2]) : null);\n        }\n\n        private updateChart() {\n            if (this.chart) {\n                this.updateXTickValues();\n\n                this.chartElem.datum(this.data || []).call(this.chart);\n                this.drawEmptyState();\n\n                if (this.updateZoomOptions) this.updateZoomOptions(this.data);\n            }\n        }\n\n        private updateSeries() {\n            this.data = this.prepareData(this.series);\n            this.legend = _.clone(this.series);\n\n            this.generateParameterColor();\n            this.updateChart();\n        }\n\n        private onResize() {\n            this.chart.height(this.getHeight() - 50);\n            this.chartElem.style('height', (this.getHeight() - 50) + 'px');\n            this.chart.update();\n            this.drawEmptyState();\n        }\n\n        private drawEmptyState() {\n            if (!this.$element.find('text.nv-noData').get(0)) {\n                d3.select(this.$element.find('.empty-state')[0]).remove();\n            } else {\n                const containerWidth = this.$element.find('.line-chart').innerWidth(),\n                    containerHeight = this.$element.find('.line-chart').innerHeight();\n\n                if (this.$element.find('.empty-state').get(0)) {\n                    this.chartElem\n                        .select('image')\n                        .attr('transform', 'scale(' + (containerWidth / 1151) + ',' + (containerHeight / 216) + ')');\n                } else {\n                    this.chartElem\n                        .append(\"defs\")\n                        .append(\"pattern\")\n                        .attr(\"height\", 1)\n                        .attr(\"width\", 1)\n                        .attr(\"x\", \"0\")\n                        .attr(\"y\", \"0\")\n                        .attr(\"id\", \"bg\")\n                        .append(\"image\")\n                        .attr('x', 17)\n                        .attr('y', 0)\n                        .attr('height', \"216px\")\n                        .attr('width', \"1151px\")\n                        .attr('transform', 'scale(' + (containerWidth / 1151) + ',' + (containerHeight / 216) + ')')\n                        .attr(\"xlink:href\", \"images/line_chart_empty_state.svg\");\n\n                    this.chartElem\n                        .append('rect')\n                        .classed('empty-state', true)\n                        .attr('height', \"100%\")\n                        .attr('width', \"100%\")\n                        .attr('fill', 'url(#bg)');\n                }\n            }\n        }\n\n        private updateScroll(domains, boundary) {\n            const bDiff = boundary[1] - boundary[0],\n                domDiff = domains[1] - domains[0],\n                isEqual = domDiff / bDiff === 1;\n\n            $(this.$element[0]).find('.visual-scroll')\n                .css('opacity', function () {\n                    return isEqual ? 0 : 1;\n                });\n\n            if (isEqual) return;\n\n            $(this.$element[0]).find('.scrolled-block')\n                .css('left', () => {\n                    return (domains[0] - boundary[0]) / bDiff * 100 + '%';\n                })\n                .css('width', () => {\n                    return domDiff / bDiff * 100 + '%';\n                });\n        }\n\n        private generateParameterColor() {\n            if (!this.data) return;\n\n            _.each(this.data, (item, index: number) => {\n                item.color = item.color || this.pipChartColors.getMaterialColor(index, this.colors);\n            });\n        }\n\n        private addZoom(chart, svg) {\n            // Scale Extent\n            const scaleExtent = 4;\n\n            // Parameters\n            let yAxis = null;\n            let xAxis = null;\n            let xDomain = null;\n            let yDomain = null;\n            let redraw = null;\n\n            // Scales\n            let xScale = null;\n            let yScale = null;\n\n            // Min/max boundaries\n            let x_boundary = null;\n            let y_boundary = null;\n\n            // Create d3 zoom handler\n            let d3zoom = d3.behavior.zoom();\n            let prevXDomain = null;\n            let prevScale = null;\n            let prevTranslate = null;\n\n            const setData = (newChart) => {\n                // Parameters\n                yAxis = newChart.yAxis;\n                xAxis = newChart.xAxis;\n                xDomain = newChart.xDomain || xAxis.scale().domain;\n                yDomain = newChart.yDomain || yAxis.scale().domain;\n                redraw = newChart.update;\n\n                // Scales\n                xScale = xAxis.scale();\n                yScale = yAxis.scale();\n\n                // Min/max boundaries\n                x_boundary = xAxis.scale().domain().slice();\n                y_boundary = yAxis.scale().domain().slice();\n\n                // Create d3 zoom handler\n                prevXDomain = x_boundary;\n                prevScale = d3zoom.scale();\n                prevTranslate = d3zoom.translate();\n\n                // Ensure nice axis\n                xScale.nice();\n                yScale.nice();\n            }\n\n            setData(chart);\n\n            // Fix domain\n            const fixDomain = (domain, boundary, scale, translate) => {\n                if (domain[0] < boundary[0]) {\n                    domain[0] = boundary[0];\n                    if (prevXDomain[0] !== boundary[0] || scale !== prevScale) {\n                        domain[1] += (boundary[0] - domain[0]);\n                    } else {\n                        domain[1] = prevXDomain[1];\n                        translate = _.clone(prevTranslate);\n                    }\n\n                }\n                if (domain[1] > boundary[1]) {\n                    domain[1] = boundary[1];\n                    if (prevXDomain[1] !== boundary[1] || scale !== prevScale) {\n                        domain[0] -= (domain[1] - boundary[1]);\n                    } else {\n                        domain[0] = prevXDomain[0];\n                        translate = _.clone(prevTranslate);\n                    }\n                }\n\n                d3zoom.translate(translate);\n                prevXDomain = _.clone(domain);\n                prevScale = _.clone(scale);\n                prevTranslate = _.clone(translate);\n\n                return domain;\n            }\n\n            const updateChart = () => {\n                d3zoom.scale(1);\n                d3zoom.translate([0, 0]);\n                xScale.domain(x_boundary);\n                d3zoom.x(xScale).y(yScale);\n                svg.call(d3zoom);\n            }\n\n            // Zoom event handler\n            const zoomed = () => {\n                if (( < any > d3.event).scale === 1) {\n                    unzoomed();\n                    updateChart();\n                } else {\n                    xDomain(fixDomain(xScale.domain(), x_boundary, ( < any > d3.event).scale, ( < any > d3.event).translate));\n                    redraw();\n                }\n\n                this.updateScroll(xScale.domain(), x_boundary);\n            }\n\n            // Describe set zoom function\n            this.setZoom = (which) => {\n                const center0 = [svg[0][0].getBBox().width / 2, svg[0][0].getBBox().height / 2];\n                const translate0 = d3zoom.translate(),\n                    coordinates0 = coordinates(center0);\n\n                if (which === 'in') {\n                    if (prevScale < scaleExtent) d3zoom.scale(prevScale + 0.2);\n                } else {\n                    if (prevScale > 1) d3zoom.scale(prevScale - 0.2);\n                }\n\n                const center1 = point(coordinates0);\n                d3zoom.translate([translate0[0] + center0[0] - center1[0], translate0[1] + center0[1] - center1[1]]);\n\n                d3zoom.event(svg);\n            };\n\n            const step = (which) => {\n                const translate = d3zoom.translate();\n\n                if (which === 'right') {\n                    translate[0] -= 20;\n                } else {\n                    translate[0] += 20;\n                }\n\n                d3zoom.translate(translate);\n                d3zoom.event(svg);\n            }\n\n            const coordinates = (point) => {\n                const scale = d3zoom.scale(),\n                    translate = d3zoom.translate();\n                return [(point[0] - translate[0]) / scale, (point[1] - translate[1]) / scale];\n            }\n\n            const point = (coordinates) => {\n                const scale = d3zoom.scale(),\n                    translate = d3zoom.translate();\n                return [coordinates[0] * scale + translate[0], coordinates[1] * scale + translate[1]];\n            }\n\n            const keypress = () => {\n                switch (( < any > d3.event).keyCode) {\n                    case 39:\n                        step('right');\n                        break;\n                    case 37:\n                        step('left');\n                        break;\n                    case 107:\n                        this.setZoom('in');\n                        break;\n                    case 109:\n                        this.setZoom('out');\n                }\n            }\n\n            // Zoom event handler\n            const unzoomed = () => {\n                xDomain(x_boundary);\n                redraw();\n                d3zoom.scale(1);\n                d3zoom.translate([0, 0]);\n                prevScale = 1;\n                prevTranslate = [0, 0];\n            }\n\n            // Initialize wrapper\n            d3zoom.x(xScale)\n                .y(yScale)\n                .scaleExtent([1, scaleExtent])\n                .on('zoom', zoomed);\n\n            // Add handler\n            svg.call(d3zoom).on('dblclick.zoom', unzoomed);\n            $(this.$element.get(0)).addClass('dynamic');\n\n            // Add keyboard handlers\n            svg\n                .attr('focusable', false)\n                .style('outline', 'none')\n                .on('keydown', keypress)\n                .on('focus', () => {});\n\n            const getXMinMax = (data) => {\n                let maxVal, minVal = null;\n\n                for (let i = 0; i < data.length; i++) {\n                    if (!data[i].disabled) {\n                        const tempMinVal = d3.max(data[i].values, (d: any) => {\n                            return this.xFormat ? this.xFormat(d.x) : d.x;\n                        });\n                        const tempMaxVal = d3.min(data[i].values, (d: any) => {\n                            return this.xFormat ? this.xFormat(d.x) : d.x;\n                        });\n                        minVal = (!minVal || tempMinVal < minVal) ? tempMinVal : minVal;\n                        maxVal = (!maxVal || tempMaxVal > maxVal) ? tempMaxVal : maxVal;\n                    }\n                }\n                return [maxVal, minVal];\n            };\n\n            const updateZoomOptions = (data) => {\n                yAxis = chart.yAxis;\n                xAxis = chart.xAxis;\n\n                xScale = xAxis.scale();\n                yScale = yAxis.scale();\n\n                x_boundary = getXMinMax(data);\n\n                if (d3zoom.scale() === 1) {\n                    d3zoom.x(xScale).y(yScale);\n                    svg.call(d3zoom);\n                    d3zoom.event(svg);\n                }\n\n                this.updateScroll(xScale.domain(), x_boundary);\n            }\n        }\n    }\n\n    const LineChart: ng.IComponentOptions = {\n        bindings: LineChartBindings,\n        templateUrl: 'line_chart/LineChart.html',\n        controller: LineChartController\n    }\n\n    angular\n        .module('pipLineCharts', [])\n        .component('pipLineChart', LineChart);\n}","import { IChartColorsService } from '../chart_colors/IChartColorsService';\n\n{\n    interface IPieChartBindings {\n        [key: string]: any;\n\n        series: any;\n        donut: any;\n        legend: any;\n        total: any;\n        size: any;\n        centered: any;\n    }\n\n    const PieChartBindings: IPieChartBindings = {\n        series: '<pipSeries',\n        donut: '<?pipDonut',\n        legend: '<?pipShowLegend',\n        total: '<?pipShowTotal',\n        size: '<?pipPieSize',\n        centered: '<?pipCentered'\n    }\n\n    class PieChartBindingsChanges implements ng.IOnChangesObject, IPieChartBindings {\n        [key: string]: any;\n\n        series: ng.IChangesObject < any > ;\n        donut: ng.IChangesObject < boolean > ;\n        legend: ng.IChangesObject < boolean > ;\n        total: ng.IChangesObject < boolean > ;\n        size: ng.IChangesObject < number | string > ;\n        centered: ng.IChangesObject < boolean > ;\n    }\n\n    class PieChartController implements ng.IController, IPieChartBindings {\n        public series: any;\n        public donut: boolean = false;\n        public legend: boolean = true;\n        public total: boolean = true;\n        public size: number | string = 250;\n        public centered: boolean = false;\n\n        private data: any;\n        private chart: nv.PieChart = null;\n        private chartElem: any;\n        private titleElem: any;\n        private colors: string[];\n\n        constructor(\n            private $element: JQuery,\n            private $scope: ng.IScope,\n            private $timeout: ng.ITimeoutService,\n            private pipChartColors: IChartColorsService\n        ) {\n            \"ngInject\";\n\n            this.colors = this.pipChartColors.generateMaterialColors();\n        }\n\n        public $onInit() {\n            this.data = this.series;\n            this.generateParameterColor();\n            ( < any > d3.scale).paletteColors = () => {\n                return d3.scale.ordinal().range(this.colors.map((color) => {\n                    return this.pipChartColors.materialColorToRgba(color);\n                }));\n            };\n\n            this.instantiateChart();\n        }\n\n        public $onChanges(changes: PieChartBindingsChanges) {\n            this.legend = changes.legend ? changes.legend.currentValue : this.legend;\n            this.centered = changes.centered ? changes.centered.currentValue : this.centered;\n            this.donut = changes.donut ? changes.donut.currentValue : this.donut;\n            this.size = changes.size ? changes.size.currentValue : this.size;\n            this.total = changes.total ? changes.total.currentValue : this.total;\n\n            if (changes.series && changes.series.currentValue !== changes.series.previousValue) {\n                this.data = changes.series.currentValue;\n                this.generateParameterColor();\n\n                if (this.chart) {\n                    this.chartElem.datum(this.data).call(this.chart);\n                    this.$timeout(() => {\n                        this.resizeTitleLabelUnwrap();\n                    });\n                    this.drawEmptyState(d3.select(this.$element.get(0)).select('.pie-chart svg')[0][0]);\n                }\n            }\n        }\n\n        private instantiateChart() {\n            nv.addGraph(() => {\n                this.chart = nv.models.pieChart()\n                    .margin({\n                        top: 0,\n                        right: 0,\n                        bottom: 0,\n                        left: 0\n                    })\n                    .x((d) => {\n                        return this.donut ? d.value : null;\n                    })\n                    .y((d) => {\n                        return d.value;\n                    })\n                    .height(Number(this.size))\n                    .width(Number(this.size))\n                    .showLabels(true)\n                    .labelThreshold(.001)\n                    .growOnHover(false)\n                    .donut(this.donut)\n                    .donutRatio(0.5)\n                    .color((d) => {\n                        return d.color || ( < any > d3.scale).paletteColors().range();\n                    });\n\n                this.chart.tooltip.enabled(false);\n                this.chart.noData('There is no data right now...');\n                this.chart.showLegend(false);\n\n                this.chartElem = d3.select(this.$element.get(0))\n                    .select('.pie-chart')\n                    .style('height', (this.size) + 'px')\n                    .style('width', this.centered ? '100%' : (this.size) + 'px')\n                    .select('svg')\n                    .style('opacity', 0)\n                    .datum(this.data || [])\n                    .call(this.chart);\n\n                nv.utils.windowResize(() => {\n                    this.chart.update();\n                    this.$timeout(() => {\n                        this.resizeTitleLabelUnwrap();\n                    });\n                    this.centerChart();\n                    this.drawEmptyState(d3.select(this.$element.get(0)).select('.pie-chart svg')[0][0]);\n                });\n\n                return this.chart;\n            }, () => {\n                this.$timeout(() => {\n                    const svgElem = d3.select(this.$element.get(0)).select('.pie-chart svg')[0][0];\n                    this.renderTotalLabel(svgElem);\n                    d3.select(svgElem)\n                        .transition()\n                        .duration(1000)\n                        .style('opacity', 1);\n\n                    this.$timeout(() => {\n                        this.resizeTitleLabelUnwrap();\n                    }, 800);\n                    this.centerChart();\n                    this.drawEmptyState(svgElem);\n                });\n            });\n        }\n\n        private drawEmptyState(svg) {\n            if (!this.$element.find('text.nv-noData').get(0)) {\n                d3.select(this.$element.find('.empty-state')[0]).remove();\n                this.$element.find('.pip-empty-pie-text').remove();\n            } else {\n                if (this.$element.find('.pip-empty-pie-text').length === 0) {\n                    this.$element.find('.pie-chart')\n                        .append(\"<div class='pip-empty-pie-text'>There is no data right now...</div>\");\n                }\n\n                const pie = d3.layout.pie().sort(null),\n                    size = Number(this.size);\n\n                const arc = d3.svg.arc()\n                    .innerRadius(size / 2 - 20)\n                    .outerRadius(size / 2 - 57);\n\n                svg = d3.select(svg)\n                    .append(\"g\")\n                    .classed('empty-state', true)\n                    .attr('transform', \"translate(\" + size / 2 + \",\" + size / 2 + \")\");\n\n                const path = svg.selectAll(\"path\")\n                    .data(pie([1]))\n                    .enter().append(\"path\")\n                    .attr(\"fill\", \"rgba(0, 0, 0, 0.08)\")\n                    .attr(\"d\", < any > arc);\n            }\n        }\n\n        private centerChart() {\n            if (this.centered) {\n                const svgElem = d3.select(this.$element.get(0)).select('.pie-chart svg')[0][0],\n                    leftMargin = $(svgElem).innerWidth() / 2 - (Number(this.size) || 250) / 2;\n                d3.select(this.$element.find('.nv-pieChart')[0]).attr('transform', 'translate(' + leftMargin + ', 0)');\n            }\n        }\n\n        private renderTotalLabel(svgElem) {\n            if ((!this.total && !this.donut) || !this.data) return;\n\n            let totalVal = this.data.reduce(function (sum, curr) {\n                return sum + curr.value;\n            }, 0);\n\n            if (totalVal >= 10000) totalVal = (totalVal / 1000).toFixed(1) + 'k';\n\n            d3.select(svgElem)\n                .select('.nv-pie:not(.nvd3)')\n                .append('text')\n                .classed('label-total', true)\n                .attr('text-anchor', 'middle')\n                .style('dominant-baseline', 'central')\n                .text(totalVal);\n\n            this.titleElem = d3.select(this.$element.find('text.label-total').get(0)).style('opacity', 0);\n        }\n\n        private resizeTitleLabelUnwrap() {\n            if ((!this.total && !this.donut) || !this.data) return;\n\n            const boxSize = ( < any > this.$element.find('.nvd3.nv-pieChart').get(0)).getBBox();\n\n            if (!boxSize.width || !boxSize.height) {\n                return;\n            }\n\n            this.titleElem.style('font-size', ~~boxSize.width / 4.5).style('opacity', 1);\n        }\n\n        private generateParameterColor() {\n            if (!this.data) return;\n\n            _.each(this.data, (item: any, index: number) => {\n                item.color = item.color || this.pipChartColors.getMaterialColor(index, this.colors);\n            });\n        }\n\n    }\n\n    const PieChart: ng.IComponentOptions = {\n        bindings: PieChartBindings,\n        templateUrl: 'pie_chart/PieChart.html',\n        controller: PieChartController\n    }\n\n    angular\n        .module('pipPieCharts', [])\n        .component('pipPieChart', PieChart);\n}","(function(module) {\ntry {\n  module = angular.module('pipCharts.Templates');\n} catch (e) {\n  module = angular.module('pipCharts.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('chart_legend/ChartInteractiveLegend.html',\n    '<div >\\n' +\n    '    <div class=\"chart-legend-item\" ng-repeat=\"item in $ctrl.series\" ng-show=\"item.values || item.value\">\\n' +\n    '        <md-checkbox ng-model=\"item.disabled\"\\n' +\n    '                     ng-true-value=\"false\"\\n' +\n    '                     ng-false-value=\"true\"\\n' +\n    '                     ng-if=\"$ctrl.interactive\"\\n' +\n    '                     aria-label=\"{{ item.label }}\">\\n' +\n    '            <p class=\"legend-item-value\"\\n' +\n    '                ng-if=\"item.value\"\\n' +\n    '               ng-style=\"{\\'background-color\\': item.color}\">\\n' +\n    '                {{ item.value }}\\n' +\n    '            </p>\\n' +\n    '            <p class=\"legend-item-label\">{{:: item.label || item.key }}</p>\\n' +\n    '        </md-checkbox>\\n' +\n    '\\n' +\n    '        <div ng-if=\"!$ctrl.interactive\">\\n' +\n    '            <span class=\"bullet\" ng-style=\"{\\'background-color\\': item.color}\"></span>\\n' +\n    '            <span>{{:: item.label || item.key}}</span>\\n' +\n    '        </div>\\n' +\n    '    </div>\\n' +\n    '</div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipCharts.Templates');\n} catch (e) {\n  module = angular.module('pipCharts.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('bar_chart/BarChart.html',\n    '<div class=\"bar-chart\">\\n' +\n    '    <svg ></svg>\\n' +\n    '</div>\\n' +\n    '\\n' +\n    '<pip-chart-legend ng-show=\"$ctrl.legend\" pip-series=\"$ctrl.legend\" pip-interactive=\"$ctrl.interactiveLegend\"></pip-chart-legend>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipCharts.Templates');\n} catch (e) {\n  module = angular.module('pipCharts.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('line_chart/LineChart.html',\n    '<div class=\"line-chart\" flex=\"auto\" layout=\"column\">\\n' +\n    '    <svg class=\"flex-auto\" ng-class=\"{\\'visible-x-axis\\': $ctrl.showXAxis, \\'visible-y-axis\\': $ctrl.showYAxis}\">\\n' +\n    '    </svg>\\n' +\n    '    <div class=\"scroll-container\">\\n' +\n    '        <div class=\"visual-scroll\">\\n' +\n    '            <div class=\"scrolled-block\"></div>\\n' +\n    '        </div>\\n' +\n    '    </div>\\n' +\n    '    <md-button class=\"md-fab md-mini minus-button\" ng-click=\"$ctrl.zoomOut()\">\\n' +\n    '        <md-icon md-svg-icon=\"icons:minus-circle\"></md-icon>\\n' +\n    '    </md-button>\\n' +\n    '    <md-button class=\"md-fab md-mini plus-button\" ng-click=\"$ctrl.zoomIn()\">\\n' +\n    '        <md-icon md-svg-icon=\"icons:plus-circle\"></md-icon>\\n' +\n    '    </md-button>\\n' +\n    '</div>\\n' +\n    '\\n' +\n    '<pip-chart-legend pip-series=\"$ctrl.legend\" pip-interactive=\"$ctrl.interactiveLegend\"></pip-chart-legend>\\n' +\n    '');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipCharts.Templates');\n} catch (e) {\n  module = angular.module('pipCharts.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('pie_chart/PieChart.html',\n    '<div class=\"pie-chart\" class=\"layout-column flex-auto\" ng-class=\"{\\'circle\\': !$ctrl.donut}\">\\n' +\n    '    <svg class=\"flex-auto\"></svg>\\n' +\n    '</div>\\n' +\n    '\\n' +\n    '<pip-chart-legend pip-series=\"$ctrl.data\" pip-interactive=\"false\" ng-if=\"$ctrl.legend\"></pip-chart-legend>');\n}]);\n})();\n\n//# sourceMappingURL=pip-webui-charts-html.js.map\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}