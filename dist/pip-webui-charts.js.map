{"version":3,"sources":["charts.js","pip-webui-charts-html.js","bar/bar_chart.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpfile":"pip-webui-charts.js","sourcesContent":["/**\r\n * @file Registration of chart WebUI controls\r\n * @copyright Digital Living Software Corp. 2014-2016\r\n */\r\n\r\n/* global angular */\r\n\r\n(function (angular) {\r\n    'use strict';\r\n\r\n    angular.module('pipCharts', [\r\n        'pipStaticCharts'\r\n    ]);\r\n\r\n})(window.angular);\r\n\r\n","(function(module) {\ntry {\n  module = angular.module('pipCharts.Templates');\n} catch (e) {\n  module = angular.module('pipCharts.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('bar/bar_chart.html',\n    '<div class=\"bar-chart flex-auto layout-column\">\\n' +\n    '    <svg class=\"flex-auto\"></svg>\\n' +\n    '</div>\\n' +\n    '\\n' +\n    '<div class=\"static-chart-legend\">\\n' +\n    '    <div class=\"legend-title\" ng-repeat=\"item in barChart.legend\">\\n' +\n    '        <span class=\"bullet\" ng-style=\"{\\'background-color\\': item.color}\"></span>\\n' +\n    '        <span>{{:: item.label}}</span>\\n' +\n    '    </div>\\n' +\n    '</div>');\n}]);\n})();\n","(function () {\n    'use strict';\n\n    /**\n     * @ngdoc module\n     * @name pipStaticCharts\n     *\n     * @description\n     * Bar chart on top of Rickshaw charts\n     */\n    angular.module('pipStaticCharts', [])\n        .directive('pipBarChart', pipBarChart);\n\n    function pipBarChart() {\n        return {\n            restrict: 'E',\n            scope: {\n                series: '=pipSeries'\n            },\n            bindToController: true,\n            controllerAs: 'barChart',\n            templateUrl: 'bar/bar_chart.html',\n            controller: ['$element', '$scope', '$timeout', '$interval', '$mdColorPalette', function ($element, $scope, $timeout, $interval, $mdColorPalette) {\n                var vm = this;\n                var chart = null;\n                var chartElem = null;\n                var colors = _.map($mdColorPalette, function (palette, color) {\n                    return color;\n                });\n\n                vm.data = vm.series || [];\n\n                if ((vm.series || []).length > colors.length) {\n                    vm.data = vm.series.slice(0, 9);\n                }\n\n                //colors = _.sample(colors, colors.length);\n\n                // sets legend params\n                vm.legend = vm.data[0].values;\n                \n                // Sets colors of items\n                generateParameterColor();\n\n                d3.scale.paletteColors = function () {\n                    return d3.scale.ordinal().range(colors.map(materialColorToRgba));\n                };\n\n                $scope.$watch('barChart.series', function (updatedSeries) {\n                    vm.data = updatedSeries || [];\n\n                    generateParameterColor();\n\n                    if (chart) {\n                        chartElem.datum(vm.data).call(chart);\n                        chart.update();\n                        intervalUpdate(chart.update, 10);\n                    }\n                });\n\n\n                /**\n                 * Instantiate chart\n                 */\n                nv.addGraph(function () {\n                    chart = nv.models.discreteBarChart()\n                        .margin({top: 10, right: 0, bottom: 0, left: -50})\n                        .x(function (d) { return d.label; })\n                        .y(function (d) { return d.value; })\n                        .showValues(true)\n                        .showXAxis(false)\n                        .showYAxis(false)\n                        .valueFormat(d3.format('d'))\n                        .duration(0)\n                        .height(270)\n                        .color(function(d) {\n                            return d.color || d3.scale.paletteColors().range();\n                        });\n\n                    chart.tooltip.enabled(false);\n                    chart.noData('No data for this moment...');\n\n                    chartElem = d3.select($element.get(0))\n                        .select('.bar-chart svg')\n                        .datum(vm.data)\n                        .style('height', 270)\n                        .call(chart);\n\n                    //nv.utils.windowResize(chart.update);\n\n                    return chart;\n                }, function () {\n                    chart.dispatch.on('beforeUpdate', function () {\n                        $timeout(configBarWidthAndLabel, 0);\n                    });\n\n                    $timeout(configBarWidthAndLabel, 0);\n                });\n\n                /**\n                 * Aligns value label according to parent container size.\n                 * @return {void}\n                 */\n                function configBarWidthAndLabel() {\n                    var labels = d3.selectAll('.nv-bar text')[0],\n                        chartBars = d3.selectAll('.nv-bar')[0],\n                        legendTitles = d3.selectAll('.legend-title')[0],\n                        parentHeight = d3.select('.nvd3-svg')[0][0].getBBox().height;\n\n                    chartBars.forEach(function (item, index) {\n                        var barSize = item.getBBox(),\n                            element = d3.select(item),\n                            y = d3.transform(element.attr('transform')).translate[1];\n                        \n                        element\n                            .attr('transform', 'translate(' + Number(index * (38 + 8) + 50) + ', ' + parentHeight + ')')\n                            .select('rect')\n                            .attr('width', 38);\n\n                        element\n                            .transition()\n                            .duration(1000)\n                            .attr('transform', 'translate(' + Number(index * (38 + 8) + 50) + ', ' + y + ')');\n\n                        d3.select(labels[index])\n                            .attr('dy', barSize.height / 2)\n                            .attr('x', 19);\n                    });\n\n                    legendTitles.forEach(function (item, index) {\n                        $timeout(function () {\n                            $(item).addClass('visible');\n                        }, 200 * index);\n                    });\n                }\n\n                /**\n                 * Converts palette color name into RGBA color representation.\n                 * Should by replaced by palette for charts.\n                 *\n                 * @param {string} color    Name of color from AM palette\n                 * @returns {string} RGBa format\n                 */\n                function materialColorToRgba(color) {\n                    return 'rgba(' + $mdColorPalette[color][500].value[0] + ','\n                        + $mdColorPalette[color][500].value[1] + ','\n                        + $mdColorPalette[color][500].value[2] + ','\n                        + ($mdColorPalette[color][500].value[3] || 1) + ')';\n                }\n\n                /**\n                 * Helpful method\n                 * @private\n                 */\n                function generateParameterColor() {\n                    vm.legend.forEach(function (item, index) {\n                        item.color = item.color || materialColorToRgba(colors[index]);\n                    });\n                }\n            }]\n        };\n    }\n})();"]}