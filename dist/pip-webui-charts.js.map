{"version":3,"sources":["charts.js","pip-webui-charts-html.js","bar/bar_chart.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpfile":"pip-webui-charts.js","sourcesContent":["/**\r\n * @file Registration of chart WebUI controls\r\n * @copyright Digital Living Software Corp. 2014-2016\r\n */\r\n\r\n/* global angular */\r\n\r\n(function (angular) {\r\n    'use strict';\r\n\r\n    angular.module('pipCharts', [\r\n        'pipStaticCharts'\r\n    ]);\r\n\r\n})(window.angular);\r\n\r\n","(function(module) {\ntry {\n  module = angular.module('pipCharts.Templates');\n} catch (e) {\n  module = angular.module('pipCharts.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('bar/bar_chart.html',\n    '<div class=\"bar-chart flex-auto layout-column\">\\n' +\n    '    <svg class=\"flex-auto\"></svg>\\n' +\n    '</div>\\n' +\n    '\\n' +\n    '<div class=\"static-chart-legend\">\\n' +\n    '    <div class=\"legend-title\" ng-repeat=\"item in barChart.legend\">\\n' +\n    '        <span class=\"bullet\" ng-style=\"{\\'background-color\\': item.color}\"></span>\\n' +\n    '        <span>{{:: item.label}}</span>\\n' +\n    '    </div>\\n' +\n    '</div>');\n}]);\n})();\n","(function () {\n    'use strict';\n\n    /**\n     * @ngdoc module\n     * @name pipStaticCharts\n     *\n     * @description\n     * Bar chart on top of Rickshaw charts\n     */\n    angular.module('pipStaticCharts', [])\n        .directive('pipBarChart', pipBarChart);\n\n    function pipBarChart() {\n        return {\n            restrict: 'E',\n            scope: {\n                series: '=pipSeries'\n            },\n            bindToController: true,\n            controllerAs: 'barChart',\n            templateUrl: 'bar/bar_chart.html',\n            controller: ['$element', '$scope', '$timeout', '$interval', '$mdColorPalette', function ($element, $scope, $timeout, $interval, $mdColorPalette) {\n                var vm = this;\n                var chart = null;\n                var chartElem = null;\n                var setLabelPosition = _.debounce(setLabelPositionUnwrap, 150);\n                var colors = _.map($mdColorPalette, function (palette, color) {\n                    return color;\n                });\n\n                console.log('colors', colors);\n\n                vm.data = vm.series || [];\n\n                if ((vm.series || []).length > colors.length) {\n                    vm.data = vm.series.slice(0, 9);\n                }\n\n                // TODO [apidhirnyi] Ask Alex about colors for charts\n                //colors = _.sample(colors, colors.length);\n\n                // Sets colors of items\n                generateParameterColor();\n\n                // sets legend params\n                vm.legend = vm.data[0].values;\n\n                d3.scale.paletteColors = function () {\n                    return d3.scale.ordinal().range(colors.map(materialColorToRgba));\n                };\n\n                $scope.$watch('barChart.series', function (updatedSeries) {\n                    vm.data = updatedSeries || [];\n\n                    generateParameterColor();\n\n                    if (chart) {\n                        chartElem.datum(vm.data).call(chart);\n                        chart.update();\n                        intervalUpdate(chart.update, 10); // TODO [apidhirnyi] Temp dirty hack\n                    }\n                });\n\n\n                /**\n                 * Instantiate chart\n                 */\n                nv.addGraph(function () {\n                    chart = nv.models.discreteBarChart()\n                        .margin({top: 10, right: 0, bottom: 10, left: 0})\n                        .x(function (d) {\n                            return d.label;\n                        })\n                        .y(function (d) {\n                            return d.value;\n                        })\n                        .showValues(true)\n                        .showXAxis(false)\n                        .showYAxis(false)\n                        .valueFormat(d3.format('d'))\n                        .color(d3.scale.paletteColors().range());\n\n                    chart.tooltip.enabled(false);\n                    chart.noData('There are no readings for this moment...');\n\n                    chartElem = d3.select($element.get(0))\n                        .select('.bar-chart svg')\n                        .datum(vm.data)\n                        .call(chart);\n\n                    nv.utils.windowResize(chart.update);\n\n                    intervalUpdate(chart.update, 10);\n\n                    return chart;\n                }, function () {\n                    chart.dispatch.on('beforeUpdate', function () {\n                        $timeout(setLabelPosition, 100);    // dirty hack. Replace by callback\n                    });\n\n                    $timeout(setLabelPosition, 100);        // dirty hack. Replace by callback\n                });\n\n                /**\n                 * Aligns value label according to parent container size.\n                 * @return {void}\n                 */\n                function setLabelPositionUnwrap() {\n                    var labels = d3.selectAll('.nv-bar text')[0];\n                    var chartBars = d3.selectAll('.nv-bar')[0];\n\n                    chartBars.forEach(function (item, index) {\n                        var barSize = item.getBBox();\n\n                        d3.select(labels[index]).attr('dy', barSize.height / 2 + 6);   // 6px = magic float to align text\n                    });\n                }\n\n                /**\n                 * Converts palette color name into RGBA color representation.\n                 * Should by replaced by palette for charts.\n                 *\n                 * @param {string} color    Name of color from AM palette\n                 * @returns {string} RGBa format\n                 */\n                function materialColorToRgba(color) {\n                    return 'rgba(' + $mdColorPalette[color][500].value[0] + ','\n                        + $mdColorPalette[color][500].value[1] + ','\n                        + $mdColorPalette[color][500].value[2] + ','\n                        + ($mdColorPalette[color][500].value[3] || 1) + ')';\n                }\n\n                /**\n                 * Temp huck for demo\n                 * Dirty way to overcome async in charts\n                 */\n                function intervalUpdate(cb, times) {\n                    var counter = 0;\n\n                    var intervalID = $interval(function () {\n                        if (counter <= times) {\n                            cb();\n                            counter++;\n                        } else {\n                            $interval.cancel(intervalID);\n                        }\n                    }, 200);\n                }\n\n                /**\n                 * Helpful method\n                 * @private\n                 */\n                function generateParameterColor() {\n                    console.log('colors', colors);\n                    vm.data.forEach(function (item, index) {\n                        item.color = materialColorToRgba(colors[index]);\n                    });\n                }\n            }]\n        };\n    }\n})();"]}