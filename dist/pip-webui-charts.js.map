{"version":3,"sources":["../node_modules/browser-pack/_prelude.js","src/bar/barChart.ts","src/index.ts","src/legend/interactiveLegend.ts","src/line/lineChart.ts","src/pie/pieChart.ts","src/utility/ChartsUtilityService.ts","temp/pip-webui-charts-html.js"],"names":[],"mappings":"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,CAAC,CAAC,OAAO,CAAC,KAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC;YACxJ,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,MAAM,CAAC;QAClB,CAAC;QACL,2BAAC;IAAD,CAhCA,AAgCC,IAAA;IAED,OAAO;SACF,MAAM,CAAC,kBAAkB,EAAE,EAAE,CAAC;SAC9B,OAAO,CAAC,kBAAkB,EAAE,oBAAoB,CAAC,CAAC;AAC3D,CAAC;;;;AC1CD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"pip-webui-charts.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import {\r\n    IChartsUtilityService\r\n} from '../utility/IChartsUtilityService';\r\n\r\n{\r\n    interface IBarChartBindings {\r\n        [key: string]: any;\r\n\r\n        series: any;\r\n        xTickFormat: any;\r\n        yTickFormat: any;\r\n        interactiveLegend: any;\r\n    }\r\n\r\n    const BarChartBindings: IBarChartBindings = {\r\n        series: '<pipSeries',\r\n        xTickFormat: '<?pipXTickFormat',\r\n        yTickFormat: '<?pipYTickFormat',\r\n        interactiveLegend: '<?pipInterLegend'\r\n    }\r\n\r\n    class BarChartBindingsChanges implements IBarChartBindings, ng.IOnChangesObject {\r\n        [key: string]: any;\r\n\r\n        series: ng.IChangesObject < any > ;\r\n        xTickFormat: ng.IChangesObject < any > ;\r\n        yTickFormat: ng.IChangesObject < any > ;\r\n        interactiveLegend: ng.IChangesObject < boolean > ;\r\n    }\r\n\r\n    class BarChartController implements ng.IController, IBarChartBindings {\r\n        public series: any;\r\n        public xTickFormat: any;\r\n        public yTickFormat: any;\r\n        public interactiveLegend: boolean;\r\n        public legend: any;\r\n\r\n        private data: any;\r\n        private chart: nv.DiscreteBarChart = null;\r\n        private chartElem: any;\r\n        private colors: string[];\r\n        private height: number = 270;\r\n\r\n        constructor(\r\n            private $element: JQuery,\r\n            private $scope: ng.IScope,\r\n            private $timeout: ng.ITimeoutService,\r\n            private pipChartsUtility: IChartsUtilityService\r\n        ) {\r\n            this.colors = this.pipChartsUtility.generateMaterialColors();\r\n            $scope.$watch('$ctrl.legend', (updatedLegend) => {\r\n                if (!updatedLegend) return;\r\n\r\n                this.data = this.prepareData(updatedLegend);\r\n                this.legend = updatedLegend;\r\n\r\n                this.updateChart();\r\n            }, true);\r\n        }\r\n\r\n        public $onInit() {\r\n            this.data = this.prepareData(this.series);\r\n            this.legend = _.clone(this.series);\r\n            this.generateParameterColor();\r\n            ( < any > d3.scale).paletteColors = () => {\r\n                return d3.scale.ordinal().range(this.colors.map((color) => {\r\n                    return this.pipChartsUtility.materialColorToRgba(color);\r\n                }));\r\n            };\r\n\r\n            this.instantiateChart();\r\n        }\r\n\r\n        public $onChanges(changes: BarChartBindingsChanges) {\r\n            this.xTickFormat = changes.xTickFormat ? changes.xTickFormat.currentValue : null;\r\n            this.yTickFormat = changes.yTickFormat ? changes.yTickFormat.currentValue : null;\r\n            this.interactiveLegend = changes.interactiveLegend ? changes.interactiveLegend.currentValue : null;\r\n\r\n            if (changes.series && changes.series.currentValue !== changes.series.previousValue) {\r\n                this.series = changes.series.currentValue;\r\n                this.data = this.prepareData(this.series);\r\n                this.legend = _.clone(this.series);\r\n                this.generateParameterColor();\r\n                this.updateChart();\r\n            }\r\n        }\r\n\r\n        private updateChart() {\r\n            if (this.chart) {\r\n                this.chartElem.datum(this.data).call(this.chart);\r\n                this.configBarWidthAndLabel();\r\n                this.drawEmptyState();\r\n            }\r\n        }\r\n\r\n        private instantiateChart() {\r\n            nv.addGraph(() => {\r\n                this.chart = nv.models.discreteBarChart()\r\n                    .margin({\r\n                        top: 10,\r\n                        right: 0,\r\n                        bottom: 10,\r\n                        left: 50\r\n                    })\r\n                    .x((d) => {\r\n                        return d.label || d.key || d.x;\r\n                    })\r\n                    .y((d) => {\r\n                        return d.value;\r\n                    })\r\n                    .showValues(true)\r\n                    .staggerLabels(true)\r\n                    .showXAxis(true)\r\n                    .showYAxis(true)\r\n                    .valueFormat( < any > d3.format('d'))\r\n                    .duration(0)\r\n                    .height(this.height)\r\n                    .color((d) => {\r\n                        return this.data[d.series].color || this.pipChartsUtility.materialColorToRgba(this.colors[d.series]);\r\n                    });\r\n\r\n                this.chart.tooltip.enabled(false);\r\n                this.chart.noData('There is no data right now...');\r\n\r\n                this.chart.yAxis\r\n                    .tickFormat((d) => {\r\n                        return this.yTickFormat ? this.yTickFormat(d) : d;\r\n                    });\r\n\r\n                this.chart.xAxis\r\n                    .tickFormat((d) => {\r\n                        return this.xTickFormat ? this.xTickFormat(d) : d;\r\n                    });\r\n\r\n                this.chartElem = < any > d3.select(this.$element.get(0))\r\n                    .select('.bar-chart svg')\r\n                    .datum(this.data)\r\n                    .style('height', '285px')\r\n                    .call(this.chart);\r\n\r\n                nv.utils.windowResize(() => {\r\n                    this.chart.update();\r\n                    this.configBarWidthAndLabel(0);\r\n                    this.drawEmptyState();\r\n                });\r\n\r\n                return this.chart;\r\n            }, () => {\r\n                this.$timeout(() => {\r\n                    this.configBarWidthAndLabel();\r\n                }, 0);\r\n                this.drawEmptyState();\r\n            });\r\n        }\r\n\r\n        private prepareData(data): any {\r\n            const result = [];\r\n            _.each(data, (seria) => {\r\n                if (!seria.disabled && seria.values) result.push(seria);\r\n            });\r\n            return _.cloneDeep(result);\r\n        }\r\n\r\n        private drawEmptyState() {\r\n            if (this.$element.find('.nv-noData').length === 0) {\r\n                d3.select(this.$element.find('.empty-state')[0]).remove();\r\n            } else {\r\n                const g = this.chartElem.append('g').classed('empty-state', true),\r\n                    width = this.$element.find('.nvd3-svg').innerWidth(),\r\n                    margin = width * 0.1;\r\n\r\n                g.append('g')\r\n                    .style('fill', 'rgba(0, 0, 0, 0.08)')\r\n                    .append('rect')\r\n                    .attr('height', this.height - 10)\r\n                    .attr('width', 38);\r\n\r\n                g.append('g')\r\n                    .attr('transform', 'translate(42, 60)')\r\n                    .style('fill', 'rgba(0, 0, 0, 0.08)')\r\n                    .append('rect')\r\n                    .attr('height', 200)\r\n                    .attr('width', 38);\r\n\r\n                g.append('g')\r\n                    .attr('transform', 'translate(84, 160)')\r\n                    .style('fill', 'rgba(0, 0, 0, 0.08)')\r\n                    .append('rect')\r\n                    .attr('height', 100)\r\n                    .attr('width', 38);\r\n\r\n                g.attr('transform', 'translate(' + (50 + margin) + ', 0), ' + 'scale(' + ((width - 2 * margin) / 126) + ', 1)');\r\n            }\r\n        }\r\n\r\n        private configBarWidthAndLabel(timeout: number = 1000) {\r\n            const labels = this.$element.find('.nv-bar text'),\r\n                chartBars = this.$element.find('.nv-bar'),\r\n                parentHeight = ( < any > this.$element.find('.nvd3-svg')[0]).getBBox().height;\r\n\r\n            d3.select(this.$element.find('.bar-chart')[0]).classed('visible', true);\r\n\r\n            _.each(chartBars, (item: EventTarget, index: number) => {\r\n                const barHeight = Number(d3.select(item).select('rect').attr('height')),\r\n                    barWidth = Number(d3.select(item).select('rect').attr('width')),\r\n                    element = d3.select(item),\r\n                    x = d3.transform(element.attr('transform')).translate[0],\r\n                    y = d3.transform(element.attr('transform')).translate[1];\r\n\r\n                element\r\n                    .attr('transform', 'translate(' + Number(x + index * (barWidth + 15)) + ', ' + (this.height - 20) + ')')\r\n                    .select('rect').attr('height', 0);\r\n\r\n                element\r\n                    .transition()\r\n                    .duration(timeout)\r\n                    .attr('transform', 'translate(' + Number(x + index * (barWidth + 15)) + ', ' + y + ')')\r\n                    .select('rect').attr('height', barHeight);\r\n\r\n                d3.select(labels[index])\r\n                    .attr('dy', barHeight / 2 + 10)\r\n                    .attr('x', barWidth / 2);\r\n            });\r\n        }\r\n\r\n        private generateParameterColor() {\r\n            if (!this.data) return;\r\n\r\n            _.each(this.data, (item: any, index: number) => {\r\n                if (item.values[0]) {\r\n                    item.values[0].color = item.values[0].color || this.pipChartsUtility.getMaterialColor(index, this.colors);\r\n                    item.color = item.values[0].color;\r\n                }\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    const BarChart: ng.IComponentOptions = {\r\n        bindings: BarChartBindings,\r\n        templateUrl: 'bar/barChart.html',\r\n        controller: BarChartController\r\n    }\r\n\r\n    angular.module('pipBarCharts', [])\r\n        .component('pipBarChart', BarChart);\r\n}","﻿angular.module('pipCharts', [\r\n    'pipBarCharts',\r\n    'pipLineCharts',\r\n    'pipPieCharts',\r\n    'pipChartLegends',\r\n    'pipChartsUtility',\r\n    'pipCharts.Templates'\r\n]);","import {\r\n    IChartsUtilityService\r\n} from '../utility/IChartsUtilityService';\r\n\r\n{\r\n    interface IChartLegendBindings {\r\n        [key: string]: any;\r\n\r\n        series: any;\r\n        interactive: any;\r\n    }\r\n\r\n    const ChartLegendBindings: IChartLegendBindings = {\r\n        series: '<pipSeries',\r\n        interactive: '<pipInteractive'\r\n    }\r\n\r\n    class ChartLegendBindingsChanges implements ng.IOnChangesObject, IChartLegendBindings {\r\n        [key: string]: any;\r\n\r\n        series: ng.IChangesObject < any > ;\r\n        interactive: ng.IChangesObject < boolean > ;\r\n    }\r\n\r\n    class ChartLegendController implements ng.IController, IChartLegendBindings {\r\n        public series: any;\r\n        public interactive: boolean;\r\n\r\n        private colors: string[];\r\n\r\n        constructor(\r\n            private $element: JQuery,\r\n            private $scope: ng.IScope,\r\n            private $timeout: ng.ITimeoutService,\r\n            private pipChartsUtility: IChartsUtilityService\r\n        ) {\r\n            this.colors = this.pipChartsUtility.generateMaterialColors();\r\n        }\r\n\r\n        public $onInit() {\r\n            this.updateLegends();\r\n        }\r\n\r\n        public $onChanges(changes: ChartLegendBindingsChanges) {\r\n            if (changes.series && changes.series.currentValue !== changes.series.previousValue) {\r\n                this.series = changes.series.currentValue;\r\n                this.updateLegends();\r\n            }\r\n\r\n            if (changes.interactive && changes.interactive.currentValue !== changes.interactive.previousValue) {\r\n                this.interactive = changes.interactive.currentValue;\r\n                if (this.interactive === true) {\r\n                    this.$timeout(() => {\r\n                        this.colorCheckboxes();\r\n                    }, 0);\r\n                }\r\n            }\r\n        }\r\n\r\n        private updateLegends() {\r\n            this.$timeout(() => {\r\n                this.animate();\r\n                this.colorCheckboxes();\r\n            }, 0);\r\n            this.prepareSeries();\r\n        }\r\n\r\n        private colorCheckboxes() {\r\n            const checkboxContainers = this.$element.find('md-checkbox .md-container');\r\n\r\n            _.each(checkboxContainers, (item: EventTarget, index: number) => {\r\n                if (index >= this.series.length) {\r\n                    return\r\n                }\r\n                $(item)\r\n                    .css('color', this.series[index].color || this.colors[index])\r\n                    .find('.md-icon')\r\n                    .css('background-color', this.series[index].color || this.colors[index]);\r\n            });\r\n        }\r\n\r\n        private animate() {\r\n            const legendTitles = this.$element.find('.chart-legend-item');\r\n\r\n            _.each(legendTitles, (item: EventTarget, index: number) => {\r\n                this.$timeout(() => {\r\n                    $(item).addClass('visible');\r\n                }, 200 * index);\r\n            });\r\n        }\r\n\r\n        private prepareSeries() {\r\n            if (!this.series) return;\r\n\r\n            _.each(this.series, (item: any, index: number) => {\r\n                const materialColor = this.pipChartsUtility.getMaterialColor(index, this.colors);\r\n                item.color = item.color || (item.values && item.values[0] && item.values[0].color ? item.values[0].color : materialColor);\r\n                item.disabled = item.disabled || false;\r\n            });\r\n        }\r\n    }\r\n\r\n    const ChartLegend: ng.IComponentOptions = {\r\n        bindings: ChartLegendBindings,\r\n        templateUrl: 'legend/interactiveLegend.html',\r\n        controller: ChartLegendController\r\n    }\r\n\r\n    angular.module('pipChartLegends', [])\r\n        .component('pipChartLegend', ChartLegend);\r\n}","import {\r\n    IChartsUtilityService\r\n} from '../utility/IChartsUtilityService';\r\n\r\n{\r\n    interface ILineChartBindings {\r\n        [key: string]: any;\r\n\r\n        series: any;\r\n        showYAxis: any;\r\n        showXAxis: any;\r\n        xFormat: any;\r\n        xTickFormat: any;\r\n        yTickFormat: any;\r\n        xTickValues: any;\r\n        dynamic: any;\r\n        fixedHeight: any;\r\n        dynamicHeight: any;\r\n        minHeight: any;\r\n        maxHeight: any;\r\n        interactiveLegend: any;\r\n    }\r\n\r\n    const LineChartBindings: ILineChartBindings = {\r\n        series: '<pipSeries',\r\n        showYAxis: '<?pipYAxis',\r\n        showXAxis: '<?pipXAxis',\r\n        xFormat: '<?pipXFormat',\r\n        xTickFormat: '<?pipXTickFormat',\r\n        yTickFormat: '<?pipYTickFormat',\r\n        xTickValues: '<?pipXTickValues',\r\n        dynamic: '<?pipDynamic',\r\n        fixedHeight: '<?pipDiagramHeight',\r\n        dynamicHeight: '<?pipDynamicHeight',\r\n        minHeight: '<?pipMinHeight',\r\n        maxHeight: '<?pipMaxHeight',\r\n        interactiveLegend: '<?pipInterLegend'\r\n    }\r\n\r\n    class LineChartBindingsChanges implements ng.IOnChangesObject, ILineChartBindings {\r\n        [key: string]: any;\r\n\r\n        fixedHeight: ng.IChangesObject < number > ;\r\n        dynamicHeight: ng.IChangesObject < boolean > ;\r\n        minHeight: ng.IChangesObject < number > ;\r\n        maxHeight: ng.IChangesObject < number > ;\r\n\r\n        series: ng.IChangesObject < any > ;\r\n        showYAxis: ng.IChangesObject < boolean > ;\r\n        showXAxis: ng.IChangesObject < boolean > ;\r\n        xFormat: ng.IChangesObject < any > ;\r\n        xTickFormat: ng.IChangesObject < any > ;\r\n        yTickFormat: ng.IChangesObject < any > ;\r\n        xTickValues: ng.IChangesObject < any > ;\r\n        dynamic: ng.IChangesObject < boolean > ;\r\n        interactiveLegend: ng.IChangesObject < boolean > ;\r\n    }\r\n\r\n    class LineChartController implements ng.IController, ILineChartBindings {\r\n        public fixedHeight: number = this.HEIGHT;\r\n        public dynamicHeight: boolean = false;\r\n        public minHeight: number = this.HEIGHT;\r\n        public maxHeight: number = this.HEIGHT;\r\n        public series: any;\r\n        public showYAxis: boolean = true;\r\n        public showXAxis: boolean = true;\r\n        public xFormat: Function;\r\n        public xTickFormat: Function;\r\n        public yTickFormat: Function;\r\n        public xTickValues: number[];\r\n        public dynamic: boolean = false;\r\n        public interactiveLegend: boolean = false;\r\n        public data: any;\r\n        public legend: any;\r\n        public sourceEvents: any;\r\n\r\n        private HEIGHT = 270;\r\n        private chart: nv.LineChart = null;\r\n        private chartElem: any = null;\r\n        private setZoom: Function = null;\r\n        private updateZoomOptions: Function = null;\r\n        private colors: string[];\r\n\r\n        constructor(\r\n            private $element: JQuery,\r\n            private $scope: ng.IScope,\r\n            private $timeout: ng.ITimeoutService,\r\n            private pipChartsUtility: IChartsUtilityService\r\n        ) {\r\n            this.colors = this.pipChartsUtility.generateMaterialColors();\r\n\r\n            $scope.$watch('$ctrl.legend', (updatedLegend) => {\r\n                this.data = this.prepareData(updatedLegend);\r\n                this.legend = updatedLegend;\r\n\r\n                this.updateChart();\r\n            }, true);\r\n\r\n            $scope.$on('$destroy', () => {\r\n                $timeout(() => {\r\n                    d3.selectAll('.nvtooltip').style('opacity', 0);\r\n                }, 800)\r\n            });\r\n        }\r\n\r\n        public $onInit() {\r\n            this.data = this.prepareData(this.series) || [];\r\n            this.legend = _.clone(this.series);\r\n            this.sourceEvents = [];\r\n\r\n            this.generateParameterColor();\r\n\r\n            ( < any > d3.scale).paletteColors = () => {\r\n                return d3.scale.ordinal().range(this.colors.map((color) => {\r\n                    return this.pipChartsUtility.materialColorToRgba(color);\r\n                }));\r\n            };\r\n\r\n            this.instantiateChart();\r\n        }\r\n\r\n        public $onChanges(changes: LineChartBindingsChanges) {\r\n            this.fixedHeight = changes.fixedHeight ? changes.fixedHeight.currentValue : this.HEIGHT;\r\n            this.minHeight = changes.minHeight ? changes.minHeight.currentValue : this.HEIGHT;\r\n            this.maxHeight = changes.maxHeight ? changes.maxHeight.currentValue : this.HEIGHT;\r\n            this.dynamicHeight = changes.dynamicHeight ? changes.dynamicHeight.currentValue : false;\r\n\r\n            this.showXAxis = changes.showXAxis ? changes.showXAxis.currentValue : true;\r\n            this.showYAxis = changes.showYAxis ? changes.showYAxis.currentValue : true;\r\n            this.dynamic = changes.dynamic ? changes.dynamic.currentValue : false;\r\n            this.interactiveLegend = changes.interactiveLegend ? changes.interactiveLegend.currentValue : false;\r\n\r\n            this.xFormat = changes.xFormat ? changes.xFormat.currentValue : null;\r\n            this.xTickFormat = changes.xTickFormat ? changes.xTickFormat.currentValue : null;\r\n            this.yTickFormat = changes.yTickFormat ? changes.yTickFormat.currentValue : null;\r\n\r\n            if (changes.xTickValues && changes.xTickValues.currentValue !== changes.xTickValues.previousValue) {\r\n                this.xTickValues = changes.xTickValues.currentValue;\r\n                this.updateXTickValues();\r\n            }\r\n\r\n            if (changes.series && changes.series.currentValue !== changes.series.previousValue) {\r\n                this.updateSeries();\r\n            }\r\n        }\r\n\r\n        private prepareData(data) {\r\n            const result = [];\r\n            _.each(data, (seria) => {\r\n                if (!seria.disabled && seria.values) result.push(seria);\r\n            });\r\n\r\n            return _.cloneDeep(result);\r\n        }\r\n\r\n        private getHeight() {\r\n            /*if (this.dynamicHeight) {\r\n                const heigth = Math.min(Math.max(this.minHeight, this.$element.parent().innerHeight()), this.maxHeight);\r\n                return heigth;\r\n            } else {\r\n                return this.fixedHeight;\r\n            }*/\r\n            return this.dynamicHeight ? Math.min(Math.max(this.minHeight, this.$element.parent().innerHeight()), this.maxHeight) : this.fixedHeight;\r\n        };\r\n\r\n        public zoomIn() {\r\n            if (this.setZoom) {\r\n                this.setZoom('in');\r\n            }\r\n        };\r\n\r\n        public zoomOut() {\r\n            if (this.setZoom) {\r\n                this.setZoom('out');\r\n            }\r\n        };\r\n\r\n        private instantiateChart() {\r\n            nv.addGraph(() => {\r\n                this.chart = nv.models.lineChart()\r\n                    .margin({\r\n                        top: 20,\r\n                        right: 20,\r\n                        bottom: 30,\r\n                        left: 30\r\n                    })\r\n                    .x((d) => {\r\n                        return (d !== undefined && d.x !== undefined) ? (this.xFormat ? this.xFormat(d.x) : d.x) : d;\r\n                    })\r\n                    .y((d) => {\r\n                        return (d !== undefined && d.value !== undefined) ? d.value : d;\r\n                    })\r\n                    .height(this.getHeight() - 50)\r\n                    .useInteractiveGuideline(true)\r\n                    .showXAxis(true)\r\n                    .showYAxis(true)\r\n                    .showLegend(false)\r\n                    .color((d) => {\r\n                        return d.color || ( < any > d3.scale).paletteColors().range();\r\n                    });\r\n\r\n                this.chart.tooltip.enabled(false);\r\n                this.chart.noData('There is no data right now...');\r\n\r\n                this.chart.yAxis\r\n                    .tickFormat((d) => {\r\n                        return this.yTickFormat ? this.yTickFormat(d) : d;\r\n                    });\r\n\r\n                this.chart.xAxis\r\n                    .tickFormat((d) => {\r\n                        return this.xTickFormat ? this.xTickFormat(d) : d;\r\n                    })\r\n                    .tickValues(this.xTickValues && _.isArray(this.xTickValues) && this.xTickValues.length > 2 ?\r\n                        d3.range(this.xTickValues[0], this.xTickValues[1], this.xTickValues[2]) : null);\r\n\r\n                this.chartElem = d3.select(this.$element.get(0)).select('.line-chart svg');\r\n                this.chartElem.datum(this.data || []).style('height', (this.getHeight() - 50) + 'px').call(this.chart);\r\n                // Handle touches for correcting tooltip position\r\n                $('.line-chart svg').on('touchstart touchmove', (e) => {\r\n                    this.$timeout(() => {\r\n                        const tooltip = $('.nvtooltip'),\r\n                            tooltipW = tooltip.innerWidth(),\r\n                            bodyWidth = $('body').innerWidth(),\r\n                            x = e.originalEvent['touches'][0]['pageX'],\r\n                            y = e.originalEvent['touches'][0]['pageY'];\r\n\r\n                        tooltip.css('transform', 'translate(' +\r\n                            (x + tooltipW >= bodyWidth ? (x - tooltipW) : x) + ',' +\r\n                            y + ')');\r\n                        tooltip.css('left', 0);\r\n                        tooltip.css('top', 0);\r\n                    });\r\n                });\r\n\r\n                $('.line-chart svg').on('touchstart touchend', (e) => {\r\n                    const removeTooltip = () => {\r\n                        $('.nvtooltip').css('opacity', 0);\r\n                    };\r\n\r\n                    removeTooltip();\r\n\r\n                    this.$timeout(() => {\r\n                        removeTooltip();\r\n                    }, 500);\r\n                });\r\n\r\n                if (this.dynamic) {\r\n                    this.addZoom(this.chart, this.chartElem);\r\n                }\r\n\r\n                nv.utils.windowResize(() => {\r\n                    this.onResize();\r\n                });\r\n\r\n                this.$scope.$on('pipMainResized', () => {\r\n                    this.onResize();\r\n                });\r\n\r\n                return this.chart;\r\n            }, () => {\r\n                this.drawEmptyState();\r\n            });\r\n        }\r\n\r\n        private updateXTickValues() {\r\n            if (!this.chart) return;\r\n\r\n            this.chart.xAxis\r\n                .tickValues(this.xTickValues && _.isArray(this.xTickValues) && this.xTickValues.length > 2 ?\r\n                    d3.range(this.xTickValues[0], this.xTickValues[1], this.xTickValues[2]) : null);\r\n        }\r\n\r\n        private updateChart() {\r\n            if (this.chart) {\r\n                this.updateXTickValues();\r\n\r\n                this.chartElem.datum(this.data || []).call(this.chart);\r\n                this.drawEmptyState();\r\n\r\n                if (this.updateZoomOptions) this.updateZoomOptions(this.data);\r\n            }\r\n        }\r\n\r\n        private updateSeries() {\r\n            this.data = this.prepareData(this.series);\r\n            this.legend = _.clone(this.series);\r\n\r\n            this.generateParameterColor();\r\n            this.updateChart();\r\n        }\r\n\r\n        private onResize() {\r\n            this.chart.height(this.getHeight() - 50);\r\n            this.chartElem.style('height', (this.getHeight() - 50) + 'px');\r\n            this.chart.update();\r\n            this.drawEmptyState();\r\n        }\r\n\r\n        private drawEmptyState() {\r\n            if (!this.$element.find('text.nv-noData').get(0)) {\r\n                d3.select(this.$element.find('.empty-state')[0]).remove();\r\n            } else {\r\n                const containerWidth = this.$element.find('.line-chart').innerWidth(),\r\n                    containerHeight = this.$element.find('.line-chart').innerHeight();\r\n\r\n                if (this.$element.find('.empty-state').get(0)) {\r\n                    this.chartElem\r\n                        .select('image')\r\n                        .attr('transform', 'scale(' + (containerWidth / 1151) + ',' + (containerHeight / 216) + ')');\r\n                } else {\r\n                    this.chartElem\r\n                        .append(\"defs\")\r\n                        .append(\"pattern\")\r\n                        .attr(\"height\", 1)\r\n                        .attr(\"width\", 1)\r\n                        .attr(\"x\", \"0\")\r\n                        .attr(\"y\", \"0\")\r\n                        .attr(\"id\", \"bg\")\r\n                        .append(\"image\")\r\n                        .attr('x', 17)\r\n                        .attr('y', 0)\r\n                        .attr('height', \"216px\")\r\n                        .attr('width', \"1151px\")\r\n                        .attr('transform', 'scale(' + (containerWidth / 1151) + ',' + (containerHeight / 216) + ')')\r\n                        .attr(\"xlink:href\", \"images/line_chart_empty_state.svg\");\r\n\r\n                    this.chartElem\r\n                        .append('rect')\r\n                        .classed('empty-state', true)\r\n                        .attr('height', \"100%\")\r\n                        .attr('width', \"100%\")\r\n                        .attr('fill', 'url(#bg)');\r\n                }\r\n            }\r\n        }\r\n\r\n        private updateScroll(domains, boundary) {\r\n            const bDiff = boundary[1] - boundary[0],\r\n                domDiff = domains[1] - domains[0],\r\n                isEqual = (domains[1] - domains[0]) / bDiff === 1;\r\n\r\n            $(this.$element[0]).find('.visual-scroll')\r\n                .css('opacity', function () {\r\n                    return isEqual ? 0 : 1;\r\n                });\r\n\r\n            if (isEqual) return;\r\n\r\n            $(this.$element[0]).find('.scrolled-block')\r\n                .css('left', function () {\r\n                    return domains[0] / bDiff * 100 + '%';\r\n                })\r\n                .css('width', function () {\r\n                    return domDiff / bDiff * 100 + '%';\r\n                });\r\n        }\r\n\r\n        private generateParameterColor() {\r\n            if (!this.data) return;\r\n\r\n            _.each(this.data, (item, index: number) => {\r\n                item.color = item.color || this.pipChartsUtility.getMaterialColor(index, this.colors);\r\n            });\r\n        }\r\n\r\n        private addZoom(chart, svg) {\r\n            // scaleExtent\r\n            const scaleExtent = 4;\r\n\r\n            // parameters\r\n            let yAxis = null;\r\n            let xAxis = null;\r\n            let xDomain = null;\r\n            let yDomain = null;\r\n            let redraw = null;\r\n\r\n            // scales\r\n            let xScale = null;\r\n            let yScale = null;\r\n\r\n            // min/max boundaries\r\n            let x_boundary = null;\r\n            let y_boundary = null;\r\n\r\n            // create d3 zoom handler\r\n            let d3zoom = d3.behavior.zoom();\r\n            let prevXDomain = null;\r\n            let prevScale = null;\r\n            let prevTranslate = null;\r\n\r\n            const setData = (newChart) => {\r\n                // parameters\r\n                yAxis = newChart.yAxis;\r\n                xAxis = newChart.xAxis;\r\n                xDomain = newChart.xDomain || xAxis.scale().domain;\r\n                yDomain = newChart.yDomain || yAxis.scale().domain;\r\n                redraw = newChart.update;\r\n\r\n                // scales\r\n                xScale = xAxis.scale();\r\n                yScale = yAxis.scale();\r\n\r\n                // min/max boundaries\r\n                x_boundary = xAxis.scale().domain().slice();\r\n                y_boundary = yAxis.scale().domain().slice();\r\n\r\n                // create d3 zoom handler\r\n                prevXDomain = x_boundary;\r\n                prevScale = d3zoom.scale();\r\n                prevTranslate = d3zoom.translate();\r\n\r\n                // ensure nice axis\r\n                xScale.nice();\r\n                yScale.nice();\r\n            }\r\n\r\n            setData(chart);\r\n\r\n            // fix domain\r\n            const fixDomain = (domain, boundary, scale, translate) => {\r\n                if (domain[0] < boundary[0]) {\r\n                    domain[0] = boundary[0];\r\n                    if (prevXDomain[0] !== boundary[0] || scale !== prevScale) {\r\n                        domain[1] += (boundary[0] - domain[0]);\r\n                    } else {\r\n                        domain[1] = prevXDomain[1];\r\n                        translate = _.clone(prevTranslate);\r\n                    }\r\n\r\n                }\r\n                if (domain[1] > boundary[1]) {\r\n                    domain[1] = boundary[1];\r\n                    if (prevXDomain[1] !== boundary[1] || scale !== prevScale) {\r\n                        domain[0] -= (domain[1] - boundary[1]);\r\n                    } else {\r\n                        domain[0] = prevXDomain[0];\r\n                        translate = _.clone(prevTranslate);\r\n                    }\r\n                }\r\n\r\n                d3zoom.translate(translate);\r\n                prevXDomain = _.clone(domain);\r\n                prevScale = _.clone(scale);\r\n                prevTranslate = _.clone(translate);\r\n\r\n                return domain;\r\n            }\r\n\r\n            const updateChart = () => {\r\n                d3zoom.scale(1);\r\n                d3zoom.translate([0, 0]);\r\n                xScale.domain(x_boundary);\r\n                d3zoom.x(xScale).y(yScale);\r\n                svg.call(d3zoom);\r\n            }\r\n\r\n            // zoom event handler\r\n            const zoomed = () => {\r\n                if (( < any > d3.event).scale === 1) {\r\n                    unzoomed();\r\n                    updateChart();\r\n                } else {\r\n                    xDomain(fixDomain(xScale.domain(), x_boundary, ( < any > d3.event).scale, ( < any > d3.event).translate));\r\n                    redraw();\r\n                }\r\n\r\n                this.updateScroll(xScale.domain(), x_boundary);\r\n            }\r\n\r\n            //\r\n            this.setZoom = (which) => {\r\n                const center0 = [svg[0][0].getBBox().width / 2, svg[0][0].getBBox().height / 2];\r\n                const translate0 = d3zoom.translate(),\r\n                    coordinates0 = coordinates(center0);\r\n\r\n                if (which === 'in') {\r\n                    if (prevScale < scaleExtent) d3zoom.scale(prevScale + 0.2);\r\n                } else {\r\n                    if (prevScale > 1) d3zoom.scale(prevScale - 0.2);\r\n                }\r\n\r\n                const center1 = point(coordinates0);\r\n                d3zoom.translate([translate0[0] + center0[0] - center1[0], translate0[1] + center0[1] - center1[1]]);\r\n\r\n                d3zoom.event(svg);\r\n            };\r\n\r\n            const step = (which) => {\r\n                const translate = d3zoom.translate();\r\n\r\n                if (which === 'right') {\r\n                    translate[0] -= 20;\r\n                } else {\r\n                    translate[0] += 20;\r\n                }\r\n\r\n                d3zoom.translate(translate);\r\n                d3zoom.event(svg);\r\n            }\r\n\r\n            const coordinates = (point) => {\r\n                const scale = d3zoom.scale(),\r\n                    translate = d3zoom.translate();\r\n                return [(point[0] - translate[0]) / scale, (point[1] - translate[1]) / scale];\r\n            }\r\n\r\n            const point = (coordinates) => {\r\n                const scale = d3zoom.scale(),\r\n                    translate = d3zoom.translate();\r\n                return [coordinates[0] * scale + translate[0], coordinates[1] * scale + translate[1]];\r\n            }\r\n\r\n            const keypress = () => {\r\n                switch (( < any > d3.event).keyCode) {\r\n                    case 39:\r\n                        step('right');\r\n                        break;\r\n                    case 37:\r\n                        step('left');\r\n                        break;\r\n                    case 107:\r\n                        this.setZoom('in');\r\n                        break;\r\n                    case 109:\r\n                        this.setZoom('out');\r\n                }\r\n            }\r\n\r\n            // zoom event handler\r\n            const unzoomed = () => {\r\n                xDomain(x_boundary);\r\n                redraw();\r\n                d3zoom.scale(1);\r\n                d3zoom.translate([0, 0]);\r\n                prevScale = 1;\r\n                prevTranslate = [0, 0];\r\n            }\r\n\r\n            // initialize wrapper\r\n            d3zoom.x(xScale)\r\n                .y(yScale)\r\n                .scaleExtent([1, scaleExtent])\r\n                .on('zoom', zoomed);\r\n\r\n            // add handler\r\n            svg.call(d3zoom).on('dblclick.zoom', unzoomed);\r\n            $(this.$element.get(0)).addClass('dynamic');\r\n\r\n            // add keyboard handlers\r\n            svg\r\n                .attr('focusable', false)\r\n                .style('outline', 'none')\r\n                .on('keydown', keypress)\r\n                .on('focus', () => {});\r\n\r\n            const getXMinMax = (data) => {\r\n                let maxVal, minVal = null;\r\n\r\n                for (let i = 0; i < data.length; i++) {\r\n                    if (!data[i].disabled) {\r\n                        const tempMinVal = d3.max(data[i].values, (d: any) => {\r\n                            return this.xFormat ? this.xFormat(d.x) : d.x;\r\n                        });\r\n                        const tempMaxVal = d3.min(data[i].values, (d: any) => {\r\n                            return this.xFormat ? this.xFormat(d.x) : d.x;\r\n                        });\r\n                        minVal = (!minVal || tempMinVal < minVal) ? tempMinVal : minVal;\r\n                        maxVal = (!maxVal || tempMaxVal > maxVal) ? tempMaxVal : maxVal;\r\n                    }\r\n                }\r\n                return [maxVal, minVal];\r\n            };\r\n\r\n            const updateZoomOptions = (data) => {\r\n                yAxis = chart.yAxis;\r\n                xAxis = chart.xAxis;\r\n\r\n                xScale = xAxis.scale();\r\n                yScale = yAxis.scale();\r\n\r\n                x_boundary = getXMinMax(data);\r\n\r\n                if (d3zoom.scale() === 1) {\r\n                    d3zoom.x(xScale).y(yScale);\r\n                    svg.call(d3zoom);\r\n                    d3zoom.event(svg);\r\n                }\r\n\r\n                this.updateScroll(xScale.domain(), x_boundary);\r\n            }\r\n        }\r\n    }\r\n\r\n    const LineChart: ng.IComponentOptions = {\r\n        bindings: LineChartBindings,\r\n        templateUrl: 'line/lineChart.html',\r\n        controller: LineChartController\r\n    }\r\n\r\n    angular.module('pipLineCharts', [])\r\n        .component('pipLineChart', LineChart);\r\n}\r\n/*\r\n    function pipLineChart() {\r\n        return {\r\n            restrict: 'E',\r\n            scope: {\r\n                series: '=pipSeries',\r\n                showYAxis: '=pipYAxis',\r\n                showXAxis: '=pipXAxis',\r\n                xFormat: '=pipXFormat',\r\n                xTickFormat: '=pipXTickFormat',\r\n                yTickFormat: '=pipYTickFormat',\r\n                xTickValues: '=pipXTickValues',\r\n                dynamic: '=pipDynamic',\r\n                fixedHeight: '@pipDiagramHeight',\r\n                dynamicHeight: '@pipDynamicHeight',\r\n                minHeight: '@pipMinHeight',\r\n                maxHeight: '@pipMaxHeight',\r\n                interactiveLegend: '=pipInterLegend'\r\n            },\r\n            bindToController: true,\r\n            controllerAs: 'lineChart',\r\n            templateUrl: 'line/lineChart.html',\r\n            controller: function ($element, $scope, $timeout, $interval, $mdColorPalette) {\r\n                var vm = this;\r\n                var chart = null;\r\n                var chartElem = null;\r\n                var setZoom = null;\r\n                var updateZoomOptions = null;\r\n                var fixedHeight = vm.fixedHeight || 270;\r\n                var dynamicHeight = vm.dynamicHeight || false;\r\n                var minHeight = vm.minHeight || fixedHeight;\r\n                var maxHeight = vm.maxHeight || fixedHeight;\r\n\r\n                var filteredColor = _.filter($mdColorPalette, function (palette, color) {\r\n                    return _.isObject(color) && _.isObject(color[500] && _.isArray(color[500].value));\r\n                });\r\n                var colors = _.map(filteredColor, function (palette, color) {\r\n                    return color;\r\n                });\r\n                vm.data = prepareData(vm.series) || [];\r\n                vm.legend = _.clone(vm.series);\r\n                vm.sourceEvents = [];\r\n\r\n                vm.isVisibleX = function () {\r\n                    return vm.showXAxis == undefined ? true : vm.showXAxis;\r\n                };\r\n\r\n                vm.isVisibleY = function () {\r\n                    return vm.showYAxis == undefined ? true : vm.showYAxis;\r\n                };\r\n\r\n                vm.zoomIn = function () {\r\n                    if (setZoom) {\r\n                        setZoom('in');\r\n                    }\r\n                };\r\n\r\n                vm.zoomOut = function () {\r\n                    if (setZoom) {\r\n                        setZoom('out');\r\n                    }\r\n                };\r\n\r\n                if (vm.series && vm.series.length > colors.length) {\r\n                    vm.data = vm.series.slice(0, 9);\r\n                }\r\n\r\n                // Sets colors of items\r\n                generateParameterColor();\r\n\r\n                ( < any > d3.scale).paletteColors = function () {\r\n                    return d3.scale.ordinal().range(colors.map(materialColorToRgba));\r\n                };\r\n\r\n                $scope.$watch('lineChart.series', function (updatedSeries) {\r\n                    vm.data = prepareData(updatedSeries);\r\n                    vm.legend = _.clone(vm.series);\r\n\r\n                    generateParameterColor();\r\n\r\n                    if (chart) {\r\n                        chart.xAxis\r\n                            .tickValues(vm.xTickValues && _.isArray(vm.xTickValues) && vm.xTickValues.length > 2 ?\r\n                                d3.range(vm.xTickValues[0], vm.xTickValues[1], vm.xTickValues[2]) : null);\r\n\r\n                        chartElem.datum(vm.data || []).call(chart);\r\n                        drawEmptyState();\r\n\r\n                        if (updateZoomOptions) updateZoomOptions(vm.data);\r\n                    }\r\n                }, true);\r\n\r\n                $scope.$on('$destroy', () => {\r\n                    setTimeout(() => {\r\n                        d3.selectAll('.nvtooltip').style('opacity', 0);\r\n                    }, 800)\r\n                });\r\n\r\n                function prepareData(data) {\r\n                    let result = [];\r\n                    _.each(data, (seria) => {\r\n                        if (!seria.disabled && seria.values) result.push(seria);\r\n                    });\r\n\r\n                    return _.cloneDeep(result);\r\n                }\r\n\r\n                var getHeight = () => {\r\n                    if (dynamicHeight) {\r\n                        const heigth = Math.min(Math.max(minHeight, $element.parent().innerHeight()), maxHeight);\r\n                        return heigth;\r\n                    } else {\r\n                        return fixedHeight;\r\n                    }\r\n                };\r\n\r\n                /**\r\n                 * Instantiate chart\r\n                 */\r\n/*\r\nnv.addGraph(() => {\r\n    chart = nv.models.lineChart()\r\n        .margin({\r\n            top: 20,\r\n            right: 20,\r\n            bottom: 30,\r\n            left: 30\r\n        })\r\n        .x(function (d) {\r\n            return (d !== undefined && d.x !== undefined) ? (vm.xFormat ? vm.xFormat(d.x) : d.x) : d;\r\n        })\r\n        .y(function (d) {\r\n            return (d !== undefined && d.value !== undefined) ? d.value : d;\r\n        })\r\n        .height(getHeight() - 50)\r\n        .useInteractiveGuideline(true)\r\n        .showXAxis(true)\r\n        .showYAxis(true)\r\n        .showLegend(false)\r\n        .color(function (d) {\r\n            return d.color || ( < any > d3.scale).paletteColors().range();\r\n        });\r\n\r\n    chart.tooltip.enabled(false);\r\n    chart.noData('There is no data right now...');\r\n\r\n    chart.yAxis\r\n        .tickFormat(function (d) {\r\n            return vm.yTickFormat ? vm.yTickFormat(d) : d;\r\n        });\r\n\r\n    chart.xAxis\r\n        .tickFormat(function (d) {\r\n            return vm.xTickFormat ? vm.xTickFormat(d) : d;\r\n        })\r\n        .tickValues(vm.xTickValues && _.isArray(vm.xTickValues) && vm.xTickValues.length > 2 ?\r\n            d3.range(vm.xTickValues[0], vm.xTickValues[1], vm.xTickValues[2]) : null);\r\n\r\n    chartElem = d3.select($element.get(0)).select('.line-chart svg');\r\n    chartElem.datum(vm.data || []).style('height', (getHeight() - 50) + 'px').call(chart);\r\n    // Handle touches for correcting tooltip position\r\n    $('.line-chart svg').on('touchstart touchmove', (e) => {\r\n        setTimeout(() => {\r\n            let tooltip = $('.nvtooltip'),\r\n                tooltipW = tooltip.innerWidth(),\r\n                bodyWidth = $('body').innerWidth(),\r\n                x = e.originalEvent['touches'][0]['pageX'],\r\n                y = e.originalEvent['touches'][0]['pageY'];\r\n\r\n            tooltip.css('transform', 'translate(' +\r\n                (x + tooltipW >= bodyWidth ? (x - tooltipW) : x) + ',' +\r\n                y + ')');\r\n            tooltip.css('left', 0);\r\n            tooltip.css('top', 0);\r\n        });\r\n    });\r\n\r\n    $('.line-chart svg').on('touchstart touchend', (e) => {\r\n        let removeTooltip = () => {\r\n            let tooltip = $('.nvtooltip');\r\n            tooltip.css('opacity', 0);\r\n        };\r\n\r\n        removeTooltip();\r\n\r\n        setTimeout(() => {\r\n            removeTooltip();\r\n        }, 500);\r\n    });\r\n\r\n    if (vm.dynamic) {\r\n        addZoom(chart, chartElem);\r\n    }\r\n\r\n    nv.utils.windowResize(() => {\r\n        onResize();\r\n    });\r\n\r\n    $scope.$on('pipMainResized', () => {\r\n        onResize();\r\n    });\r\n\r\n    return chart;\r\n}, () => {\r\n    drawEmptyState();\r\n});\r\n\r\nfunction onResize() {\r\n    chart.height(getHeight() - 50);\r\n    chartElem.style('height', (getHeight() - 50) + 'px');\r\n    chart.update();\r\n    drawEmptyState();\r\n}\r\n\r\nfunction drawEmptyState() {\r\n    if (!$element.find('text.nv-noData').get(0)) {\r\n        d3.select($element.find('.empty-state')[0]).remove();\r\n    } else {\r\n        let containerWidth = $element.find('.line-chart').innerWidth(),\r\n            containerHeight = $element.find('.line-chart').innerHeight();\r\n\r\n        if ($element.find('.empty-state').get(0)) {\r\n            chartElem\r\n                .select('image')\r\n                .attr('transform', 'scale(' + (containerWidth / 1151) + ',' + (containerHeight / 216) + ')');\r\n        } else {\r\n            chartElem\r\n                .append(\"defs\")\r\n                .append(\"pattern\")\r\n                .attr(\"height\", 1)\r\n                .attr(\"width\", 1)\r\n                .attr(\"x\", \"0\")\r\n                .attr(\"y\", \"0\")\r\n                .attr(\"id\", \"bg\")\r\n                .append(\"image\")\r\n                .attr('x', 17)\r\n                .attr('y', 0)\r\n                .attr('height', \"216px\")\r\n                .attr('width', \"1151px\")\r\n                .attr('transform', 'scale(' + (containerWidth / 1151) + ',' + (containerHeight / 216) + ')')\r\n                .attr(\"xlink:href\", \"images/line_chart_empty_state.svg\");\r\n\r\n            chartElem\r\n                .append('rect')\r\n                .classed('empty-state', true)\r\n                .attr('height', \"100%\")\r\n                .attr('width', \"100%\")\r\n                .attr('fill', 'url(#bg)');\r\n        }\r\n    }\r\n}\r\n\r\nfunction updateScroll(domains, boundary) {\r\n    var bDiff = boundary[1] - boundary[0],\r\n        domDiff = domains[1] - domains[0],\r\n        isEqual = (domains[1] - domains[0]) / bDiff === 1;\r\n\r\n    $($element[0]).find('.visual-scroll')\r\n        .css('opacity', function () {\r\n            return isEqual ? 0 : 1;\r\n        });\r\n\r\n    if (isEqual) return;\r\n\r\n    $($element[0]).find('.scrolled-block')\r\n        .css('left', function () {\r\n            return domains[0] / bDiff * 100 + '%';\r\n        })\r\n        .css('width', function () {\r\n            return domDiff / bDiff * 100 + '%';\r\n        });\r\n}\r\n\r\nfunction addZoom(chart, svg) {\r\n    // scaleExtent\r\n    var scaleExtent = 4;\r\n\r\n    // parameters\r\n    var yAxis = null;\r\n    var xAxis = null;\r\n    var xDomain = null;\r\n    var yDomain = null;\r\n    var redraw = null;\r\n    var svg = svg;\r\n\r\n    // scales\r\n    var xScale = null;\r\n    var yScale = null;\r\n\r\n    // min/max boundaries\r\n    var x_boundary = null;\r\n    var y_boundary = null;\r\n\r\n    // create d3 zoom handler\r\n    var d3zoom = d3.behavior.zoom();\r\n    var prevXDomain = null;\r\n    var prevScale = null;\r\n    var prevTranslate = null;\r\n\r\n    setData(chart);\r\n\r\n    function setData(newChart) {\r\n        // parameters\r\n        yAxis = newChart.yAxis;\r\n        xAxis = newChart.xAxis;\r\n        xDomain = newChart.xDomain || xAxis.scale().domain;\r\n        yDomain = newChart.yDomain || yAxis.scale().domain;\r\n        redraw = newChart.update;\r\n\r\n        // scales\r\n        xScale = xAxis.scale();\r\n        yScale = yAxis.scale();\r\n\r\n        // min/max boundaries\r\n        x_boundary = xAxis.scale().domain().slice();\r\n        y_boundary = yAxis.scale().domain().slice();\r\n\r\n        // create d3 zoom handler\r\n        prevXDomain = x_boundary;\r\n        prevScale = d3zoom.scale();\r\n        prevTranslate = d3zoom.translate();\r\n\r\n        // ensure nice axis\r\n        xScale.nice();\r\n        yScale.nice();\r\n    }\r\n\r\n    // fix domain\r\n    function fixDomain(domain, boundary, scale, translate) {\r\n        if (domain[0] < boundary[0]) {\r\n            domain[0] = boundary[0];\r\n            if (prevXDomain[0] !== boundary[0] || scale !== prevScale) {\r\n                domain[1] += (boundary[0] - domain[0]);\r\n            } else {\r\n                domain[1] = prevXDomain[1];\r\n                translate = _.clone(prevTranslate);\r\n            }\r\n\r\n        }\r\n        if (domain[1] > boundary[1]) {\r\n            domain[1] = boundary[1];\r\n            if (prevXDomain[1] !== boundary[1] || scale !== prevScale) {\r\n                domain[0] -= (domain[1] - boundary[1]);\r\n            } else {\r\n                domain[0] = prevXDomain[0];\r\n                translate = _.clone(prevTranslate);\r\n            }\r\n        }\r\n\r\n        d3zoom.translate(translate);\r\n        prevXDomain = _.clone(domain);\r\n        prevScale = _.clone(scale);\r\n        prevTranslate = _.clone(translate);\r\n        return domain;\r\n    }\r\n\r\n    function updateChart() {\r\n        d3zoom.scale(1);\r\n        d3zoom.translate([0, 0]);\r\n        xScale.domain(x_boundary);\r\n        d3zoom.x(xScale).y(yScale);\r\n        svg.call(d3zoom);\r\n    }\r\n\r\n    // zoom event handler\r\n    function zoomed() {\r\n        // Switch off vertical zooming temporary\r\n        // yDomain(yScale.domain());\r\n\r\n        if (( < any > d3.event).scale === 1) {\r\n            unzoomed();\r\n            updateChart();\r\n        } else {\r\n            xDomain(fixDomain(xScale.domain(), x_boundary, ( < any > d3.event).scale, ( < any > d3.event).translate));\r\n            redraw();\r\n        }\r\n\r\n        updateScroll(xScale.domain(), x_boundary);\r\n    }\r\n\r\n    //\r\n    setZoom = function (which) {\r\n        var center0 = [svg[0][0].getBBox().width / 2, svg[0][0].getBBox().height / 2];\r\n        var translate0 = d3zoom.translate(),\r\n            coordinates0 = coordinates(center0);\r\n\r\n        if (which === 'in') {\r\n            if (prevScale < scaleExtent) d3zoom.scale(prevScale + 0.2);\r\n        } else {\r\n            if (prevScale > 1) d3zoom.scale(prevScale - 0.2);\r\n        }\r\n\r\n        var center1 = point(coordinates0);\r\n        d3zoom.translate([translate0[0] + center0[0] - center1[0], translate0[1] + center0[1] - center1[1]]);\r\n\r\n        d3zoom.event(svg);\r\n    };\r\n\r\n    function step(which) {\r\n        var translate = d3zoom.translate();\r\n\r\n        if (which === 'right') {\r\n            translate[0] -= 20;\r\n        } else {\r\n            translate[0] += 20;\r\n        }\r\n\r\n        d3zoom.translate(translate);\r\n        d3zoom.event(svg);\r\n    }\r\n\r\n    function coordinates(point) {\r\n        var scale = d3zoom.scale(),\r\n            translate = d3zoom.translate();\r\n        return [(point[0] - translate[0]) / scale, (point[1] - translate[1]) / scale];\r\n    }\r\n\r\n    function point(coordinates) {\r\n        var scale = d3zoom.scale(),\r\n            translate = d3zoom.translate();\r\n        return [coordinates[0] * scale + translate[0], coordinates[1] * scale + translate[1]];\r\n    }\r\n\r\n    function keypress() {\r\n        switch (( < any > d3.event).keyCode) {\r\n            case 39:\r\n                step('right');\r\n                break;\r\n            case 37:\r\n                step('left');\r\n                break;\r\n            case 107:\r\n                setZoom('in');\r\n                break;\r\n            case 109:\r\n                setZoom('out');\r\n        }\r\n    }\r\n\r\n    // zoom event handler\r\n    function unzoomed() {\r\n        xDomain(x_boundary);\r\n        redraw();\r\n        d3zoom.scale(1);\r\n        d3zoom.translate([0, 0]);\r\n        prevScale = 1;\r\n        prevTranslate = [0, 0];\r\n    }\r\n\r\n    // initialize wrapper\r\n    d3zoom.x(xScale)\r\n        .y(yScale)\r\n        .scaleExtent([1, scaleExtent])\r\n        .on('zoom', zoomed);\r\n\r\n    // add handler\r\n    svg.call(d3zoom).on('dblclick.zoom', unzoomed);\r\n    $($element.get(0)).addClass('dynamic');\r\n\r\n    // add keyboard handlers\r\n    svg\r\n        .attr('focusable', false)\r\n        .style('outline', 'none')\r\n        .on('keydown', keypress)\r\n        .on('focus', function () {});\r\n\r\n    var getXMinMax = function (data) {\r\n        var maxVal, minVal = null;\r\n\r\n        for (var i = 0; i < data.length; i++) {\r\n            if (!data[i].disabled) {\r\n                var tempMinVal = d3.max(data[i].values, function (d: any) {\r\n                    return vm.xFormat ? vm.xFormat(d.x) : d.x;\r\n                });\r\n                var tempMaxVal = d3.min(data[i].values, function (d: any) {\r\n                    return vm.xFormat ? vm.xFormat(d.x) : d.x;\r\n                });\r\n                minVal = (!minVal || tempMinVal < minVal) ? tempMinVal : minVal;\r\n                maxVal = (!maxVal || tempMaxVal > maxVal) ? tempMaxVal : maxVal;\r\n            }\r\n        }\r\n        return [maxVal, minVal];\r\n    };\r\n\r\n    updateZoomOptions = function (data) {\r\n        yAxis = chart.yAxis;\r\n        xAxis = chart.xAxis;\r\n\r\n        xScale = xAxis.scale();\r\n        yScale = yAxis.scale();\r\n\r\n        x_boundary = getXMinMax(data);\r\n\r\n        if (d3zoom.scale() === 1) {\r\n            d3zoom.x(xScale).y(yScale);\r\n            svg.call(d3zoom);\r\n            d3zoom.event(svg);\r\n        }\r\n\r\n        updateScroll(xScale.domain(), x_boundary);\r\n    }\r\n}\r\n\r\n/**\r\n * Converts palette color name into RGBA color representation.\r\n * Should by replaced by palette for charts.\r\n *\r\n * @param {string} color    Name of color from AM palette\r\n * @returns {string} RGBa format\r\n */\r\n/*\r\nfunction materialColorToRgba(color) {\r\n    return 'rgba(' + $mdColorPalette[color][500].value[0] + ',' +\r\n        $mdColorPalette[color][500].value[1] + ',' +\r\n        $mdColorPalette[color][500].value[2] + ',' +\r\n        ($mdColorPalette[color][500].value[3] || 1) + ')';\r\n}\r\n\r\n/**\r\n * Helpful method\r\n * @private\r\n */\r\n/*\r\nfunction getMaterialColor(index) {\r\n    if (!colors || colors.length < 1) return null;\r\n\r\n    if (index >= colors.length) {\r\n        index = 0;\r\n    }\r\n\r\n    return materialColorToRgba(colors[index]);\r\n}\r\n/**\r\n * Helpful method\r\n * @private\r\n */\r\n/*\r\n                function generateParameterColor() {\r\n                    if (!vm.data) return;\r\n\r\n                    vm.data.forEach(function (item, index) {\r\n                        item.color = item.color || getMaterialColor(index);\r\n                    });\r\n                }\r\n            }\r\n        };\r\n    }\r\n}\r\n*/","import {\r\n    IChartsUtilityService\r\n} from '../utility/IChartsUtilityService';\r\n\r\n{\r\n    interface IPieChartBindings {\r\n        [key: string]: any;\r\n\r\n        series: any;\r\n        donut: any;\r\n        legend: any;\r\n        total: any;\r\n        size: any;\r\n        centered: any;\r\n    }\r\n\r\n    const PieChartBindings: IPieChartBindings = {\r\n        series: '<pipSeries',\r\n        donut: '<?pipDonut',\r\n        legend: '<?pipShowLegend',\r\n        total: '<?pipShowTotal',\r\n        size: '<?pipPieSize',\r\n        centered: '<?pipCentered'\r\n    }\r\n\r\n    class PieChartBindingsChanges implements ng.IOnChangesObject, IPieChartBindings {\r\n        [key: string]: any;\r\n\r\n        series: ng.IChangesObject < any > ;\r\n        donut: ng.IChangesObject < boolean > ;\r\n        legend: ng.IChangesObject < boolean > ;\r\n        total: ng.IChangesObject < boolean > ;\r\n        size: ng.IChangesObject < number | string > ;\r\n        centered: ng.IChangesObject < boolean > ;\r\n    }\r\n\r\n    class PieChartController implements ng.IController, IPieChartBindings {\r\n        public series: any;\r\n        public donut: boolean = false;\r\n        public legend: boolean = true;\r\n        public total: boolean = true;\r\n        public size: number | string = 250;\r\n        public centered: boolean = false;\r\n\r\n        private data: any;\r\n        private chart: nv.PieChart = null;\r\n        private chartElem: any;\r\n        private titleElem: any;\r\n        private colors: string[];\r\n\r\n        constructor(\r\n            private $element: JQuery,\r\n            private $scope: ng.IScope,\r\n            private $timeout: ng.ITimeoutService,\r\n            private pipChartsUtility: IChartsUtilityService\r\n        ) {\r\n            this.colors = this.pipChartsUtility.generateMaterialColors();\r\n        }\r\n\r\n        public $onInit() {\r\n            this.data = this.series;\r\n            this.generateParameterColor();\r\n            ( < any > d3.scale).paletteColors = () => {\r\n                return d3.scale.ordinal().range(this.colors.map((color) => {\r\n                    return this.pipChartsUtility.materialColorToRgba(color);\r\n                }));\r\n            };\r\n\r\n            this.instantiateChart();\r\n        }\r\n\r\n        public $onChanges(changes: PieChartBindingsChanges) {\r\n            this.legend = changes.legend ? changes.legend.currentValue : this.legend;\r\n            this.centered = changes.centered ? changes.centered.currentValue : this.centered;\r\n            this.donut = changes.donut ? changes.donut.currentValue : this.donut;\r\n            this.size = changes.size ? changes.size.currentValue : this.size;\r\n            this.total = changes.total ? changes.total.currentValue : this.total;\r\n\r\n            if (changes.series && changes.series.currentValue !== changes.series.previousValue) {\r\n                this.data = changes.series.currentValue;\r\n                this.generateParameterColor();\r\n\r\n                if (this.chart) {\r\n                    this.chartElem.datum(this.data).call(this.chart);\r\n                    this.$timeout(() => {\r\n                        this.resizeTitleLabelUnwrap();\r\n                    });\r\n                    this.drawEmptyState(d3.select(this.$element.get(0)).select('.pie-chart svg')[0][0]);\r\n                }\r\n            }\r\n        }\r\n\r\n        private instantiateChart() {\r\n            nv.addGraph(() => {\r\n                this.chart = nv.models.pieChart()\r\n                    .margin({\r\n                        top: 0,\r\n                        right: 0,\r\n                        bottom: 0,\r\n                        left: 0\r\n                    })\r\n                    .x((d) => {\r\n                        return this.donut ? d.value : null;\r\n                    })\r\n                    .y((d) => {\r\n                        return d.value;\r\n                    })\r\n                    .height(Number(this.size))\r\n                    .width(Number(this.size))\r\n                    .showLabels(true)\r\n                    .labelThreshold(.001)\r\n                    .growOnHover(false)\r\n                    .donut(this.donut)\r\n                    .donutRatio(0.5)\r\n                    .color((d) => {\r\n                        return d.color || ( < any > d3.scale).paletteColors().range();\r\n                    });\r\n\r\n                this.chart.tooltip.enabled(false);\r\n                this.chart.noData('There is no data right now...');\r\n                this.chart.showLegend(false);\r\n\r\n                this.chartElem = d3.select(this.$element.get(0))\r\n                    .select('.pie-chart')\r\n                    .style('height', (this.size) + 'px')\r\n                    .style('width', this.centered ? '100%' : (this.size) + 'px')\r\n                    .select('svg')\r\n                    .style('opacity', 0)\r\n                    .datum(this.data || [])\r\n                    .call(this.chart);\r\n\r\n                nv.utils.windowResize(() => {\r\n                    this.chart.update();\r\n                    this.$timeout(() => {\r\n                        this.resizeTitleLabelUnwrap();\r\n                    });\r\n                    this.centerChart();\r\n                    this.drawEmptyState(d3.select(this.$element.get(0)).select('.pie-chart svg')[0][0]);\r\n                });\r\n\r\n                return this.chart;\r\n            }, () => {\r\n                this.$timeout(() => {\r\n                    const svgElem = d3.select(this.$element.get(0)).select('.pie-chart svg')[0][0];\r\n                    this.renderTotalLabel(svgElem);\r\n                    d3.select(svgElem)\r\n                        .transition()\r\n                        .duration(1000)\r\n                        .style('opacity', 1);\r\n\r\n                    this.$timeout(() => {\r\n                        this.resizeTitleLabelUnwrap();\r\n                    }, 800);\r\n                    this.centerChart();\r\n                    this.drawEmptyState(svgElem);\r\n                });\r\n            });\r\n        }\r\n\r\n        private drawEmptyState(svg) {\r\n            if (!this.$element.find('text.nv-noData').get(0)) {\r\n                d3.select(this.$element.find('.empty-state')[0]).remove();\r\n                this.$element.find('.pip-empty-pie-text').remove();\r\n            } else {\r\n                if (this.$element.find('.pip-empty-pie-text').length === 0) {\r\n                    this.$element.find('.pie-chart')\r\n                        .append(\"<div class='pip-empty-pie-text'>There is no data right now...</div>\");\r\n                }\r\n\r\n                const pie = d3.layout.pie().sort(null),\r\n                    size = Number(this.size);\r\n\r\n                const arc = d3.svg.arc()\r\n                    .innerRadius(size / 2 - 20)\r\n                    .outerRadius(size / 2 - 57);\r\n\r\n                svg = d3.select(svg)\r\n                    .append(\"g\")\r\n                    .classed('empty-state', true)\r\n                    .attr('transform', \"translate(\" + size / 2 + \",\" + size / 2 + \")\");\r\n\r\n                const path = svg.selectAll(\"path\")\r\n                    .data(pie([1]))\r\n                    .enter().append(\"path\")\r\n                    .attr(\"fill\", \"rgba(0, 0, 0, 0.08)\")\r\n                    .attr(\"d\", < any > arc);\r\n            }\r\n        }\r\n\r\n        private centerChart() {\r\n            if (this.centered) {\r\n                const svgElem = d3.select(this.$element.get(0)).select('.pie-chart svg')[0][0],\r\n                    leftMargin = $(svgElem).innerWidth() / 2 - (Number(this.size) || 250) / 2;\r\n                d3.select(this.$element.find('.nv-pieChart')[0]).attr('transform', 'translate(' + leftMargin + ', 0)');\r\n            }\r\n        }\r\n\r\n        private renderTotalLabel(svgElem) {\r\n            if ((!this.total && !this.donut) || !this.data) return;\r\n\r\n            let totalVal = this.data.reduce(function (sum, curr) {\r\n                return sum + curr.value;\r\n            }, 0);\r\n\r\n            if (totalVal >= 10000) totalVal = (totalVal / 1000).toFixed(1) + 'k';\r\n\r\n            d3.select(svgElem)\r\n                .select('.nv-pie:not(.nvd3)')\r\n                .append('text')\r\n                .classed('label-total', true)\r\n                .attr('text-anchor', 'middle')\r\n                .style('dominant-baseline', 'central')\r\n                .text(totalVal);\r\n\r\n            this.titleElem = d3.select(this.$element.find('text.label-total').get(0)).style('opacity', 0);\r\n        }\r\n\r\n        private resizeTitleLabelUnwrap() {\r\n            if ((!this.total && !this.donut) || !this.data) return;\r\n\r\n            const boxSize = ( < any > this.$element.find('.nvd3.nv-pieChart').get(0)).getBBox();\r\n\r\n            if (!boxSize.width || !boxSize.height) {\r\n                return;\r\n            }\r\n\r\n            this.titleElem.style('font-size', ~~boxSize.width / 4.5).style('opacity', 1);\r\n        }\r\n\r\n        private generateParameterColor() {\r\n            if (!this.data) return;\r\n\r\n            _.each(this.data, (item: any, index: number) => {\r\n                item.color = item.color || this.pipChartsUtility.getMaterialColor(index, this.colors);\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    const PieChart: ng.IComponentOptions = {\r\n        bindings: PieChartBindings,\r\n        templateUrl: 'pie/pieChart.html',\r\n        controller: PieChartController\r\n    }\r\n\r\n    angular.module('pipPieCharts', [])\r\n        .component('pipPieChart', PieChart);\r\n}","import {\r\n    IChartsUtilityService\r\n} from './IChartsUtilityService';\r\n\r\n{\r\n    class ChartsUtilityService implements IChartsUtilityService {\r\n        constructor(\r\n            private $mdColorPalette: angular.material.IColorPalette\r\n        ) { }\r\n\r\n        public getMaterialColor(index: number, colors: string[]): string {\r\n            if (!colors || colors.length < 1) return null;\r\n\r\n            if (index >= colors.length) {\r\n                index = 0;\r\n            }\r\n\r\n            return this.materialColorToRgba(colors[index]);\r\n        }\r\n\r\n        public materialColorToRgba(color: string): string {\r\n            return 'rgba(' + this.$mdColorPalette[color][500].value[0] + ',' +\r\n                this.$mdColorPalette[color][500].value[1] + ',' +\r\n                this.$mdColorPalette[color][500].value[2] + ',' +\r\n                (this.$mdColorPalette[color][500].value[3] || 1) + ')';\r\n        }\r\n\r\n        public generateMaterialColors(): string[] {\r\n            let colors = _.map((<any>this.$mdColorPalette), (palette, color: string) => {\r\n                return color;\r\n            });\r\n            colors = _.filter(colors, (color: string) => {\r\n                return _.isObject(this.$mdColorPalette[color]) && _.isObject(this.$mdColorPalette[color][500]) && _.isArray(this.$mdColorPalette[color][500].value);\r\n            });\r\n\r\n            return colors;\r\n        }\r\n    }\r\n\r\n    angular\r\n        .module('pipChartsUtility', [])\r\n        .service('pipChartsUtility', ChartsUtilityService);\r\n}","(function(module) {\ntry {\n  module = angular.module('pipCharts.Templates');\n} catch (e) {\n  module = angular.module('pipCharts.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('bar/barChart.html',\n    '<div class=\"bar-chart\">\\n' +\n    '    <svg ></svg>\\n' +\n    '</div>\\n' +\n    '\\n' +\n    '<pip-chart-legend ng-show=\"$ctrl.legend\" pip-series=\"$ctrl.legend\" pip-interactive=\"$ctrl.interactiveLegend\"></pip-chart-legend>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipCharts.Templates');\n} catch (e) {\n  module = angular.module('pipCharts.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('legend/interactiveLegend.html',\n    '<div >\\n' +\n    '    <div class=\"chart-legend-item\" ng-repeat=\"item in $ctrl.series\" ng-show=\"item.values || item.value\">\\n' +\n    '        <md-checkbox ng-model=\"item.disabled\"\\n' +\n    '                     ng-true-value=\"false\"\\n' +\n    '                     ng-false-value=\"true\"\\n' +\n    '                     ng-if=\"$ctrl.interactive\"\\n' +\n    '                     aria-label=\"{{ item.label }}\">\\n' +\n    '            <p class=\"legend-item-value\"\\n' +\n    '                ng-if=\"item.value\"\\n' +\n    '               ng-style=\"{\\'background-color\\': item.color}\">\\n' +\n    '                {{ item.value }}\\n' +\n    '            </p>\\n' +\n    '            <p class=\"legend-item-label\">{{:: item.label || item.key }}</p>\\n' +\n    '        </md-checkbox>\\n' +\n    '\\n' +\n    '        <div ng-if=\"!$ctrl.interactive\">\\n' +\n    '            <span class=\"bullet\" ng-style=\"{\\'background-color\\': item.color}\"></span>\\n' +\n    '            <span>{{:: item.label || item.key}}</span>\\n' +\n    '        </div>\\n' +\n    '    </div>\\n' +\n    '</div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipCharts.Templates');\n} catch (e) {\n  module = angular.module('pipCharts.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('line/lineChart.html',\n    '<div class=\"line-chart\" flex=\"auto\" layout=\"column\">\\n' +\n    '    <svg class=\"flex-auto\" ng-class=\"{\\'visible-x-axis\\': $ctrl.showXAxis, \\'visible-y-axis\\': $ctrl.showYAxis}\">\\n' +\n    '    </svg>\\n' +\n    '    <div class=\"scroll-container\">\\n' +\n    '        <div class=\"visual-scroll\">\\n' +\n    '            <div class=\"scrolled-block\"></div>\\n' +\n    '        </div>\\n' +\n    '    </div>\\n' +\n    '    <md-button class=\"md-fab md-mini minus-button\" ng-click=\"$ctrl.zoomOut()\">\\n' +\n    '        <md-icon md-svg-icon=\"icons:minus-circle\"></md-icon>\\n' +\n    '    </md-button>\\n' +\n    '    <md-button class=\"md-fab md-mini plus-button\" ng-click=\"$ctrl.zoomIn()\">\\n' +\n    '        <md-icon md-svg-icon=\"icons:plus-circle\"></md-icon>\\n' +\n    '    </md-button>\\n' +\n    '</div>\\n' +\n    '\\n' +\n    '<pip-chart-legend pip-series=\"$ctrl.legend\" pip-interactive=\"$ctrl.interactiveLegend\"></pip-chart-legend>\\n' +\n    '');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipCharts.Templates');\n} catch (e) {\n  module = angular.module('pipCharts.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('pie/pieChart.html',\n    '<div class=\"pie-chart\" class=\"layout-column flex-auto\" ng-class=\"{\\'circle\\': !$ctrl.donut}\">\\n' +\n    '    <svg class=\"flex-auto\"></svg>\\n' +\n    '</div>\\n' +\n    '\\n' +\n    '<pip-chart-legend pip-series=\"$ctrl.data\" pip-interactive=\"false\" ng-if=\"$ctrl.legend\"></pip-chart-legend>');\n}]);\n})();\n\n//# sourceMappingURL=pip-webui-charts-html.js.map\n"],"preExisting":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}